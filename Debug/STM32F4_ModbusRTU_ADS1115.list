
STM32F4_ModbusRTU_ADS1115.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ebc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  08009050  08009050  00019050  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009178  08009178  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08009178  08009178  00019178  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009180  08009180  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009180  08009180  00019180  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009184  08009184  00019184  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08009188  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000444c  20000078  08009200  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200044c4  08009200  000244c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017e11  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000032ec  00000000  00000000  00037eb9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000014f8  00000000  00000000  0003b1a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001390  00000000  00000000  0003c6a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023918  00000000  00000000  0003da30  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010a87  00000000  00000000  00061348  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d5e41  00000000  00000000  00071dcf  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00147c10  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c10  00000000  00000000  00147c8c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009034 	.word	0x08009034

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08009034 	.word	0x08009034

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800030e:	f1a4 0401 	sub.w	r4, r4, #1
 8000312:	d1e9      	bne.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__gedf2>:
 800096c:	f04f 3cff 	mov.w	ip, #4294967295
 8000970:	e006      	b.n	8000980 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__ledf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	e002      	b.n	8000980 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__cmpdf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000984:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000996:	d01b      	beq.n	80009d0 <__cmpdf2+0x54>
 8000998:	b001      	add	sp, #4
 800099a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800099e:	bf0c      	ite	eq
 80009a0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009a4:	ea91 0f03 	teqne	r1, r3
 80009a8:	bf02      	ittt	eq
 80009aa:	ea90 0f02 	teqeq	r0, r2
 80009ae:	2000      	moveq	r0, #0
 80009b0:	4770      	bxeq	lr
 80009b2:	f110 0f00 	cmn.w	r0, #0
 80009b6:	ea91 0f03 	teq	r1, r3
 80009ba:	bf58      	it	pl
 80009bc:	4299      	cmppl	r1, r3
 80009be:	bf08      	it	eq
 80009c0:	4290      	cmpeq	r0, r2
 80009c2:	bf2c      	ite	cs
 80009c4:	17d8      	asrcs	r0, r3, #31
 80009c6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ca:	f040 0001 	orr.w	r0, r0, #1
 80009ce:	4770      	bx	lr
 80009d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d102      	bne.n	80009e0 <__cmpdf2+0x64>
 80009da:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009de:	d107      	bne.n	80009f0 <__cmpdf2+0x74>
 80009e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d1d6      	bne.n	8000998 <__cmpdf2+0x1c>
 80009ea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ee:	d0d3      	beq.n	8000998 <__cmpdf2+0x1c>
 80009f0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdrcmple>:
 80009f8:	4684      	mov	ip, r0
 80009fa:	4610      	mov	r0, r2
 80009fc:	4662      	mov	r2, ip
 80009fe:	468c      	mov	ip, r1
 8000a00:	4619      	mov	r1, r3
 8000a02:	4663      	mov	r3, ip
 8000a04:	e000      	b.n	8000a08 <__aeabi_cdcmpeq>
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdcmpeq>:
 8000a08:	b501      	push	{r0, lr}
 8000a0a:	f7ff ffb7 	bl	800097c <__cmpdf2>
 8000a0e:	2800      	cmp	r0, #0
 8000a10:	bf48      	it	mi
 8000a12:	f110 0f00 	cmnmi.w	r0, #0
 8000a16:	bd01      	pop	{r0, pc}

08000a18 <__aeabi_dcmpeq>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff fff4 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a20:	bf0c      	ite	eq
 8000a22:	2001      	moveq	r0, #1
 8000a24:	2000      	movne	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmplt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffea 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmple>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff ffe0 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a48:	bf94      	ite	ls
 8000a4a:	2001      	movls	r0, #1
 8000a4c:	2000      	movhi	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_dcmpge>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffce 	bl	80009f8 <__aeabi_cdrcmple>
 8000a5c:	bf94      	ite	ls
 8000a5e:	2001      	movls	r0, #1
 8000a60:	2000      	movhi	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_dcmpgt>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffc4 	bl	80009f8 <__aeabi_cdrcmple>
 8000a70:	bf34      	ite	cc
 8000a72:	2001      	movcc	r0, #1
 8000a74:	2000      	movcs	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_dcmpun>:
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	d102      	bne.n	8000a8c <__aeabi_dcmpun+0x10>
 8000a86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8a:	d10a      	bne.n	8000aa2 <__aeabi_dcmpun+0x26>
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a94:	d102      	bne.n	8000a9c <__aeabi_dcmpun+0x20>
 8000a96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9a:	d102      	bne.n	8000aa2 <__aeabi_dcmpun+0x26>
 8000a9c:	f04f 0000 	mov.w	r0, #0
 8000aa0:	4770      	bx	lr
 8000aa2:	f04f 0001 	mov.w	r0, #1
 8000aa6:	4770      	bx	lr

08000aa8 <__aeabi_d2uiz>:
 8000aa8:	004a      	lsls	r2, r1, #1
 8000aaa:	d211      	bcs.n	8000ad0 <__aeabi_d2uiz+0x28>
 8000aac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab0:	d211      	bcs.n	8000ad6 <__aeabi_d2uiz+0x2e>
 8000ab2:	d50d      	bpl.n	8000ad0 <__aeabi_d2uiz+0x28>
 8000ab4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000abc:	d40e      	bmi.n	8000adc <__aeabi_d2uiz+0x34>
 8000abe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ac6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aca:	fa23 f002 	lsr.w	r0, r3, r2
 8000ace:	4770      	bx	lr
 8000ad0:	f04f 0000 	mov.w	r0, #0
 8000ad4:	4770      	bx	lr
 8000ad6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ada:	d102      	bne.n	8000ae2 <__aeabi_d2uiz+0x3a>
 8000adc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ae0:	4770      	bx	lr
 8000ae2:	f04f 0000 	mov.w	r0, #0
 8000ae6:	4770      	bx	lr

08000ae8 <__aeabi_uldivmod>:
 8000ae8:	b953      	cbnz	r3, 8000b00 <__aeabi_uldivmod+0x18>
 8000aea:	b94a      	cbnz	r2, 8000b00 <__aeabi_uldivmod+0x18>
 8000aec:	2900      	cmp	r1, #0
 8000aee:	bf08      	it	eq
 8000af0:	2800      	cmpeq	r0, #0
 8000af2:	bf1c      	itt	ne
 8000af4:	f04f 31ff 	movne.w	r1, #4294967295
 8000af8:	f04f 30ff 	movne.w	r0, #4294967295
 8000afc:	f000 b972 	b.w	8000de4 <__aeabi_idiv0>
 8000b00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b08:	f000 f806 	bl	8000b18 <__udivmoddi4>
 8000b0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b14:	b004      	add	sp, #16
 8000b16:	4770      	bx	lr

08000b18 <__udivmoddi4>:
 8000b18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b1c:	9e08      	ldr	r6, [sp, #32]
 8000b1e:	4604      	mov	r4, r0
 8000b20:	4688      	mov	r8, r1
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d14b      	bne.n	8000bbe <__udivmoddi4+0xa6>
 8000b26:	428a      	cmp	r2, r1
 8000b28:	4615      	mov	r5, r2
 8000b2a:	d967      	bls.n	8000bfc <__udivmoddi4+0xe4>
 8000b2c:	fab2 f282 	clz	r2, r2
 8000b30:	b14a      	cbz	r2, 8000b46 <__udivmoddi4+0x2e>
 8000b32:	f1c2 0720 	rsb	r7, r2, #32
 8000b36:	fa01 f302 	lsl.w	r3, r1, r2
 8000b3a:	fa20 f707 	lsr.w	r7, r0, r7
 8000b3e:	4095      	lsls	r5, r2
 8000b40:	ea47 0803 	orr.w	r8, r7, r3
 8000b44:	4094      	lsls	r4, r2
 8000b46:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b4a:	0c23      	lsrs	r3, r4, #16
 8000b4c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b50:	fa1f fc85 	uxth.w	ip, r5
 8000b54:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b58:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b5c:	fb07 f10c 	mul.w	r1, r7, ip
 8000b60:	4299      	cmp	r1, r3
 8000b62:	d909      	bls.n	8000b78 <__udivmoddi4+0x60>
 8000b64:	18eb      	adds	r3, r5, r3
 8000b66:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b6a:	f080 811b 	bcs.w	8000da4 <__udivmoddi4+0x28c>
 8000b6e:	4299      	cmp	r1, r3
 8000b70:	f240 8118 	bls.w	8000da4 <__udivmoddi4+0x28c>
 8000b74:	3f02      	subs	r7, #2
 8000b76:	442b      	add	r3, r5
 8000b78:	1a5b      	subs	r3, r3, r1
 8000b7a:	b2a4      	uxth	r4, r4
 8000b7c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b80:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b88:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b8c:	45a4      	cmp	ip, r4
 8000b8e:	d909      	bls.n	8000ba4 <__udivmoddi4+0x8c>
 8000b90:	192c      	adds	r4, r5, r4
 8000b92:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b96:	f080 8107 	bcs.w	8000da8 <__udivmoddi4+0x290>
 8000b9a:	45a4      	cmp	ip, r4
 8000b9c:	f240 8104 	bls.w	8000da8 <__udivmoddi4+0x290>
 8000ba0:	3802      	subs	r0, #2
 8000ba2:	442c      	add	r4, r5
 8000ba4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000ba8:	eba4 040c 	sub.w	r4, r4, ip
 8000bac:	2700      	movs	r7, #0
 8000bae:	b11e      	cbz	r6, 8000bb8 <__udivmoddi4+0xa0>
 8000bb0:	40d4      	lsrs	r4, r2
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	e9c6 4300 	strd	r4, r3, [r6]
 8000bb8:	4639      	mov	r1, r7
 8000bba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bbe:	428b      	cmp	r3, r1
 8000bc0:	d909      	bls.n	8000bd6 <__udivmoddi4+0xbe>
 8000bc2:	2e00      	cmp	r6, #0
 8000bc4:	f000 80eb 	beq.w	8000d9e <__udivmoddi4+0x286>
 8000bc8:	2700      	movs	r7, #0
 8000bca:	e9c6 0100 	strd	r0, r1, [r6]
 8000bce:	4638      	mov	r0, r7
 8000bd0:	4639      	mov	r1, r7
 8000bd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bd6:	fab3 f783 	clz	r7, r3
 8000bda:	2f00      	cmp	r7, #0
 8000bdc:	d147      	bne.n	8000c6e <__udivmoddi4+0x156>
 8000bde:	428b      	cmp	r3, r1
 8000be0:	d302      	bcc.n	8000be8 <__udivmoddi4+0xd0>
 8000be2:	4282      	cmp	r2, r0
 8000be4:	f200 80fa 	bhi.w	8000ddc <__udivmoddi4+0x2c4>
 8000be8:	1a84      	subs	r4, r0, r2
 8000bea:	eb61 0303 	sbc.w	r3, r1, r3
 8000bee:	2001      	movs	r0, #1
 8000bf0:	4698      	mov	r8, r3
 8000bf2:	2e00      	cmp	r6, #0
 8000bf4:	d0e0      	beq.n	8000bb8 <__udivmoddi4+0xa0>
 8000bf6:	e9c6 4800 	strd	r4, r8, [r6]
 8000bfa:	e7dd      	b.n	8000bb8 <__udivmoddi4+0xa0>
 8000bfc:	b902      	cbnz	r2, 8000c00 <__udivmoddi4+0xe8>
 8000bfe:	deff      	udf	#255	; 0xff
 8000c00:	fab2 f282 	clz	r2, r2
 8000c04:	2a00      	cmp	r2, #0
 8000c06:	f040 808f 	bne.w	8000d28 <__udivmoddi4+0x210>
 8000c0a:	1b49      	subs	r1, r1, r5
 8000c0c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c10:	fa1f f885 	uxth.w	r8, r5
 8000c14:	2701      	movs	r7, #1
 8000c16:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c1a:	0c23      	lsrs	r3, r4, #16
 8000c1c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c20:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c24:	fb08 f10c 	mul.w	r1, r8, ip
 8000c28:	4299      	cmp	r1, r3
 8000c2a:	d907      	bls.n	8000c3c <__udivmoddi4+0x124>
 8000c2c:	18eb      	adds	r3, r5, r3
 8000c2e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c32:	d202      	bcs.n	8000c3a <__udivmoddi4+0x122>
 8000c34:	4299      	cmp	r1, r3
 8000c36:	f200 80cd 	bhi.w	8000dd4 <__udivmoddi4+0x2bc>
 8000c3a:	4684      	mov	ip, r0
 8000c3c:	1a59      	subs	r1, r3, r1
 8000c3e:	b2a3      	uxth	r3, r4
 8000c40:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c44:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c48:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c4c:	fb08 f800 	mul.w	r8, r8, r0
 8000c50:	45a0      	cmp	r8, r4
 8000c52:	d907      	bls.n	8000c64 <__udivmoddi4+0x14c>
 8000c54:	192c      	adds	r4, r5, r4
 8000c56:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5a:	d202      	bcs.n	8000c62 <__udivmoddi4+0x14a>
 8000c5c:	45a0      	cmp	r8, r4
 8000c5e:	f200 80b6 	bhi.w	8000dce <__udivmoddi4+0x2b6>
 8000c62:	4618      	mov	r0, r3
 8000c64:	eba4 0408 	sub.w	r4, r4, r8
 8000c68:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c6c:	e79f      	b.n	8000bae <__udivmoddi4+0x96>
 8000c6e:	f1c7 0c20 	rsb	ip, r7, #32
 8000c72:	40bb      	lsls	r3, r7
 8000c74:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c78:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c7c:	fa01 f407 	lsl.w	r4, r1, r7
 8000c80:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c84:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c88:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c8c:	4325      	orrs	r5, r4
 8000c8e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c92:	0c2c      	lsrs	r4, r5, #16
 8000c94:	fb08 3319 	mls	r3, r8, r9, r3
 8000c98:	fa1f fa8e 	uxth.w	sl, lr
 8000c9c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000ca0:	fb09 f40a 	mul.w	r4, r9, sl
 8000ca4:	429c      	cmp	r4, r3
 8000ca6:	fa02 f207 	lsl.w	r2, r2, r7
 8000caa:	fa00 f107 	lsl.w	r1, r0, r7
 8000cae:	d90b      	bls.n	8000cc8 <__udivmoddi4+0x1b0>
 8000cb0:	eb1e 0303 	adds.w	r3, lr, r3
 8000cb4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000cb8:	f080 8087 	bcs.w	8000dca <__udivmoddi4+0x2b2>
 8000cbc:	429c      	cmp	r4, r3
 8000cbe:	f240 8084 	bls.w	8000dca <__udivmoddi4+0x2b2>
 8000cc2:	f1a9 0902 	sub.w	r9, r9, #2
 8000cc6:	4473      	add	r3, lr
 8000cc8:	1b1b      	subs	r3, r3, r4
 8000cca:	b2ad      	uxth	r5, r5
 8000ccc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cd0:	fb08 3310 	mls	r3, r8, r0, r3
 8000cd4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000cd8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000cdc:	45a2      	cmp	sl, r4
 8000cde:	d908      	bls.n	8000cf2 <__udivmoddi4+0x1da>
 8000ce0:	eb1e 0404 	adds.w	r4, lr, r4
 8000ce4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ce8:	d26b      	bcs.n	8000dc2 <__udivmoddi4+0x2aa>
 8000cea:	45a2      	cmp	sl, r4
 8000cec:	d969      	bls.n	8000dc2 <__udivmoddi4+0x2aa>
 8000cee:	3802      	subs	r0, #2
 8000cf0:	4474      	add	r4, lr
 8000cf2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000cf6:	fba0 8902 	umull	r8, r9, r0, r2
 8000cfa:	eba4 040a 	sub.w	r4, r4, sl
 8000cfe:	454c      	cmp	r4, r9
 8000d00:	46c2      	mov	sl, r8
 8000d02:	464b      	mov	r3, r9
 8000d04:	d354      	bcc.n	8000db0 <__udivmoddi4+0x298>
 8000d06:	d051      	beq.n	8000dac <__udivmoddi4+0x294>
 8000d08:	2e00      	cmp	r6, #0
 8000d0a:	d069      	beq.n	8000de0 <__udivmoddi4+0x2c8>
 8000d0c:	ebb1 050a 	subs.w	r5, r1, sl
 8000d10:	eb64 0403 	sbc.w	r4, r4, r3
 8000d14:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d18:	40fd      	lsrs	r5, r7
 8000d1a:	40fc      	lsrs	r4, r7
 8000d1c:	ea4c 0505 	orr.w	r5, ip, r5
 8000d20:	e9c6 5400 	strd	r5, r4, [r6]
 8000d24:	2700      	movs	r7, #0
 8000d26:	e747      	b.n	8000bb8 <__udivmoddi4+0xa0>
 8000d28:	f1c2 0320 	rsb	r3, r2, #32
 8000d2c:	fa20 f703 	lsr.w	r7, r0, r3
 8000d30:	4095      	lsls	r5, r2
 8000d32:	fa01 f002 	lsl.w	r0, r1, r2
 8000d36:	fa21 f303 	lsr.w	r3, r1, r3
 8000d3a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d3e:	4338      	orrs	r0, r7
 8000d40:	0c01      	lsrs	r1, r0, #16
 8000d42:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d46:	fa1f f885 	uxth.w	r8, r5
 8000d4a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d4e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d52:	fb07 f308 	mul.w	r3, r7, r8
 8000d56:	428b      	cmp	r3, r1
 8000d58:	fa04 f402 	lsl.w	r4, r4, r2
 8000d5c:	d907      	bls.n	8000d6e <__udivmoddi4+0x256>
 8000d5e:	1869      	adds	r1, r5, r1
 8000d60:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d64:	d22f      	bcs.n	8000dc6 <__udivmoddi4+0x2ae>
 8000d66:	428b      	cmp	r3, r1
 8000d68:	d92d      	bls.n	8000dc6 <__udivmoddi4+0x2ae>
 8000d6a:	3f02      	subs	r7, #2
 8000d6c:	4429      	add	r1, r5
 8000d6e:	1acb      	subs	r3, r1, r3
 8000d70:	b281      	uxth	r1, r0
 8000d72:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d76:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d7e:	fb00 f308 	mul.w	r3, r0, r8
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d907      	bls.n	8000d96 <__udivmoddi4+0x27e>
 8000d86:	1869      	adds	r1, r5, r1
 8000d88:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d8c:	d217      	bcs.n	8000dbe <__udivmoddi4+0x2a6>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d915      	bls.n	8000dbe <__udivmoddi4+0x2a6>
 8000d92:	3802      	subs	r0, #2
 8000d94:	4429      	add	r1, r5
 8000d96:	1ac9      	subs	r1, r1, r3
 8000d98:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d9c:	e73b      	b.n	8000c16 <__udivmoddi4+0xfe>
 8000d9e:	4637      	mov	r7, r6
 8000da0:	4630      	mov	r0, r6
 8000da2:	e709      	b.n	8000bb8 <__udivmoddi4+0xa0>
 8000da4:	4607      	mov	r7, r0
 8000da6:	e6e7      	b.n	8000b78 <__udivmoddi4+0x60>
 8000da8:	4618      	mov	r0, r3
 8000daa:	e6fb      	b.n	8000ba4 <__udivmoddi4+0x8c>
 8000dac:	4541      	cmp	r1, r8
 8000dae:	d2ab      	bcs.n	8000d08 <__udivmoddi4+0x1f0>
 8000db0:	ebb8 0a02 	subs.w	sl, r8, r2
 8000db4:	eb69 020e 	sbc.w	r2, r9, lr
 8000db8:	3801      	subs	r0, #1
 8000dba:	4613      	mov	r3, r2
 8000dbc:	e7a4      	b.n	8000d08 <__udivmoddi4+0x1f0>
 8000dbe:	4660      	mov	r0, ip
 8000dc0:	e7e9      	b.n	8000d96 <__udivmoddi4+0x27e>
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	e795      	b.n	8000cf2 <__udivmoddi4+0x1da>
 8000dc6:	4667      	mov	r7, ip
 8000dc8:	e7d1      	b.n	8000d6e <__udivmoddi4+0x256>
 8000dca:	4681      	mov	r9, r0
 8000dcc:	e77c      	b.n	8000cc8 <__udivmoddi4+0x1b0>
 8000dce:	3802      	subs	r0, #2
 8000dd0:	442c      	add	r4, r5
 8000dd2:	e747      	b.n	8000c64 <__udivmoddi4+0x14c>
 8000dd4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000dd8:	442b      	add	r3, r5
 8000dda:	e72f      	b.n	8000c3c <__udivmoddi4+0x124>
 8000ddc:	4638      	mov	r0, r7
 8000dde:	e708      	b.n	8000bf2 <__udivmoddi4+0xda>
 8000de0:	4637      	mov	r7, r6
 8000de2:	e6e9      	b.n	8000bb8 <__udivmoddi4+0xa0>

08000de4 <__aeabi_idiv0>:
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop

08000de8 <delay_init>:
static uint16_t fac_ms=0;//ms延時倍乘數
//初始化延遲函式
//SYSTICK的時鐘固定為HCLK時鐘的1/8
//SYSCLK:系統時鐘
void delay_init(uint8_t SYSCLK)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b083      	sub	sp, #12
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	4603      	mov	r3, r0
 8000df0:	71fb      	strb	r3, [r7, #7]
	SysTick->CTRL&=0xfffffffb;//bit2清空,選擇外部時鐘  HCLK/8
 8000df2:	4b0e      	ldr	r3, [pc, #56]	; (8000e2c <delay_init+0x44>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	4a0d      	ldr	r2, [pc, #52]	; (8000e2c <delay_init+0x44>)
 8000df8:	f023 0304 	bic.w	r3, r3, #4
 8000dfc:	6013      	str	r3, [r2, #0]
	fac_us=SYSCLK/8;
 8000dfe:	79fb      	ldrb	r3, [r7, #7]
 8000e00:	08db      	lsrs	r3, r3, #3
 8000e02:	b2da      	uxtb	r2, r3
 8000e04:	4b0a      	ldr	r3, [pc, #40]	; (8000e30 <delay_init+0x48>)
 8000e06:	701a      	strb	r2, [r3, #0]
	fac_ms=(uint16_t)fac_us*1000;
 8000e08:	4b09      	ldr	r3, [pc, #36]	; (8000e30 <delay_init+0x48>)
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	b29b      	uxth	r3, r3
 8000e0e:	461a      	mov	r2, r3
 8000e10:	0152      	lsls	r2, r2, #5
 8000e12:	1ad2      	subs	r2, r2, r3
 8000e14:	0092      	lsls	r2, r2, #2
 8000e16:	4413      	add	r3, r2
 8000e18:	00db      	lsls	r3, r3, #3
 8000e1a:	b29a      	uxth	r2, r3
 8000e1c:	4b05      	ldr	r3, [pc, #20]	; (8000e34 <delay_init+0x4c>)
 8000e1e:	801a      	strh	r2, [r3, #0]
}
 8000e20:	bf00      	nop
 8000e22:	370c      	adds	r7, #12
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr
 8000e2c:	e000e010 	.word	0xe000e010
 8000e30:	20000094 	.word	0x20000094
 8000e34:	20000096 	.word	0x20000096

08000e38 <delay_ms>:

void delay_ms(uint16_t nms)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b085      	sub	sp, #20
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	4603      	mov	r3, r0
 8000e40:	80fb      	strh	r3, [r7, #6]
	uint32_t temp;
	SysTick->LOAD=(uint32_t)nms*fac_ms;//時間載入(SysTick->LOAD為24bit)
 8000e42:	88fb      	ldrh	r3, [r7, #6]
 8000e44:	4a14      	ldr	r2, [pc, #80]	; (8000e98 <delay_ms+0x60>)
 8000e46:	8812      	ldrh	r2, [r2, #0]
 8000e48:	4611      	mov	r1, r2
 8000e4a:	4a14      	ldr	r2, [pc, #80]	; (8000e9c <delay_ms+0x64>)
 8000e4c:	fb01 f303 	mul.w	r3, r1, r3
 8000e50:	6053      	str	r3, [r2, #4]
	SysTick->VAL =0x00;           //清空計數器
 8000e52:	4b12      	ldr	r3, [pc, #72]	; (8000e9c <delay_ms+0x64>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	609a      	str	r2, [r3, #8]
	SysTick->CTRL|=SysTick_CTRL_ENABLE_Msk;          //開始倒數
 8000e58:	4b10      	ldr	r3, [pc, #64]	; (8000e9c <delay_ms+0x64>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a0f      	ldr	r2, [pc, #60]	; (8000e9c <delay_ms+0x64>)
 8000e5e:	f043 0301 	orr.w	r3, r3, #1
 8000e62:	6013      	str	r3, [r2, #0]
	do
	{
		temp=SysTick->CTRL;
 8000e64:	4b0d      	ldr	r3, [pc, #52]	; (8000e9c <delay_ms+0x64>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	60fb      	str	r3, [r7, #12]
	}
	while(temp&0x01&&!(temp&(1<<16)));//等待時間到達
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	f003 0301 	and.w	r3, r3, #1
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d004      	beq.n	8000e7e <delay_ms+0x46>
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d0f2      	beq.n	8000e64 <delay_ms+0x2c>
	SysTick->CTRL=0x00;       //關閉計數器
 8000e7e:	4b07      	ldr	r3, [pc, #28]	; (8000e9c <delay_ms+0x64>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	601a      	str	r2, [r3, #0]
	SysTick->VAL =0X00;       //清空計數器
 8000e84:	4b05      	ldr	r3, [pc, #20]	; (8000e9c <delay_ms+0x64>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	609a      	str	r2, [r3, #8]
}
 8000e8a:	bf00      	nop
 8000e8c:	3714      	adds	r7, #20
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop
 8000e98:	20000096 	.word	0x20000096
 8000e9c:	e000e010 	.word	0xe000e010

08000ea0 <Read_ads1115>:
	HAL_I2C_Master_Receive(&hi2c1, i2c_addr+1, RX_buffer, 1, 100);
	delay_ms(1);
}

void Read_ads1115(ADS1115_BOARD * ADS1115_BOARD_SELECT,uint8_t ADDRESS)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b086      	sub	sp, #24
 8000ea4:	af02      	add	r7, sp, #8
 8000ea6:	6078      	str	r0, [r7, #4]
 8000ea8:	460b      	mov	r3, r1
 8000eaa:	70fb      	strb	r3, [r7, #3]
	for( int i = 0; i < 2; i++) {
 8000eac:	2300      	movs	r3, #0
 8000eae:	60fb      	str	r3, [r7, #12]
 8000eb0:	e06d      	b.n	8000f8e <Read_ads1115+0xee>
		ADSwrite[0] = 0x01;
 8000eb2:	4b3a      	ldr	r3, [pc, #232]	; (8000f9c <Read_ads1115+0xfc>)
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	701a      	strb	r2, [r3, #0]
		switch(i)
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d002      	beq.n	8000ec4 <Read_ads1115+0x24>
 8000ebe:	2b01      	cmp	r3, #1
 8000ec0:	d004      	beq.n	8000ecc <Read_ads1115+0x2c>
 8000ec2:	e007      	b.n	8000ed4 <Read_ads1115+0x34>
		{
			case(0):
				ADSwrite[1] = 0x81; // 10000001 CH0+ CH1
 8000ec4:	4b35      	ldr	r3, [pc, #212]	; (8000f9c <Read_ads1115+0xfc>)
 8000ec6:	2281      	movs	r2, #129	; 0x81
 8000ec8:	705a      	strb	r2, [r3, #1]
			break;
 8000eca:	e003      	b.n	8000ed4 <Read_ads1115+0x34>
			case(1):
				ADSwrite[1] = 0xB1;// 10110001 CH2+ CH3
 8000ecc:	4b33      	ldr	r3, [pc, #204]	; (8000f9c <Read_ads1115+0xfc>)
 8000ece:	22b1      	movs	r2, #177	; 0xb1
 8000ed0:	705a      	strb	r2, [r3, #1]
			break;
 8000ed2:	bf00      	nop
		}
		ADSwrite[2] = 0x83; // 10000011
 8000ed4:	4b31      	ldr	r3, [pc, #196]	; (8000f9c <Read_ads1115+0xfc>)
 8000ed6:	2283      	movs	r2, #131	; 0x83
 8000ed8:	709a      	strb	r2, [r3, #2]
		HAL_I2C_Master_Transmit(&hi2c1, ADDRESS<<1, ADSwrite, 3, 100);
 8000eda:	78fb      	ldrb	r3, [r7, #3]
 8000edc:	b29b      	uxth	r3, r3
 8000ede:	005b      	lsls	r3, r3, #1
 8000ee0:	b299      	uxth	r1, r3
 8000ee2:	2364      	movs	r3, #100	; 0x64
 8000ee4:	9300      	str	r3, [sp, #0]
 8000ee6:	2303      	movs	r3, #3
 8000ee8:	4a2c      	ldr	r2, [pc, #176]	; (8000f9c <Read_ads1115+0xfc>)
 8000eea:	482d      	ldr	r0, [pc, #180]	; (8000fa0 <Read_ads1115+0x100>)
 8000eec:	f002 f8d8 	bl	80030a0 <HAL_I2C_Master_Transmit>
		ADSwrite[0] = 0x00;
 8000ef0:	4b2a      	ldr	r3, [pc, #168]	; (8000f9c <Read_ads1115+0xfc>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Master_Transmit(&hi2c1, ADDRESS<<1, ADSwrite, 1, 100);
 8000ef6:	78fb      	ldrb	r3, [r7, #3]
 8000ef8:	b29b      	uxth	r3, r3
 8000efa:	005b      	lsls	r3, r3, #1
 8000efc:	b299      	uxth	r1, r3
 8000efe:	2364      	movs	r3, #100	; 0x64
 8000f00:	9300      	str	r3, [sp, #0]
 8000f02:	2301      	movs	r3, #1
 8000f04:	4a25      	ldr	r2, [pc, #148]	; (8000f9c <Read_ads1115+0xfc>)
 8000f06:	4826      	ldr	r0, [pc, #152]	; (8000fa0 <Read_ads1115+0x100>)
 8000f08:	f002 f8ca 	bl	80030a0 <HAL_I2C_Master_Transmit>
		HAL_Delay(20);
 8000f0c:	2014      	movs	r0, #20
 8000f0e:	f001 f949 	bl	80021a4 <HAL_Delay>
		HAL_I2C_Master_Receive(&hi2c1, ADDRESS<<1, ADSwrite, 2, 100);
 8000f12:	78fb      	ldrb	r3, [r7, #3]
 8000f14:	b29b      	uxth	r3, r3
 8000f16:	005b      	lsls	r3, r3, #1
 8000f18:	b299      	uxth	r1, r3
 8000f1a:	2364      	movs	r3, #100	; 0x64
 8000f1c:	9300      	str	r3, [sp, #0]
 8000f1e:	2302      	movs	r3, #2
 8000f20:	4a1e      	ldr	r2, [pc, #120]	; (8000f9c <Read_ads1115+0xfc>)
 8000f22:	481f      	ldr	r0, [pc, #124]	; (8000fa0 <Read_ads1115+0x100>)
 8000f24:	f002 f9ba 	bl	800329c <HAL_I2C_Master_Receive>
		reading = (ADSwrite[0] << 8 | ADSwrite[1]);
 8000f28:	4b1c      	ldr	r3, [pc, #112]	; (8000f9c <Read_ads1115+0xfc>)
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	021b      	lsls	r3, r3, #8
 8000f2e:	b21a      	sxth	r2, r3
 8000f30:	4b1a      	ldr	r3, [pc, #104]	; (8000f9c <Read_ads1115+0xfc>)
 8000f32:	785b      	ldrb	r3, [r3, #1]
 8000f34:	b21b      	sxth	r3, r3
 8000f36:	4313      	orrs	r3, r2
 8000f38:	b21a      	sxth	r2, r3
 8000f3a:	4b1a      	ldr	r3, [pc, #104]	; (8000fa4 <Read_ads1115+0x104>)
 8000f3c:	801a      	strh	r2, [r3, #0]
		 else if(reading >= 0xffff)
		 {
			 reading = 0;
		 }

		if(i == 0)
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d10f      	bne.n	8000f64 <Read_ads1115+0xc4>
		{
			ADS1115_BOARD_SELECT->ADS1115_CH1.data = reading * voltageConv;
 8000f44:	4b17      	ldr	r3, [pc, #92]	; (8000fa4 <Read_ads1115+0x104>)
 8000f46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f4a:	ee07 3a90 	vmov	s15, r3
 8000f4e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f52:	4b15      	ldr	r3, [pc, #84]	; (8000fa8 <Read_ads1115+0x108>)
 8000f54:	edd3 7a00 	vldr	s15, [r3]
 8000f58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	edc3 7a00 	vstr	s15, [r3]
 8000f62:	e011      	b.n	8000f88 <Read_ads1115+0xe8>
		}
		else if(i == 1)
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	2b01      	cmp	r3, #1
 8000f68:	d10e      	bne.n	8000f88 <Read_ads1115+0xe8>
		{
			ADS1115_BOARD_SELECT->ADS1115_CH2.data = reading * voltageConv;
 8000f6a:	4b0e      	ldr	r3, [pc, #56]	; (8000fa4 <Read_ads1115+0x104>)
 8000f6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f70:	ee07 3a90 	vmov	s15, r3
 8000f74:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f78:	4b0b      	ldr	r3, [pc, #44]	; (8000fa8 <Read_ads1115+0x108>)
 8000f7a:	edd3 7a00 	vldr	s15, [r3]
 8000f7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	edc3 7a01 	vstr	s15, [r3, #4]
	for( int i = 0; i < 2; i++) {
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	3301      	adds	r3, #1
 8000f8c:	60fb      	str	r3, [r7, #12]
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	2b01      	cmp	r3, #1
 8000f92:	dd8e      	ble.n	8000eb2 <Read_ads1115+0x12>
		}
	}

}
 8000f94:	bf00      	nop
 8000f96:	3710      	adds	r7, #16
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	20004140 	.word	0x20004140
 8000fa0:	200040bc 	.word	0x200040bc
 8000fa4:	2000411c 	.word	0x2000411c
 8000fa8:	08009110 	.word	0x08009110

08000fac <Convert2Modbus>:

int Convert2Modbus(float Data)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b085      	sub	sp, #20
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	ed87 0a01 	vstr	s0, [r7, #4]
	int ConvertData = 0;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	60fb      	str	r3, [r7, #12]

	ConvertData = ((Data+5)*65535)/10;
 8000fba:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fbe:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8000fc2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000fc6:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8000ff0 <Convert2Modbus+0x44>
 8000fca:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000fce:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8000fd2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fd6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000fda:	ee17 3a90 	vmov	r3, s15
 8000fde:	60fb      	str	r3, [r7, #12]

	return ConvertData;
 8000fe0:	68fb      	ldr	r3, [r7, #12]
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	3714      	adds	r7, #20
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	477fff00 	.word	0x477fff00

08000ff4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b085      	sub	sp, #20
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	60f8      	str	r0, [r7, #12]
 8000ffc:	60b9      	str	r1, [r7, #8]
 8000ffe:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	4a07      	ldr	r2, [pc, #28]	; (8001020 <vApplicationGetIdleTaskMemory+0x2c>)
 8001004:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001006:	68bb      	ldr	r3, [r7, #8]
 8001008:	4a06      	ldr	r2, [pc, #24]	; (8001024 <vApplicationGetIdleTaskMemory+0x30>)
 800100a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	2280      	movs	r2, #128	; 0x80
 8001010:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8001012:	bf00      	nop
 8001014:	3714      	adds	r7, #20
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop
 8001020:	20000098 	.word	0x20000098
 8001024:	200000ec 	.word	0x200000ec

08001028 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001028:	b5b0      	push	{r4, r5, r7, lr}
 800102a:	b096      	sub	sp, #88	; 0x58
 800102c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800102e:	f001 f877 	bl	8002120 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001032:	f000 f909 	bl	8001248 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001036:	f000 f9e9 	bl	800140c <MX_GPIO_Init>
  MX_DMA_Init();
 800103a:	f000 f9c7 	bl	80013cc <MX_DMA_Init>
  MX_USART6_UART_Init();
 800103e:	f000 f99b 	bl	8001378 <MX_USART6_UART_Init>
  MX_I2C1_Init();
 8001042:	f000 f96b 	bl	800131c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  delay_init(168);
 8001046:	20a8      	movs	r0, #168	; 0xa8
 8001048:	f7ff fece 	bl	8000de8 <delay_init>


  //TODO: read DIP switch
  SwitchValue[0] = HAL_GPIO_ReadPin(GPIOE, Switch1_Pin);
 800104c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001050:	4871      	ldr	r0, [pc, #452]	; (8001218 <main+0x1f0>)
 8001052:	f001 fed5 	bl	8002e00 <HAL_GPIO_ReadPin>
 8001056:	4603      	mov	r3, r0
 8001058:	461a      	mov	r2, r3
 800105a:	4b70      	ldr	r3, [pc, #448]	; (800121c <main+0x1f4>)
 800105c:	701a      	strb	r2, [r3, #0]
  SwitchValue[1] = HAL_GPIO_ReadPin(GPIOE, Switch2_Pin);
 800105e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001062:	486d      	ldr	r0, [pc, #436]	; (8001218 <main+0x1f0>)
 8001064:	f001 fecc 	bl	8002e00 <HAL_GPIO_ReadPin>
 8001068:	4603      	mov	r3, r0
 800106a:	461a      	mov	r2, r3
 800106c:	4b6b      	ldr	r3, [pc, #428]	; (800121c <main+0x1f4>)
 800106e:	705a      	strb	r2, [r3, #1]
  SwitchValue[2] = HAL_GPIO_ReadPin(GPIOE, Switch3_Pin);
 8001070:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001074:	4868      	ldr	r0, [pc, #416]	; (8001218 <main+0x1f0>)
 8001076:	f001 fec3 	bl	8002e00 <HAL_GPIO_ReadPin>
 800107a:	4603      	mov	r3, r0
 800107c:	461a      	mov	r2, r3
 800107e:	4b67      	ldr	r3, [pc, #412]	; (800121c <main+0x1f4>)
 8001080:	709a      	strb	r2, [r3, #2]
  SwitchValue[3] = HAL_GPIO_ReadPin(GPIOE, Switch4_Pin);
 8001082:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001086:	4864      	ldr	r0, [pc, #400]	; (8001218 <main+0x1f0>)
 8001088:	f001 feba 	bl	8002e00 <HAL_GPIO_ReadPin>
 800108c:	4603      	mov	r3, r0
 800108e:	461a      	mov	r2, r3
 8001090:	4b62      	ldr	r3, [pc, #392]	; (800121c <main+0x1f4>)
 8001092:	70da      	strb	r2, [r3, #3]
  SwitchValue[4] = HAL_GPIO_ReadPin(GPIOE, Switch5_Pin);
 8001094:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001098:	485f      	ldr	r0, [pc, #380]	; (8001218 <main+0x1f0>)
 800109a:	f001 feb1 	bl	8002e00 <HAL_GPIO_ReadPin>
 800109e:	4603      	mov	r3, r0
 80010a0:	461a      	mov	r2, r3
 80010a2:	4b5e      	ldr	r3, [pc, #376]	; (800121c <main+0x1f4>)
 80010a4:	711a      	strb	r2, [r3, #4]
  SwitchValue[5] = HAL_GPIO_ReadPin(GPIOE, Switch6_Pin);
 80010a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010aa:	485b      	ldr	r0, [pc, #364]	; (8001218 <main+0x1f0>)
 80010ac:	f001 fea8 	bl	8002e00 <HAL_GPIO_ReadPin>
 80010b0:	4603      	mov	r3, r0
 80010b2:	461a      	mov	r2, r3
 80010b4:	4b59      	ldr	r3, [pc, #356]	; (800121c <main+0x1f4>)
 80010b6:	715a      	strb	r2, [r3, #5]
  SwitchValue[6] = HAL_GPIO_ReadPin(GPIOE, Switch7_Pin);
 80010b8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010bc:	4856      	ldr	r0, [pc, #344]	; (8001218 <main+0x1f0>)
 80010be:	f001 fe9f 	bl	8002e00 <HAL_GPIO_ReadPin>
 80010c2:	4603      	mov	r3, r0
 80010c4:	461a      	mov	r2, r3
 80010c6:	4b55      	ldr	r3, [pc, #340]	; (800121c <main+0x1f4>)
 80010c8:	719a      	strb	r2, [r3, #6]
  SwitchValue[7] = HAL_GPIO_ReadPin(GPIOE, Switch8_Pin);
 80010ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010ce:	4852      	ldr	r0, [pc, #328]	; (8001218 <main+0x1f0>)
 80010d0:	f001 fe96 	bl	8002e00 <HAL_GPIO_ReadPin>
 80010d4:	4603      	mov	r3, r0
 80010d6:	461a      	mov	r2, r3
 80010d8:	4b50      	ldr	r3, [pc, #320]	; (800121c <main+0x1f4>)
 80010da:	71da      	strb	r2, [r3, #7]


  //TODO: converter DIP switch to modbus slave using binary
  for(uint8_t i = 0; i <8; i++)
 80010dc:	2300      	movs	r3, #0
 80010de:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 80010e2:	e039      	b.n	8001158 <main+0x130>
  {
	  slaveID += SwitchValue[i] * pow(2,i);
 80010e4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80010e8:	4a4c      	ldr	r2, [pc, #304]	; (800121c <main+0x1f4>)
 80010ea:	5cd3      	ldrb	r3, [r2, r3]
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff f9c1 	bl	8000474 <__aeabi_i2d>
 80010f2:	4604      	mov	r4, r0
 80010f4:	460d      	mov	r5, r1
 80010f6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80010fa:	4618      	mov	r0, r3
 80010fc:	f7ff f9aa 	bl	8000454 <__aeabi_ui2d>
 8001100:	4602      	mov	r2, r0
 8001102:	460b      	mov	r3, r1
 8001104:	ec43 2b11 	vmov	d1, r2, r3
 8001108:	ed9f 0b41 	vldr	d0, [pc, #260]	; 8001210 <main+0x1e8>
 800110c:	f006 ff3c 	bl	8007f88 <pow>
 8001110:	ec53 2b10 	vmov	r2, r3, d0
 8001114:	4620      	mov	r0, r4
 8001116:	4629      	mov	r1, r5
 8001118:	f7ff fa16 	bl	8000548 <__aeabi_dmul>
 800111c:	4603      	mov	r3, r0
 800111e:	460c      	mov	r4, r1
 8001120:	4625      	mov	r5, r4
 8001122:	461c      	mov	r4, r3
 8001124:	4b3e      	ldr	r3, [pc, #248]	; (8001220 <main+0x1f8>)
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	4618      	mov	r0, r3
 800112a:	f7ff f9a3 	bl	8000474 <__aeabi_i2d>
 800112e:	4602      	mov	r2, r0
 8001130:	460b      	mov	r3, r1
 8001132:	4620      	mov	r0, r4
 8001134:	4629      	mov	r1, r5
 8001136:	f7ff f851 	bl	80001dc <__adddf3>
 800113a:	4603      	mov	r3, r0
 800113c:	460c      	mov	r4, r1
 800113e:	4618      	mov	r0, r3
 8001140:	4621      	mov	r1, r4
 8001142:	f7ff fcb1 	bl	8000aa8 <__aeabi_d2uiz>
 8001146:	4603      	mov	r3, r0
 8001148:	b2da      	uxtb	r2, r3
 800114a:	4b35      	ldr	r3, [pc, #212]	; (8001220 <main+0x1f8>)
 800114c:	701a      	strb	r2, [r3, #0]
  for(uint8_t i = 0; i <8; i++)
 800114e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001152:	3301      	adds	r3, #1
 8001154:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8001158:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800115c:	2b07      	cmp	r3, #7
 800115e:	d9c1      	bls.n	80010e4 <main+0xbc>
  }

  delay_ms(100);
 8001160:	2064      	movs	r0, #100	; 0x64
 8001162:	f7ff fe69 	bl	8000e38 <delay_ms>

 //ADCstatus =  HAL_ADC_Stop_DMA(&hadc1);

  HAL_UART_Receive_DMA(&huart6, rxbuffer, 8);
 8001166:	2208      	movs	r2, #8
 8001168:	492e      	ldr	r1, [pc, #184]	; (8001224 <main+0x1fc>)
 800116a:	482f      	ldr	r0, [pc, #188]	; (8001228 <main+0x200>)
 800116c:	f003 fd7a 	bl	8004c64 <HAL_UART_Receive_DMA>

  ADS1115_ADDRES[0] = ADS1115_ADDRESS_ADDR_GND;
 8001170:	4b2e      	ldr	r3, [pc, #184]	; (800122c <main+0x204>)
 8001172:	2248      	movs	r2, #72	; 0x48
 8001174:	701a      	strb	r2, [r3, #0]
  ADS1115_ADDRES[1] = ADS1115_ADDRESS_ADDR_VDD;
 8001176:	4b2d      	ldr	r3, [pc, #180]	; (800122c <main+0x204>)
 8001178:	2249      	movs	r2, #73	; 0x49
 800117a:	705a      	strb	r2, [r3, #1]
  ADS1115_ADDRES[2] = ADS1115_ADDRESS_ADDR_SDA;
 800117c:	4b2b      	ldr	r3, [pc, #172]	; (800122c <main+0x204>)
 800117e:	224a      	movs	r2, #74	; 0x4a
 8001180:	709a      	strb	r2, [r3, #2]
  ADS1115_ADDRES[3] = ADS1115_ADDRESS_ADDR_SCL;
 8001182:	4b2a      	ldr	r3, [pc, #168]	; (800122c <main+0x204>)
 8001184:	224b      	movs	r2, #75	; 0x4b
 8001186:	70da      	strb	r2, [r3, #3]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of ModbusTransTask */
  osThreadDef(ModbusTransTask, ModbusTransThread, osPriorityAboveNormal, 0, 128);
 8001188:	4b29      	ldr	r3, [pc, #164]	; (8001230 <main+0x208>)
 800118a:	f107 0438 	add.w	r4, r7, #56	; 0x38
 800118e:	461d      	mov	r5, r3
 8001190:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001192:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001194:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001198:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ModbusTransTaskHandle = osThreadCreate(osThread(ModbusTransTask), NULL);
 800119c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80011a0:	2100      	movs	r1, #0
 80011a2:	4618      	mov	r0, r3
 80011a4:	f004 fcb7 	bl	8005b16 <osThreadCreate>
 80011a8:	4602      	mov	r2, r0
 80011aa:	4b22      	ldr	r3, [pc, #136]	; (8001234 <main+0x20c>)
 80011ac:	601a      	str	r2, [r3, #0]

  /* definition and creation of ModbusSetTask */
  osThreadDef(ModbusSetTask, ModbusSetThread, osPriorityAboveNormal, 0, 128);
 80011ae:	4b22      	ldr	r3, [pc, #136]	; (8001238 <main+0x210>)
 80011b0:	f107 041c 	add.w	r4, r7, #28
 80011b4:	461d      	mov	r5, r3
 80011b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011ba:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80011be:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ModbusSetTaskHandle = osThreadCreate(osThread(ModbusSetTask), NULL);
 80011c2:	f107 031c 	add.w	r3, r7, #28
 80011c6:	2100      	movs	r1, #0
 80011c8:	4618      	mov	r0, r3
 80011ca:	f004 fca4 	bl	8005b16 <osThreadCreate>
 80011ce:	4602      	mov	r2, r0
 80011d0:	4b1a      	ldr	r3, [pc, #104]	; (800123c <main+0x214>)
 80011d2:	601a      	str	r2, [r3, #0]

  /* definition and creation of ADS1115Task */
  osThreadDef(ADS1115Task, ADS1115Thread, osPriorityNormal, 0, 128);
 80011d4:	4b1a      	ldr	r3, [pc, #104]	; (8001240 <main+0x218>)
 80011d6:	463c      	mov	r4, r7
 80011d8:	461d      	mov	r5, r3
 80011da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011de:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80011e2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ADS1115TaskHandle = osThreadCreate(osThread(ADS1115Task), NULL);
 80011e6:	463b      	mov	r3, r7
 80011e8:	2100      	movs	r1, #0
 80011ea:	4618      	mov	r0, r3
 80011ec:	f004 fc93 	bl	8005b16 <osThreadCreate>
 80011f0:	4602      	mov	r2, r0
 80011f2:	4b14      	ldr	r3, [pc, #80]	; (8001244 <main+0x21c>)
 80011f4:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  ModBus_Init();
 80011f6:	f000 fad7 	bl	80017a8 <ModBus_Init>
  ModBus_SetAddress(slaveID);
 80011fa:	4b09      	ldr	r3, [pc, #36]	; (8001220 <main+0x1f8>)
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	4618      	mov	r0, r3
 8001200:	f000 fb32 	bl	8001868 <ModBus_SetAddress>
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001204:	f004 fc80 	bl	8005b08 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001208:	e7fe      	b.n	8001208 <main+0x1e0>
 800120a:	bf00      	nop
 800120c:	f3af 8000 	nop.w
 8001210:	00000000 	.word	0x00000000
 8001214:	40000000 	.word	0x40000000
 8001218:	40021000 	.word	0x40021000
 800121c:	20004194 	.word	0x20004194
 8001220:	200002ec 	.word	0x200002ec
 8001224:	2000419c 	.word	0x2000419c
 8001228:	20004150 	.word	0x20004150
 800122c:	20004118 	.word	0x20004118
 8001230:	08009060 	.word	0x08009060
 8001234:	20004110 	.word	0x20004110
 8001238:	0800908c 	.word	0x0800908c
 800123c:	20004114 	.word	0x20004114
 8001240:	080090b4 	.word	0x080090b4
 8001244:	20004190 	.word	0x20004190

08001248 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b094      	sub	sp, #80	; 0x50
 800124c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800124e:	f107 0320 	add.w	r3, r7, #32
 8001252:	2230      	movs	r2, #48	; 0x30
 8001254:	2100      	movs	r1, #0
 8001256:	4618      	mov	r0, r3
 8001258:	f006 fe8d 	bl	8007f76 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800125c:	f107 030c 	add.w	r3, r7, #12
 8001260:	2200      	movs	r2, #0
 8001262:	601a      	str	r2, [r3, #0]
 8001264:	605a      	str	r2, [r3, #4]
 8001266:	609a      	str	r2, [r3, #8]
 8001268:	60da      	str	r2, [r3, #12]
 800126a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800126c:	2300      	movs	r3, #0
 800126e:	60bb      	str	r3, [r7, #8]
 8001270:	4b28      	ldr	r3, [pc, #160]	; (8001314 <SystemClock_Config+0xcc>)
 8001272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001274:	4a27      	ldr	r2, [pc, #156]	; (8001314 <SystemClock_Config+0xcc>)
 8001276:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800127a:	6413      	str	r3, [r2, #64]	; 0x40
 800127c:	4b25      	ldr	r3, [pc, #148]	; (8001314 <SystemClock_Config+0xcc>)
 800127e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001280:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001284:	60bb      	str	r3, [r7, #8]
 8001286:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001288:	2300      	movs	r3, #0
 800128a:	607b      	str	r3, [r7, #4]
 800128c:	4b22      	ldr	r3, [pc, #136]	; (8001318 <SystemClock_Config+0xd0>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a21      	ldr	r2, [pc, #132]	; (8001318 <SystemClock_Config+0xd0>)
 8001292:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001296:	6013      	str	r3, [r2, #0]
 8001298:	4b1f      	ldr	r3, [pc, #124]	; (8001318 <SystemClock_Config+0xd0>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012a0:	607b      	str	r3, [r7, #4]
 80012a2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012a4:	2302      	movs	r3, #2
 80012a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012a8:	2301      	movs	r3, #1
 80012aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012ac:	2310      	movs	r3, #16
 80012ae:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012b0:	2302      	movs	r3, #2
 80012b2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80012b4:	2300      	movs	r3, #0
 80012b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80012b8:	2308      	movs	r3, #8
 80012ba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80012bc:	23a8      	movs	r3, #168	; 0xa8
 80012be:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012c0:	2302      	movs	r3, #2
 80012c2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80012c4:	2304      	movs	r3, #4
 80012c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012c8:	f107 0320 	add.w	r3, r7, #32
 80012cc:	4618      	mov	r0, r3
 80012ce:	f002 fd37 	bl	8003d40 <HAL_RCC_OscConfig>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80012d8:	f000 fa26 	bl	8001728 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012dc:	230f      	movs	r3, #15
 80012de:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012e0:	2302      	movs	r3, #2
 80012e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012e4:	2300      	movs	r3, #0
 80012e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80012e8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80012ec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80012ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012f2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80012f4:	f107 030c 	add.w	r3, r7, #12
 80012f8:	2105      	movs	r1, #5
 80012fa:	4618      	mov	r0, r3
 80012fc:	f002 ff90 	bl	8004220 <HAL_RCC_ClockConfig>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001306:	f000 fa0f 	bl	8001728 <Error_Handler>
  }
}
 800130a:	bf00      	nop
 800130c:	3750      	adds	r7, #80	; 0x50
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	40023800 	.word	0x40023800
 8001318:	40007000 	.word	0x40007000

0800131c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001320:	4b12      	ldr	r3, [pc, #72]	; (800136c <MX_I2C1_Init+0x50>)
 8001322:	4a13      	ldr	r2, [pc, #76]	; (8001370 <MX_I2C1_Init+0x54>)
 8001324:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001326:	4b11      	ldr	r3, [pc, #68]	; (800136c <MX_I2C1_Init+0x50>)
 8001328:	4a12      	ldr	r2, [pc, #72]	; (8001374 <MX_I2C1_Init+0x58>)
 800132a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800132c:	4b0f      	ldr	r3, [pc, #60]	; (800136c <MX_I2C1_Init+0x50>)
 800132e:	2200      	movs	r2, #0
 8001330:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001332:	4b0e      	ldr	r3, [pc, #56]	; (800136c <MX_I2C1_Init+0x50>)
 8001334:	2200      	movs	r2, #0
 8001336:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001338:	4b0c      	ldr	r3, [pc, #48]	; (800136c <MX_I2C1_Init+0x50>)
 800133a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800133e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001340:	4b0a      	ldr	r3, [pc, #40]	; (800136c <MX_I2C1_Init+0x50>)
 8001342:	2200      	movs	r2, #0
 8001344:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001346:	4b09      	ldr	r3, [pc, #36]	; (800136c <MX_I2C1_Init+0x50>)
 8001348:	2200      	movs	r2, #0
 800134a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800134c:	4b07      	ldr	r3, [pc, #28]	; (800136c <MX_I2C1_Init+0x50>)
 800134e:	2200      	movs	r2, #0
 8001350:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001352:	4b06      	ldr	r3, [pc, #24]	; (800136c <MX_I2C1_Init+0x50>)
 8001354:	2200      	movs	r2, #0
 8001356:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001358:	4804      	ldr	r0, [pc, #16]	; (800136c <MX_I2C1_Init+0x50>)
 800135a:	f001 fd69 	bl	8002e30 <HAL_I2C_Init>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001364:	f000 f9e0 	bl	8001728 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001368:	bf00      	nop
 800136a:	bd80      	pop	{r7, pc}
 800136c:	200040bc 	.word	0x200040bc
 8001370:	40005400 	.word	0x40005400
 8001374:	000186a0 	.word	0x000186a0

08001378 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800137c:	4b11      	ldr	r3, [pc, #68]	; (80013c4 <MX_USART6_UART_Init+0x4c>)
 800137e:	4a12      	ldr	r2, [pc, #72]	; (80013c8 <MX_USART6_UART_Init+0x50>)
 8001380:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001382:	4b10      	ldr	r3, [pc, #64]	; (80013c4 <MX_USART6_UART_Init+0x4c>)
 8001384:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001388:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800138a:	4b0e      	ldr	r3, [pc, #56]	; (80013c4 <MX_USART6_UART_Init+0x4c>)
 800138c:	2200      	movs	r2, #0
 800138e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001390:	4b0c      	ldr	r3, [pc, #48]	; (80013c4 <MX_USART6_UART_Init+0x4c>)
 8001392:	2200      	movs	r2, #0
 8001394:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001396:	4b0b      	ldr	r3, [pc, #44]	; (80013c4 <MX_USART6_UART_Init+0x4c>)
 8001398:	2200      	movs	r2, #0
 800139a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800139c:	4b09      	ldr	r3, [pc, #36]	; (80013c4 <MX_USART6_UART_Init+0x4c>)
 800139e:	220c      	movs	r2, #12
 80013a0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013a2:	4b08      	ldr	r3, [pc, #32]	; (80013c4 <MX_USART6_UART_Init+0x4c>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80013a8:	4b06      	ldr	r3, [pc, #24]	; (80013c4 <MX_USART6_UART_Init+0x4c>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80013ae:	4805      	ldr	r0, [pc, #20]	; (80013c4 <MX_USART6_UART_Init+0x4c>)
 80013b0:	f003 fb72 	bl	8004a98 <HAL_UART_Init>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80013ba:	f000 f9b5 	bl	8001728 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80013be:	bf00      	nop
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	20004150 	.word	0x20004150
 80013c8:	40011400 	.word	0x40011400

080013cc <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80013d2:	2300      	movs	r3, #0
 80013d4:	607b      	str	r3, [r7, #4]
 80013d6:	4b0c      	ldr	r3, [pc, #48]	; (8001408 <MX_DMA_Init+0x3c>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013da:	4a0b      	ldr	r2, [pc, #44]	; (8001408 <MX_DMA_Init+0x3c>)
 80013dc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80013e0:	6313      	str	r3, [r2, #48]	; 0x30
 80013e2:	4b09      	ldr	r3, [pc, #36]	; (8001408 <MX_DMA_Init+0x3c>)
 80013e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013ea:	607b      	str	r3, [r7, #4]
 80013ec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 80013ee:	2200      	movs	r2, #0
 80013f0:	2105      	movs	r1, #5
 80013f2:	2039      	movs	r0, #57	; 0x39
 80013f4:	f000 ffb0 	bl	8002358 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80013f8:	2039      	movs	r0, #57	; 0x39
 80013fa:	f000 ffc9 	bl	8002390 <HAL_NVIC_EnableIRQ>

}
 80013fe:	bf00      	nop
 8001400:	3708      	adds	r7, #8
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	40023800 	.word	0x40023800

0800140c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b088      	sub	sp, #32
 8001410:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001412:	f107 030c 	add.w	r3, r7, #12
 8001416:	2200      	movs	r2, #0
 8001418:	601a      	str	r2, [r3, #0]
 800141a:	605a      	str	r2, [r3, #4]
 800141c:	609a      	str	r2, [r3, #8]
 800141e:	60da      	str	r2, [r3, #12]
 8001420:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001422:	2300      	movs	r3, #0
 8001424:	60bb      	str	r3, [r7, #8]
 8001426:	4b1c      	ldr	r3, [pc, #112]	; (8001498 <MX_GPIO_Init+0x8c>)
 8001428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142a:	4a1b      	ldr	r2, [pc, #108]	; (8001498 <MX_GPIO_Init+0x8c>)
 800142c:	f043 0310 	orr.w	r3, r3, #16
 8001430:	6313      	str	r3, [r2, #48]	; 0x30
 8001432:	4b19      	ldr	r3, [pc, #100]	; (8001498 <MX_GPIO_Init+0x8c>)
 8001434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001436:	f003 0310 	and.w	r3, r3, #16
 800143a:	60bb      	str	r3, [r7, #8]
 800143c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800143e:	2300      	movs	r3, #0
 8001440:	607b      	str	r3, [r7, #4]
 8001442:	4b15      	ldr	r3, [pc, #84]	; (8001498 <MX_GPIO_Init+0x8c>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001446:	4a14      	ldr	r2, [pc, #80]	; (8001498 <MX_GPIO_Init+0x8c>)
 8001448:	f043 0304 	orr.w	r3, r3, #4
 800144c:	6313      	str	r3, [r2, #48]	; 0x30
 800144e:	4b12      	ldr	r3, [pc, #72]	; (8001498 <MX_GPIO_Init+0x8c>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001452:	f003 0304 	and.w	r3, r3, #4
 8001456:	607b      	str	r3, [r7, #4]
 8001458:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800145a:	2300      	movs	r3, #0
 800145c:	603b      	str	r3, [r7, #0]
 800145e:	4b0e      	ldr	r3, [pc, #56]	; (8001498 <MX_GPIO_Init+0x8c>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001462:	4a0d      	ldr	r2, [pc, #52]	; (8001498 <MX_GPIO_Init+0x8c>)
 8001464:	f043 0302 	orr.w	r3, r3, #2
 8001468:	6313      	str	r3, [r2, #48]	; 0x30
 800146a:	4b0b      	ldr	r3, [pc, #44]	; (8001498 <MX_GPIO_Init+0x8c>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146e:	f003 0302 	and.w	r3, r3, #2
 8001472:	603b      	str	r3, [r7, #0]
 8001474:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : Switch1_Pin Switch2_Pin Switch3_Pin Switch4_Pin 
                           Switch5_Pin Switch6_Pin Switch7_Pin Switch8_Pin */
  GPIO_InitStruct.Pin = Switch1_Pin|Switch2_Pin|Switch3_Pin|Switch4_Pin 
 8001476:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 800147a:	60fb      	str	r3, [r7, #12]
                          |Switch5_Pin|Switch6_Pin|Switch7_Pin|Switch8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800147c:	2300      	movs	r3, #0
 800147e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001480:	2300      	movs	r3, #0
 8001482:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001484:	f107 030c 	add.w	r3, r7, #12
 8001488:	4619      	mov	r1, r3
 800148a:	4804      	ldr	r0, [pc, #16]	; (800149c <MX_GPIO_Init+0x90>)
 800148c:	f001 fb1e 	bl	8002acc <HAL_GPIO_Init>

}
 8001490:	bf00      	nop
 8001492:	3720      	adds	r7, #32
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	40023800 	.word	0x40023800
 800149c:	40021000 	.word	0x40021000

080014a0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b084      	sub	sp, #16
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
 /* Prevent unused argument(s) compilation warning */
 UNUSED(huart);
 /* NOTE: This function should not be modified, when the callback is needed,
          the HAL_UART_RxCpltCallback could be implemented in the user file
  */
 HAL_UART_Receive_DMA(&huart6, rxbuffer, 8);
 80014a8:	2208      	movs	r2, #8
 80014aa:	490d      	ldr	r1, [pc, #52]	; (80014e0 <HAL_UART_RxCpltCallback+0x40>)
 80014ac:	480d      	ldr	r0, [pc, #52]	; (80014e4 <HAL_UART_RxCpltCallback+0x44>)
 80014ae:	f003 fbd9 	bl	8004c64 <HAL_UART_Receive_DMA>
	for(int i=0;i<8;i++)
 80014b2:	2300      	movs	r3, #0
 80014b4:	60fb      	str	r3, [r7, #12]
 80014b6:	e00c      	b.n	80014d2 <HAL_UART_RxCpltCallback+0x32>
	{
		 osMessagePut(ModBusInHandle,rxbuffer[i],0);
 80014b8:	4b0b      	ldr	r3, [pc, #44]	; (80014e8 <HAL_UART_RxCpltCallback+0x48>)
 80014ba:	6818      	ldr	r0, [r3, #0]
 80014bc:	4a08      	ldr	r2, [pc, #32]	; (80014e0 <HAL_UART_RxCpltCallback+0x40>)
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	4413      	add	r3, r2
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	2200      	movs	r2, #0
 80014c6:	4619      	mov	r1, r3
 80014c8:	f004 fbae 	bl	8005c28 <osMessagePut>
	for(int i=0;i<8;i++)
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	3301      	adds	r3, #1
 80014d0:	60fb      	str	r3, [r7, #12]
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	2b07      	cmp	r3, #7
 80014d6:	ddef      	ble.n	80014b8 <HAL_UART_RxCpltCallback+0x18>
	}
}
 80014d8:	bf00      	nop
 80014da:	3710      	adds	r7, #16
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	2000419c 	.word	0x2000419c
 80014e4:	20004150 	.word	0x20004150
 80014e8:	20004378 	.word	0x20004378

080014ec <ModbusTransThread>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_ModbusTransThread */
void ModbusTransThread(void const * argument)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b0c6      	sub	sp, #280	; 0x118
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	1d3b      	adds	r3, r7, #4
 80014f4:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN 5 */
	  uint8_t buf[256]; // buffer, where we collect output data
	  uint8_t c = 0; // counter for buffer fill
 80014f6:	2300      	movs	r3, #0
 80014f8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
	  uint8_t count = 0;
 80014fc:	2300      	movs	r3, #0
 80014fe:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  /* Infinite loop */
  for(;;)
  {
	 // ModBus_SetRegister(0,5+1);

    osEvent evt = osMessageGet(ModBusOutHandle,200); // wait here 200 tick
 8001502:	4b1d      	ldr	r3, [pc, #116]	; (8001578 <ModbusTransThread+0x8c>)
 8001504:	6819      	ldr	r1, [r3, #0]
 8001506:	f107 0308 	add.w	r3, r7, #8
 800150a:	22c8      	movs	r2, #200	; 0xc8
 800150c:	4618      	mov	r0, r3
 800150e:	f004 fbcb 	bl	8005ca8 <osMessageGet>
    if (evt.status == osEventMessage)
 8001512:	f107 0308 	add.w	r3, r7, #8
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	2b10      	cmp	r3, #16
 800151a:	d10c      	bne.n	8001536 <ModbusTransThread+0x4a>
      {

        buf[c++]=(uint8_t) evt.value.v;
 800151c:	f107 0308 	add.w	r3, r7, #8
 8001520:	6859      	ldr	r1, [r3, #4]
 8001522:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8001526:	1c5a      	adds	r2, r3, #1
 8001528:	f887 2117 	strb.w	r2, [r7, #279]	; 0x117
 800152c:	461a      	mov	r2, r3
 800152e:	b2c9      	uxtb	r1, r1
 8001530:	f107 0314 	add.w	r3, r7, #20
 8001534:	5499      	strb	r1, [r3, r2]
      }
    if (evt.status == osEventTimeout)
 8001536:	f107 0308 	add.w	r3, r7, #8
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	2b40      	cmp	r3, #64	; 0x40
 800153e:	d116      	bne.n	800156e <ModbusTransThread+0x82>
      {
        if( (c > 0) && (c < 254) ) // ok, something in buffer exist, lets send it
 8001540:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8001544:	2b00      	cmp	r3, #0
 8001546:	d00f      	beq.n	8001568 <ModbusTransThread+0x7c>
 8001548:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800154c:	2bfd      	cmp	r3, #253	; 0xfd
 800154e:	d80b      	bhi.n	8001568 <ModbusTransThread+0x7c>
        {
        	HAL_StatusTypeDef AA = HAL_UART_Transmit(&huart6, buf, c, 50); // by USB-CDC
 8001550:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8001554:	b29a      	uxth	r2, r3
 8001556:	f107 0114 	add.w	r1, r7, #20
 800155a:	2332      	movs	r3, #50	; 0x32
 800155c:	4807      	ldr	r0, [pc, #28]	; (800157c <ModbusTransThread+0x90>)
 800155e:	f003 fae8 	bl	8004b32 <HAL_UART_Transmit>
 8001562:	4603      	mov	r3, r0
 8001564:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
        }
      c=0;
 8001568:	2300      	movs	r3, #0
 800156a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
      }

    osDelay(1);
 800156e:	2001      	movs	r0, #1
 8001570:	f004 fb1d 	bl	8005bae <osDelay>
  {
 8001574:	e7c5      	b.n	8001502 <ModbusTransThread+0x16>
 8001576:	bf00      	nop
 8001578:	20004370 	.word	0x20004370
 800157c:	20004150 	.word	0x20004150

08001580 <ModbusSetThread>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ModbusSetThread */
void ModbusSetThread(void const * argument)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ModbusSetThread */
  /* Infinite loop */
  for(;;)
  {

		   ModBus_SetRegister(0,(int)Convert2Modbus(ADS1115_ADDRESS_ADDR_GND_BOARD.ADS1115_CH1.data));
 8001588:	4b35      	ldr	r3, [pc, #212]	; (8001660 <ModbusSetThread+0xe0>)
 800158a:	edd3 7a00 	vldr	s15, [r3]
 800158e:	eeb0 0a67 	vmov.f32	s0, s15
 8001592:	f7ff fd0b 	bl	8000fac <Convert2Modbus>
 8001596:	4603      	mov	r3, r0
 8001598:	b29b      	uxth	r3, r3
 800159a:	4619      	mov	r1, r3
 800159c:	2000      	movs	r0, #0
 800159e:	f000 fb1d 	bl	8001bdc <ModBus_SetRegister>
		   ModBus_SetRegister(1,(int)Convert2Modbus(ADS1115_ADDRESS_ADDR_GND_BOARD.ADS1115_CH2.data));
 80015a2:	4b2f      	ldr	r3, [pc, #188]	; (8001660 <ModbusSetThread+0xe0>)
 80015a4:	edd3 7a01 	vldr	s15, [r3, #4]
 80015a8:	eeb0 0a67 	vmov.f32	s0, s15
 80015ac:	f7ff fcfe 	bl	8000fac <Convert2Modbus>
 80015b0:	4603      	mov	r3, r0
 80015b2:	b29b      	uxth	r3, r3
 80015b4:	4619      	mov	r1, r3
 80015b6:	2001      	movs	r0, #1
 80015b8:	f000 fb10 	bl	8001bdc <ModBus_SetRegister>
		   ModBus_SetRegister(2,(int)Convert2Modbus(ADS1115_ADDRESS_ADDR_VDD_BOARD.ADS1115_CH1.data));
 80015bc:	4b29      	ldr	r3, [pc, #164]	; (8001664 <ModbusSetThread+0xe4>)
 80015be:	edd3 7a00 	vldr	s15, [r3]
 80015c2:	eeb0 0a67 	vmov.f32	s0, s15
 80015c6:	f7ff fcf1 	bl	8000fac <Convert2Modbus>
 80015ca:	4603      	mov	r3, r0
 80015cc:	b29b      	uxth	r3, r3
 80015ce:	4619      	mov	r1, r3
 80015d0:	2002      	movs	r0, #2
 80015d2:	f000 fb03 	bl	8001bdc <ModBus_SetRegister>
		   ModBus_SetRegister(3,(int)Convert2Modbus(ADS1115_ADDRESS_ADDR_VDD_BOARD.ADS1115_CH2.data));
 80015d6:	4b23      	ldr	r3, [pc, #140]	; (8001664 <ModbusSetThread+0xe4>)
 80015d8:	edd3 7a01 	vldr	s15, [r3, #4]
 80015dc:	eeb0 0a67 	vmov.f32	s0, s15
 80015e0:	f7ff fce4 	bl	8000fac <Convert2Modbus>
 80015e4:	4603      	mov	r3, r0
 80015e6:	b29b      	uxth	r3, r3
 80015e8:	4619      	mov	r1, r3
 80015ea:	2003      	movs	r0, #3
 80015ec:	f000 faf6 	bl	8001bdc <ModBus_SetRegister>
		   ModBus_SetRegister(4,(int)Convert2Modbus(ADS1115_ADDRESS_ADDR_SDA_BOARD.ADS1115_CH1.data));
 80015f0:	4b1d      	ldr	r3, [pc, #116]	; (8001668 <ModbusSetThread+0xe8>)
 80015f2:	edd3 7a00 	vldr	s15, [r3]
 80015f6:	eeb0 0a67 	vmov.f32	s0, s15
 80015fa:	f7ff fcd7 	bl	8000fac <Convert2Modbus>
 80015fe:	4603      	mov	r3, r0
 8001600:	b29b      	uxth	r3, r3
 8001602:	4619      	mov	r1, r3
 8001604:	2004      	movs	r0, #4
 8001606:	f000 fae9 	bl	8001bdc <ModBus_SetRegister>
		   ModBus_SetRegister(5,(int)Convert2Modbus(ADS1115_ADDRESS_ADDR_SDA_BOARD.ADS1115_CH2.data));
 800160a:	4b17      	ldr	r3, [pc, #92]	; (8001668 <ModbusSetThread+0xe8>)
 800160c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001610:	eeb0 0a67 	vmov.f32	s0, s15
 8001614:	f7ff fcca 	bl	8000fac <Convert2Modbus>
 8001618:	4603      	mov	r3, r0
 800161a:	b29b      	uxth	r3, r3
 800161c:	4619      	mov	r1, r3
 800161e:	2005      	movs	r0, #5
 8001620:	f000 fadc 	bl	8001bdc <ModBus_SetRegister>
		   ModBus_SetRegister(6,(int)Convert2Modbus(ADS1115_ADDRESS_ADDR_SCL_BOARD.ADS1115_CH1.data));
 8001624:	4b11      	ldr	r3, [pc, #68]	; (800166c <ModbusSetThread+0xec>)
 8001626:	edd3 7a00 	vldr	s15, [r3]
 800162a:	eeb0 0a67 	vmov.f32	s0, s15
 800162e:	f7ff fcbd 	bl	8000fac <Convert2Modbus>
 8001632:	4603      	mov	r3, r0
 8001634:	b29b      	uxth	r3, r3
 8001636:	4619      	mov	r1, r3
 8001638:	2006      	movs	r0, #6
 800163a:	f000 facf 	bl	8001bdc <ModBus_SetRegister>
		   ModBus_SetRegister(7,(int)Convert2Modbus(ADS1115_ADDRESS_ADDR_SCL_BOARD.ADS1115_CH2.data));
 800163e:	4b0b      	ldr	r3, [pc, #44]	; (800166c <ModbusSetThread+0xec>)
 8001640:	edd3 7a01 	vldr	s15, [r3, #4]
 8001644:	eeb0 0a67 	vmov.f32	s0, s15
 8001648:	f7ff fcb0 	bl	8000fac <Convert2Modbus>
 800164c:	4603      	mov	r3, r0
 800164e:	b29b      	uxth	r3, r3
 8001650:	4619      	mov	r1, r3
 8001652:	2007      	movs	r0, #7
 8001654:	f000 fac2 	bl	8001bdc <ModBus_SetRegister>
//		   ModBus_SetRegister(4,(int)ADS1115_ADDRESS_ADDR_SDA_BOARD.ADS1115_CH1.data * 1000);
//		   ModBus_SetRegister(5,(int)ADS1115_ADDRESS_ADDR_SDA_BOARD.ADS1115_CH2.data * 1000);
//		   ModBus_SetRegister(6,(int)ADS1115_ADDRESS_ADDR_SCL_BOARD.ADS1115_CH1.data * 1000);
//		   ModBus_SetRegister(7,(int)ADS1115_ADDRESS_ADDR_SCL_BOARD.ADS1115_CH2.data * 1000);

    osDelay(1);
 8001658:	2001      	movs	r0, #1
 800165a:	f004 faa8 	bl	8005bae <osDelay>
		   ModBus_SetRegister(0,(int)Convert2Modbus(ADS1115_ADDRESS_ADDR_GND_BOARD.ADS1115_CH1.data));
 800165e:	e793      	b.n	8001588 <ModbusSetThread+0x8>
 8001660:	2000404c 	.word	0x2000404c
 8001664:	20004054 	.word	0x20004054
 8001668:	20004044 	.word	0x20004044
 800166c:	2000403c 	.word	0x2000403c

08001670 <ADS1115Thread>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ADS1115Thread */
void ADS1115Thread(void const * argument)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b084      	sub	sp, #16
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ADS1115Thread */
  /* Infinite loop */
  for(;;)
  {

	  uint8_t ADS1115_ADDRESS_ADDR = 0;
 8001678:	2300      	movs	r3, #0
 800167a:	72fb      	strb	r3, [r7, #11]
	  for( int j = ADS1115_ADDRESS_ADDR_GND; j <= ADS1115_ADDRESS_ADDR_SCL; j++) {
 800167c:	2348      	movs	r3, #72	; 0x48
 800167e:	60fb      	str	r3, [r7, #12]
 8001680:	e031      	b.n	80016e6 <ADS1115Thread+0x76>
		  	  switch(j)
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	3b48      	subs	r3, #72	; 0x48
 8001686:	2b03      	cmp	r3, #3
 8001688:	d82a      	bhi.n	80016e0 <ADS1115Thread+0x70>
 800168a:	a201      	add	r2, pc, #4	; (adr r2, 8001690 <ADS1115Thread+0x20>)
 800168c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001690:	080016a1 	.word	0x080016a1
 8001694:	080016b1 	.word	0x080016b1
 8001698:	080016c1 	.word	0x080016c1
 800169c:	080016d1 	.word	0x080016d1
			  {
				  case(ADS1115_ADDRESS_ADDR_GND):
					ADS1115_ADDRESS_ADDR = ADS1115_ADDRESS_ADDR_GND; // 10000001 CH0+ CH1
 80016a0:	2348      	movs	r3, #72	; 0x48
 80016a2:	72fb      	strb	r3, [r7, #11]
					Read_ads1115(&ADS1115_ADDRESS_ADDR_GND_BOARD, ADS1115_ADDRESS_ADDR);
 80016a4:	7afb      	ldrb	r3, [r7, #11]
 80016a6:	4619      	mov	r1, r3
 80016a8:	4812      	ldr	r0, [pc, #72]	; (80016f4 <ADS1115Thread+0x84>)
 80016aa:	f7ff fbf9 	bl	8000ea0 <Read_ads1115>
					break;
 80016ae:	e017      	b.n	80016e0 <ADS1115Thread+0x70>
				  case(ADS1115_ADDRESS_ADDR_VDD):
					ADS1115_ADDRESS_ADDR = ADS1115_ADDRESS_ADDR_VDD; // 10000001 CH1+ CH2
 80016b0:	2349      	movs	r3, #73	; 0x49
 80016b2:	72fb      	strb	r3, [r7, #11]
					Read_ads1115(&ADS1115_ADDRESS_ADDR_VDD_BOARD, ADS1115_ADDRESS_ADDR);
 80016b4:	7afb      	ldrb	r3, [r7, #11]
 80016b6:	4619      	mov	r1, r3
 80016b8:	480f      	ldr	r0, [pc, #60]	; (80016f8 <ADS1115Thread+0x88>)
 80016ba:	f7ff fbf1 	bl	8000ea0 <Read_ads1115>
					break;
 80016be:	e00f      	b.n	80016e0 <ADS1115Thread+0x70>
				  case(ADS1115_ADDRESS_ADDR_SDA):
					ADS1115_ADDRESS_ADDR = ADS1115_ADDRESS_ADDR_SDA; // 10000001 CH3+ CH4
 80016c0:	234a      	movs	r3, #74	; 0x4a
 80016c2:	72fb      	strb	r3, [r7, #11]
					Read_ads1115(&ADS1115_ADDRESS_ADDR_SDA_BOARD, ADS1115_ADDRESS_ADDR);
 80016c4:	7afb      	ldrb	r3, [r7, #11]
 80016c6:	4619      	mov	r1, r3
 80016c8:	480c      	ldr	r0, [pc, #48]	; (80016fc <ADS1115Thread+0x8c>)
 80016ca:	f7ff fbe9 	bl	8000ea0 <Read_ads1115>
					break;
 80016ce:	e007      	b.n	80016e0 <ADS1115Thread+0x70>
				  case(ADS1115_ADDRESS_ADDR_SCL):
					ADS1115_ADDRESS_ADDR = ADS1115_ADDRESS_ADDR_SCL; // 10000001 CH5+ CH6
 80016d0:	234b      	movs	r3, #75	; 0x4b
 80016d2:	72fb      	strb	r3, [r7, #11]
					Read_ads1115(&ADS1115_ADDRESS_ADDR_SCL_BOARD, ADS1115_ADDRESS_ADDR);
 80016d4:	7afb      	ldrb	r3, [r7, #11]
 80016d6:	4619      	mov	r1, r3
 80016d8:	4809      	ldr	r0, [pc, #36]	; (8001700 <ADS1115Thread+0x90>)
 80016da:	f7ff fbe1 	bl	8000ea0 <Read_ads1115>
					break;
 80016de:	bf00      	nop
	  for( int j = ADS1115_ADDRESS_ADDR_GND; j <= ADS1115_ADDRESS_ADDR_SCL; j++) {
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	3301      	adds	r3, #1
 80016e4:	60fb      	str	r3, [r7, #12]
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	2b4b      	cmp	r3, #75	; 0x4b
 80016ea:	ddca      	ble.n	8001682 <ADS1115Thread+0x12>
		  }
	  }
	  osDelay(1);
 80016ec:	2001      	movs	r0, #1
 80016ee:	f004 fa5e 	bl	8005bae <osDelay>
  {
 80016f2:	e7c1      	b.n	8001678 <ADS1115Thread+0x8>
 80016f4:	2000404c 	.word	0x2000404c
 80016f8:	20004054 	.word	0x20004054
 80016fc:	20004044 	.word	0x20004044
 8001700:	2000403c 	.word	0x2000403c

08001704 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a04      	ldr	r2, [pc, #16]	; (8001724 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d101      	bne.n	800171a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001716:	f000 fd25 	bl	8002164 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800171a:	bf00      	nop
 800171c:	3708      	adds	r7, #8
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	40000400 	.word	0x40000400

08001728 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800172c:	bf00      	nop
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr
	...

08001738 <ModBusTask>:
uint8_t mb_buf_out_count;

void ModBusParse(void);

void ModBusTask(void const * argument)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b086      	sub	sp, #24
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  for(;;)
  {
    osEvent evt = osMessageGet(ModBusInHandle,ModBus35);
 8001740:	4b16      	ldr	r3, [pc, #88]	; (800179c <ModBusTask+0x64>)
 8001742:	6819      	ldr	r1, [r3, #0]
 8001744:	f107 0308 	add.w	r3, r7, #8
 8001748:	2223      	movs	r2, #35	; 0x23
 800174a:	4618      	mov	r0, r3
 800174c:	f004 faac 	bl	8005ca8 <osMessageGet>
    // Frame end?
    if (evt.status == osEventTimeout)
 8001750:	68bb      	ldr	r3, [r7, #8]
 8001752:	2b40      	cmp	r3, #64	; 0x40
 8001754:	d108      	bne.n	8001768 <ModBusTask+0x30>
      {
        if(mb_buf_in_count > 0) // ok, something in buffer exist, lets parse it
 8001756:	4b12      	ldr	r3, [pc, #72]	; (80017a0 <ModBusTask+0x68>)
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <ModBusTask+0x2a>
        {
          ModBusParse();
 800175e:	f000 f893 	bl	8001888 <ModBusParse>
        }  
      mb_buf_in_count=0;
 8001762:	4b0f      	ldr	r3, [pc, #60]	; (80017a0 <ModBusTask+0x68>)
 8001764:	2200      	movs	r2, #0
 8001766:	701a      	strb	r2, [r3, #0]
      }
    // Wow, something come!
    if (evt.status == osEventMessage)
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	2b10      	cmp	r3, #16
 800176c:	d1e8      	bne.n	8001740 <ModBusTask+0x8>
      {
        uint8_t byte = (uint8_t) evt.value.v;
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	75fb      	strb	r3, [r7, #23]
        // buffer has space for incoming?
        if(mb_buf_in_count<254)
 8001772:	4b0b      	ldr	r3, [pc, #44]	; (80017a0 <ModBusTask+0x68>)
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	2bfd      	cmp	r3, #253	; 0xfd
 8001778:	d80c      	bhi.n	8001794 <ModBusTask+0x5c>
        {
          mb_buf_in[mb_buf_in_count]=byte;
 800177a:	4b09      	ldr	r3, [pc, #36]	; (80017a0 <ModBusTask+0x68>)
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	4619      	mov	r1, r3
 8001780:	4a08      	ldr	r2, [pc, #32]	; (80017a4 <ModBusTask+0x6c>)
 8001782:	7dfb      	ldrb	r3, [r7, #23]
 8001784:	5453      	strb	r3, [r2, r1]
          mb_buf_in_count=mb_buf_in_count+1; // prevent opt/war on come compilers
 8001786:	4b06      	ldr	r3, [pc, #24]	; (80017a0 <ModBusTask+0x68>)
 8001788:	781b      	ldrb	r3, [r3, #0]
 800178a:	3301      	adds	r3, #1
 800178c:	b2da      	uxtb	r2, r3
 800178e:	4b04      	ldr	r3, [pc, #16]	; (80017a0 <ModBusTask+0x68>)
 8001790:	701a      	strb	r2, [r3, #0]
 8001792:	e7d5      	b.n	8001740 <ModBusTask+0x8>
        }
        else // oops, bad frame, by standard we should drop it and no answer
        {
          mb_buf_in_count=0;
 8001794:	4b02      	ldr	r3, [pc, #8]	; (80017a0 <ModBusTask+0x68>)
 8001796:	2200      	movs	r2, #0
 8001798:	701a      	strb	r2, [r3, #0]
  {
 800179a:	e7d1      	b.n	8001740 <ModBusTask+0x8>
 800179c:	20004378 	.word	0x20004378
 80017a0:	2000437c 	.word	0x2000437c
 80017a4:	20004380 	.word	0x20004380

080017a8 <ModBus_Init>:
      }
  }
}

void ModBus_Init(void)
{
 80017a8:	b5b0      	push	{r4, r5, r7, lr}
 80017aa:	b090      	sub	sp, #64	; 0x40
 80017ac:	af00      	add	r7, sp, #0
  osMessageQDef(ModBusIn, 256, uint8_t);
 80017ae:	4b25      	ldr	r3, [pc, #148]	; (8001844 <ModBus_Init+0x9c>)
 80017b0:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 80017b4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80017b6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ModBusInHandle = osMessageCreate(osMessageQ(ModBusIn), NULL);
 80017ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017be:	2100      	movs	r1, #0
 80017c0:	4618      	mov	r0, r3
 80017c2:	f004 fa08 	bl	8005bd6 <osMessageCreate>
 80017c6:	4602      	mov	r2, r0
 80017c8:	4b1f      	ldr	r3, [pc, #124]	; (8001848 <ModBus_Init+0xa0>)
 80017ca:	601a      	str	r2, [r3, #0]
  osMessageQDef(ModBusOut, 256, uint8_t);
 80017cc:	4b1d      	ldr	r3, [pc, #116]	; (8001844 <ModBus_Init+0x9c>)
 80017ce:	f107 041c 	add.w	r4, r7, #28
 80017d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80017d4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ModBusOutHandle = osMessageCreate(osMessageQ(ModBusOut), NULL);
 80017d8:	f107 031c 	add.w	r3, r7, #28
 80017dc:	2100      	movs	r1, #0
 80017de:	4618      	mov	r0, r3
 80017e0:	f004 f9f9 	bl	8005bd6 <osMessageCreate>
 80017e4:	4602      	mov	r2, r0
 80017e6:	4b19      	ldr	r3, [pc, #100]	; (800184c <ModBus_Init+0xa4>)
 80017e8:	601a      	str	r2, [r3, #0]
  osThreadDef(ModBusTask, ModBusTask, osPriorityNormal, 0, 128);
 80017ea:	4b19      	ldr	r3, [pc, #100]	; (8001850 <ModBus_Init+0xa8>)
 80017ec:	463c      	mov	r4, r7
 80017ee:	461d      	mov	r5, r3
 80017f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017f4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80017f8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ModBusTaskHandle = osThreadCreate(osThread(ModBusTask), NULL);
 80017fc:	463b      	mov	r3, r7
 80017fe:	2100      	movs	r1, #0
 8001800:	4618      	mov	r0, r3
 8001802:	f004 f988 	bl	8005b16 <osThreadCreate>
 8001806:	4602      	mov	r2, r0
 8001808:	4b12      	ldr	r3, [pc, #72]	; (8001854 <ModBus_Init+0xac>)
 800180a:	601a      	str	r2, [r3, #0]
  mb_buf_in_count=0;
 800180c:	4b12      	ldr	r3, [pc, #72]	; (8001858 <ModBus_Init+0xb0>)
 800180e:	2200      	movs	r2, #0
 8001810:	701a      	strb	r2, [r3, #0]
  mb_addr=247; // by default maximum possible adrress
 8001812:	4b12      	ldr	r3, [pc, #72]	; (800185c <ModBus_Init+0xb4>)
 8001814:	22f7      	movs	r2, #247	; 0xf7
 8001816:	701a      	strb	r2, [r3, #0]
  mb_buf_out_count=0;
 8001818:	4b11      	ldr	r3, [pc, #68]	; (8001860 <ModBus_Init+0xb8>)
 800181a:	2200      	movs	r2, #0
 800181c:	701a      	strb	r2, [r3, #0]
  for(int i=0;i<ModBusRegisters;i++) 
 800181e:	2300      	movs	r3, #0
 8001820:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001822:	e007      	b.n	8001834 <ModBus_Init+0x8c>
  {
    mb_reg[i]=0;
 8001824:	4a0f      	ldr	r2, [pc, #60]	; (8001864 <ModBus_Init+0xbc>)
 8001826:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001828:	2100      	movs	r1, #0
 800182a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for(int i=0;i<ModBusRegisters;i++) 
 800182e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001830:	3301      	adds	r3, #1
 8001832:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001834:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001836:	2b63      	cmp	r3, #99	; 0x63
 8001838:	ddf4      	ble.n	8001824 <ModBus_Init+0x7c>
  }
}
 800183a:	bf00      	nop
 800183c:	3740      	adds	r7, #64	; 0x40
 800183e:	46bd      	mov	sp, r7
 8001840:	bdb0      	pop	{r4, r5, r7, pc}
 8001842:	bf00      	nop
 8001844:	080090d0 	.word	0x080090d0
 8001848:	20004378 	.word	0x20004378
 800184c:	20004370 	.word	0x20004370
 8001850:	080090ec 	.word	0x080090ec
 8001854:	200041a4 	.word	0x200041a4
 8001858:	2000437c 	.word	0x2000437c
 800185c:	20004374 	.word	0x20004374
 8001860:	2000437d 	.word	0x2000437d
 8001864:	200041a8 	.word	0x200041a8

08001868 <ModBus_SetAddress>:

void ModBus_SetAddress(uint8_t addr)
{
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	4603      	mov	r3, r0
 8001870:	71fb      	strb	r3, [r7, #7]
  mb_addr = addr;
 8001872:	4a04      	ldr	r2, [pc, #16]	; (8001884 <ModBus_SetAddress+0x1c>)
 8001874:	79fb      	ldrb	r3, [r7, #7]
 8001876:	7013      	strb	r3, [r2, #0]
}
 8001878:	bf00      	nop
 800187a:	370c      	adds	r7, #12
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr
 8001884:	20004374 	.word	0x20004374

08001888 <ModBusParse>:
void CRC16_OUT(void);
uint8_t CRC16_IN(void);

// parse something in incoming buffer 
void ModBusParse(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b084      	sub	sp, #16
 800188c:	af00      	add	r7, sp, #0
    if(mb_buf_in_count==0) // call as by mistake on empty buffer?
 800188e:	4b72      	ldr	r3, [pc, #456]	; (8001a58 <ModBusParse+0x1d0>)
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	2b00      	cmp	r3, #0
 8001894:	f000 818d 	beq.w	8001bb2 <ModBusParse+0x32a>
    {
      return;
    }
    
    if(mb_buf_in[0] != mb_addr) // its not our address!
 8001898:	4b70      	ldr	r3, [pc, #448]	; (8001a5c <ModBusParse+0x1d4>)
 800189a:	781a      	ldrb	r2, [r3, #0]
 800189c:	4b70      	ldr	r3, [pc, #448]	; (8001a60 <ModBusParse+0x1d8>)
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	429a      	cmp	r2, r3
 80018a2:	f040 8188 	bne.w	8001bb6 <ModBusParse+0x32e>
    {
      return;
    }
    // check CRC
    if(CRC16_IN()==0)
 80018a6:	f000 fa13 	bl	8001cd0 <CRC16_IN>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	f040 8179 	bne.w	8001ba4 <ModBusParse+0x31c>
    {
      mb_buf_out_count = 0;
 80018b2:	4b6c      	ldr	r3, [pc, #432]	; (8001a64 <ModBusParse+0x1dc>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	701a      	strb	r2, [r3, #0]
      uint16_t st,nu;
      uint8_t func = mb_buf_in[1];
 80018b8:	4b68      	ldr	r3, [pc, #416]	; (8001a5c <ModBusParse+0x1d4>)
 80018ba:	785b      	ldrb	r3, [r3, #1]
 80018bc:	71fb      	strb	r3, [r7, #7]
      uint8_t i;
      switch(func)
 80018be:	79fb      	ldrb	r3, [r7, #7]
 80018c0:	2b03      	cmp	r3, #3
 80018c2:	d003      	beq.n	80018cc <ModBusParse+0x44>
 80018c4:	2b10      	cmp	r3, #16
 80018c6:	f000 8089 	beq.w	80019dc <ModBusParse+0x154>
 80018ca:	e131      	b.n	8001b30 <ModBusParse+0x2a8>
      {
        case 3:
          // read holding registers. by bytes addr func starth startl totalh totall
          st=mb_buf_in[2]*256+mb_buf_in[3];
 80018cc:	4b63      	ldr	r3, [pc, #396]	; (8001a5c <ModBusParse+0x1d4>)
 80018ce:	789b      	ldrb	r3, [r3, #2]
 80018d0:	b29b      	uxth	r3, r3
 80018d2:	021b      	lsls	r3, r3, #8
 80018d4:	b29a      	uxth	r2, r3
 80018d6:	4b61      	ldr	r3, [pc, #388]	; (8001a5c <ModBusParse+0x1d4>)
 80018d8:	78db      	ldrb	r3, [r3, #3]
 80018da:	b29b      	uxth	r3, r3
 80018dc:	4413      	add	r3, r2
 80018de:	80bb      	strh	r3, [r7, #4]
          nu=mb_buf_in[4]*256+mb_buf_in[5];
 80018e0:	4b5e      	ldr	r3, [pc, #376]	; (8001a5c <ModBusParse+0x1d4>)
 80018e2:	791b      	ldrb	r3, [r3, #4]
 80018e4:	b29b      	uxth	r3, r3
 80018e6:	021b      	lsls	r3, r3, #8
 80018e8:	b29a      	uxth	r2, r3
 80018ea:	4b5c      	ldr	r3, [pc, #368]	; (8001a5c <ModBusParse+0x1d4>)
 80018ec:	795b      	ldrb	r3, [r3, #5]
 80018ee:	b29b      	uxth	r3, r3
 80018f0:	4413      	add	r3, r2
 80018f2:	807b      	strh	r3, [r7, #2]
          if( (st+nu) > ModBusRegisters) // dont ask more, that we has!
 80018f4:	88ba      	ldrh	r2, [r7, #4]
 80018f6:	887b      	ldrh	r3, [r7, #2]
 80018f8:	4413      	add	r3, r2
 80018fa:	2b64      	cmp	r3, #100	; 0x64
 80018fc:	dd21      	ble.n	8001942 <ModBusParse+0xba>
            {
              mb_buf_out[mb_buf_out_count++]=mb_addr;
 80018fe:	4b59      	ldr	r3, [pc, #356]	; (8001a64 <ModBusParse+0x1dc>)
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	1c5a      	adds	r2, r3, #1
 8001904:	b2d1      	uxtb	r1, r2
 8001906:	4a57      	ldr	r2, [pc, #348]	; (8001a64 <ModBusParse+0x1dc>)
 8001908:	7011      	strb	r1, [r2, #0]
 800190a:	461a      	mov	r2, r3
 800190c:	4b54      	ldr	r3, [pc, #336]	; (8001a60 <ModBusParse+0x1d8>)
 800190e:	7819      	ldrb	r1, [r3, #0]
 8001910:	4b55      	ldr	r3, [pc, #340]	; (8001a68 <ModBusParse+0x1e0>)
 8001912:	5499      	strb	r1, [r3, r2]
              mb_buf_out[mb_buf_out_count++]=func+0x80;
 8001914:	4b53      	ldr	r3, [pc, #332]	; (8001a64 <ModBusParse+0x1dc>)
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	1c5a      	adds	r2, r3, #1
 800191a:	b2d1      	uxtb	r1, r2
 800191c:	4a51      	ldr	r2, [pc, #324]	; (8001a64 <ModBusParse+0x1dc>)
 800191e:	7011      	strb	r1, [r2, #0]
 8001920:	461a      	mov	r2, r3
 8001922:	79fb      	ldrb	r3, [r7, #7]
 8001924:	3b80      	subs	r3, #128	; 0x80
 8001926:	b2d9      	uxtb	r1, r3
 8001928:	4b4f      	ldr	r3, [pc, #316]	; (8001a68 <ModBusParse+0x1e0>)
 800192a:	5499      	strb	r1, [r3, r2]
              mb_buf_out[mb_buf_out_count++]=2;
 800192c:	4b4d      	ldr	r3, [pc, #308]	; (8001a64 <ModBusParse+0x1dc>)
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	1c5a      	adds	r2, r3, #1
 8001932:	b2d1      	uxtb	r1, r2
 8001934:	4a4b      	ldr	r2, [pc, #300]	; (8001a64 <ModBusParse+0x1dc>)
 8001936:	7011      	strb	r1, [r2, #0]
 8001938:	461a      	mov	r2, r3
 800193a:	4b4b      	ldr	r3, [pc, #300]	; (8001a68 <ModBusParse+0x1e0>)
 800193c:	2102      	movs	r1, #2
 800193e:	5499      	strb	r1, [r3, r2]
                {
                  mb_buf_out[mb_buf_out_count++]=( mb_reg[i] >> 8 ) & 0xFF; // hi part
                  mb_buf_out[mb_buf_out_count++]=mb_reg[i] & 0xFF; // lo part
                }
            }
          break;
 8001940:	e118      	b.n	8001b74 <ModBusParse+0x2ec>
              mb_buf_out[mb_buf_out_count++]=mb_addr;
 8001942:	4b48      	ldr	r3, [pc, #288]	; (8001a64 <ModBusParse+0x1dc>)
 8001944:	781b      	ldrb	r3, [r3, #0]
 8001946:	1c5a      	adds	r2, r3, #1
 8001948:	b2d1      	uxtb	r1, r2
 800194a:	4a46      	ldr	r2, [pc, #280]	; (8001a64 <ModBusParse+0x1dc>)
 800194c:	7011      	strb	r1, [r2, #0]
 800194e:	461a      	mov	r2, r3
 8001950:	4b43      	ldr	r3, [pc, #268]	; (8001a60 <ModBusParse+0x1d8>)
 8001952:	7819      	ldrb	r1, [r3, #0]
 8001954:	4b44      	ldr	r3, [pc, #272]	; (8001a68 <ModBusParse+0x1e0>)
 8001956:	5499      	strb	r1, [r3, r2]
              mb_buf_out[mb_buf_out_count++]=func;
 8001958:	4b42      	ldr	r3, [pc, #264]	; (8001a64 <ModBusParse+0x1dc>)
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	1c5a      	adds	r2, r3, #1
 800195e:	b2d1      	uxtb	r1, r2
 8001960:	4a40      	ldr	r2, [pc, #256]	; (8001a64 <ModBusParse+0x1dc>)
 8001962:	7011      	strb	r1, [r2, #0]
 8001964:	4619      	mov	r1, r3
 8001966:	4a40      	ldr	r2, [pc, #256]	; (8001a68 <ModBusParse+0x1e0>)
 8001968:	79fb      	ldrb	r3, [r7, #7]
 800196a:	5453      	strb	r3, [r2, r1]
              mb_buf_out[mb_buf_out_count++]=nu*2; // how many bytes we will send?
 800196c:	887b      	ldrh	r3, [r7, #2]
 800196e:	b2da      	uxtb	r2, r3
 8001970:	4b3c      	ldr	r3, [pc, #240]	; (8001a64 <ModBusParse+0x1dc>)
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	1c59      	adds	r1, r3, #1
 8001976:	b2c8      	uxtb	r0, r1
 8001978:	493a      	ldr	r1, [pc, #232]	; (8001a64 <ModBusParse+0x1dc>)
 800197a:	7008      	strb	r0, [r1, #0]
 800197c:	4619      	mov	r1, r3
 800197e:	0053      	lsls	r3, r2, #1
 8001980:	b2da      	uxtb	r2, r3
 8001982:	4b39      	ldr	r3, [pc, #228]	; (8001a68 <ModBusParse+0x1e0>)
 8001984:	545a      	strb	r2, [r3, r1]
              for(i=st;i<(st+nu);i++)
 8001986:	88bb      	ldrh	r3, [r7, #4]
 8001988:	73fb      	strb	r3, [r7, #15]
 800198a:	e020      	b.n	80019ce <ModBusParse+0x146>
                  mb_buf_out[mb_buf_out_count++]=( mb_reg[i] >> 8 ) & 0xFF; // hi part
 800198c:	7bfb      	ldrb	r3, [r7, #15]
 800198e:	4a37      	ldr	r2, [pc, #220]	; (8001a6c <ModBusParse+0x1e4>)
 8001990:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001994:	0a1b      	lsrs	r3, r3, #8
 8001996:	b299      	uxth	r1, r3
 8001998:	4b32      	ldr	r3, [pc, #200]	; (8001a64 <ModBusParse+0x1dc>)
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	1c5a      	adds	r2, r3, #1
 800199e:	b2d0      	uxtb	r0, r2
 80019a0:	4a30      	ldr	r2, [pc, #192]	; (8001a64 <ModBusParse+0x1dc>)
 80019a2:	7010      	strb	r0, [r2, #0]
 80019a4:	461a      	mov	r2, r3
 80019a6:	b2c9      	uxtb	r1, r1
 80019a8:	4b2f      	ldr	r3, [pc, #188]	; (8001a68 <ModBusParse+0x1e0>)
 80019aa:	5499      	strb	r1, [r3, r2]
                  mb_buf_out[mb_buf_out_count++]=mb_reg[i] & 0xFF; // lo part
 80019ac:	7bfb      	ldrb	r3, [r7, #15]
 80019ae:	4a2f      	ldr	r2, [pc, #188]	; (8001a6c <ModBusParse+0x1e4>)
 80019b0:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80019b4:	4b2b      	ldr	r3, [pc, #172]	; (8001a64 <ModBusParse+0x1dc>)
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	1c5a      	adds	r2, r3, #1
 80019ba:	b2d0      	uxtb	r0, r2
 80019bc:	4a29      	ldr	r2, [pc, #164]	; (8001a64 <ModBusParse+0x1dc>)
 80019be:	7010      	strb	r0, [r2, #0]
 80019c0:	461a      	mov	r2, r3
 80019c2:	b2c9      	uxtb	r1, r1
 80019c4:	4b28      	ldr	r3, [pc, #160]	; (8001a68 <ModBusParse+0x1e0>)
 80019c6:	5499      	strb	r1, [r3, r2]
              for(i=st;i<(st+nu);i++)
 80019c8:	7bfb      	ldrb	r3, [r7, #15]
 80019ca:	3301      	adds	r3, #1
 80019cc:	73fb      	strb	r3, [r7, #15]
 80019ce:	7bfa      	ldrb	r2, [r7, #15]
 80019d0:	88b9      	ldrh	r1, [r7, #4]
 80019d2:	887b      	ldrh	r3, [r7, #2]
 80019d4:	440b      	add	r3, r1
 80019d6:	429a      	cmp	r2, r3
 80019d8:	dbd8      	blt.n	800198c <ModBusParse+0x104>
          break;
 80019da:	e0cb      	b.n	8001b74 <ModBusParse+0x2ec>
        case 16: 
          // write holding registers. by bytes addr func starth startl totalh totall num_bytes regh regl ...
          st=mb_buf_in[2]*256+mb_buf_in[3];
 80019dc:	4b1f      	ldr	r3, [pc, #124]	; (8001a5c <ModBusParse+0x1d4>)
 80019de:	789b      	ldrb	r3, [r3, #2]
 80019e0:	b29b      	uxth	r3, r3
 80019e2:	021b      	lsls	r3, r3, #8
 80019e4:	b29a      	uxth	r2, r3
 80019e6:	4b1d      	ldr	r3, [pc, #116]	; (8001a5c <ModBusParse+0x1d4>)
 80019e8:	78db      	ldrb	r3, [r3, #3]
 80019ea:	b29b      	uxth	r3, r3
 80019ec:	4413      	add	r3, r2
 80019ee:	80bb      	strh	r3, [r7, #4]
          nu=mb_buf_in[4]*256+mb_buf_in[5];
 80019f0:	4b1a      	ldr	r3, [pc, #104]	; (8001a5c <ModBusParse+0x1d4>)
 80019f2:	791b      	ldrb	r3, [r3, #4]
 80019f4:	b29b      	uxth	r3, r3
 80019f6:	021b      	lsls	r3, r3, #8
 80019f8:	b29a      	uxth	r2, r3
 80019fa:	4b18      	ldr	r3, [pc, #96]	; (8001a5c <ModBusParse+0x1d4>)
 80019fc:	795b      	ldrb	r3, [r3, #5]
 80019fe:	b29b      	uxth	r3, r3
 8001a00:	4413      	add	r3, r2
 8001a02:	807b      	strh	r3, [r7, #2]
          if( (st+nu) > ModBusRegisters) // dont ask more, that we has!
 8001a04:	88ba      	ldrh	r2, [r7, #4]
 8001a06:	887b      	ldrh	r3, [r7, #2]
 8001a08:	4413      	add	r3, r2
 8001a0a:	2b64      	cmp	r3, #100	; 0x64
 8001a0c:	dd21      	ble.n	8001a52 <ModBusParse+0x1ca>
            {
              mb_buf_out[mb_buf_out_count++]=mb_addr;
 8001a0e:	4b15      	ldr	r3, [pc, #84]	; (8001a64 <ModBusParse+0x1dc>)
 8001a10:	781b      	ldrb	r3, [r3, #0]
 8001a12:	1c5a      	adds	r2, r3, #1
 8001a14:	b2d1      	uxtb	r1, r2
 8001a16:	4a13      	ldr	r2, [pc, #76]	; (8001a64 <ModBusParse+0x1dc>)
 8001a18:	7011      	strb	r1, [r2, #0]
 8001a1a:	461a      	mov	r2, r3
 8001a1c:	4b10      	ldr	r3, [pc, #64]	; (8001a60 <ModBusParse+0x1d8>)
 8001a1e:	7819      	ldrb	r1, [r3, #0]
 8001a20:	4b11      	ldr	r3, [pc, #68]	; (8001a68 <ModBusParse+0x1e0>)
 8001a22:	5499      	strb	r1, [r3, r2]
              mb_buf_out[mb_buf_out_count++]=func+0x80;
 8001a24:	4b0f      	ldr	r3, [pc, #60]	; (8001a64 <ModBusParse+0x1dc>)
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	1c5a      	adds	r2, r3, #1
 8001a2a:	b2d1      	uxtb	r1, r2
 8001a2c:	4a0d      	ldr	r2, [pc, #52]	; (8001a64 <ModBusParse+0x1dc>)
 8001a2e:	7011      	strb	r1, [r2, #0]
 8001a30:	461a      	mov	r2, r3
 8001a32:	79fb      	ldrb	r3, [r7, #7]
 8001a34:	3b80      	subs	r3, #128	; 0x80
 8001a36:	b2d9      	uxtb	r1, r3
 8001a38:	4b0b      	ldr	r3, [pc, #44]	; (8001a68 <ModBusParse+0x1e0>)
 8001a3a:	5499      	strb	r1, [r3, r2]
              mb_buf_out[mb_buf_out_count++]=2;
 8001a3c:	4b09      	ldr	r3, [pc, #36]	; (8001a64 <ModBusParse+0x1dc>)
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	1c5a      	adds	r2, r3, #1
 8001a42:	b2d1      	uxtb	r1, r2
 8001a44:	4a07      	ldr	r2, [pc, #28]	; (8001a64 <ModBusParse+0x1dc>)
 8001a46:	7011      	strb	r1, [r2, #0]
 8001a48:	461a      	mov	r2, r3
 8001a4a:	4b07      	ldr	r3, [pc, #28]	; (8001a68 <ModBusParse+0x1e0>)
 8001a4c:	2102      	movs	r1, #2
 8001a4e:	5499      	strb	r1, [r3, r2]
              mb_buf_out[mb_buf_out_count++]=mb_buf_in[2]; // how many registers ask, so many wrote
              mb_buf_out[mb_buf_out_count++]=mb_buf_in[3];
              mb_buf_out[mb_buf_out_count++]=mb_buf_in[4];
              mb_buf_out[mb_buf_out_count++]=mb_buf_in[5];
            }
          break;
 8001a50:	e090      	b.n	8001b74 <ModBusParse+0x2ec>
              for(i=0;i<nu;i++)
 8001a52:	2300      	movs	r3, #0
 8001a54:	73fb      	strb	r3, [r7, #15]
 8001a56:	e024      	b.n	8001aa2 <ModBusParse+0x21a>
 8001a58:	2000437c 	.word	0x2000437c
 8001a5c:	20004380 	.word	0x20004380
 8001a60:	20004374 	.word	0x20004374
 8001a64:	2000437d 	.word	0x2000437d
 8001a68:	20004270 	.word	0x20004270
 8001a6c:	200041a8 	.word	0x200041a8
                  mb_reg[st+i]=mb_buf_in[7+i*2]*256+mb_buf_in[8+i*2];
 8001a70:	7bfb      	ldrb	r3, [r7, #15]
 8001a72:	005b      	lsls	r3, r3, #1
 8001a74:	3307      	adds	r3, #7
 8001a76:	4a52      	ldr	r2, [pc, #328]	; (8001bc0 <ModBusParse+0x338>)
 8001a78:	5cd3      	ldrb	r3, [r2, r3]
 8001a7a:	b29b      	uxth	r3, r3
 8001a7c:	021b      	lsls	r3, r3, #8
 8001a7e:	b299      	uxth	r1, r3
 8001a80:	7bfb      	ldrb	r3, [r7, #15]
 8001a82:	3304      	adds	r3, #4
 8001a84:	005b      	lsls	r3, r3, #1
 8001a86:	4a4e      	ldr	r2, [pc, #312]	; (8001bc0 <ModBusParse+0x338>)
 8001a88:	5cd3      	ldrb	r3, [r2, r3]
 8001a8a:	b29a      	uxth	r2, r3
 8001a8c:	88b8      	ldrh	r0, [r7, #4]
 8001a8e:	7bfb      	ldrb	r3, [r7, #15]
 8001a90:	4403      	add	r3, r0
 8001a92:	440a      	add	r2, r1
 8001a94:	b291      	uxth	r1, r2
 8001a96:	4a4b      	ldr	r2, [pc, #300]	; (8001bc4 <ModBusParse+0x33c>)
 8001a98:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
              for(i=0;i<nu;i++)
 8001a9c:	7bfb      	ldrb	r3, [r7, #15]
 8001a9e:	3301      	adds	r3, #1
 8001aa0:	73fb      	strb	r3, [r7, #15]
 8001aa2:	7bfb      	ldrb	r3, [r7, #15]
 8001aa4:	b29b      	uxth	r3, r3
 8001aa6:	887a      	ldrh	r2, [r7, #2]
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d8e1      	bhi.n	8001a70 <ModBusParse+0x1e8>
              mb_buf_out[mb_buf_out_count++]=mb_addr;
 8001aac:	4b46      	ldr	r3, [pc, #280]	; (8001bc8 <ModBusParse+0x340>)
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	1c5a      	adds	r2, r3, #1
 8001ab2:	b2d1      	uxtb	r1, r2
 8001ab4:	4a44      	ldr	r2, [pc, #272]	; (8001bc8 <ModBusParse+0x340>)
 8001ab6:	7011      	strb	r1, [r2, #0]
 8001ab8:	461a      	mov	r2, r3
 8001aba:	4b44      	ldr	r3, [pc, #272]	; (8001bcc <ModBusParse+0x344>)
 8001abc:	7819      	ldrb	r1, [r3, #0]
 8001abe:	4b44      	ldr	r3, [pc, #272]	; (8001bd0 <ModBusParse+0x348>)
 8001ac0:	5499      	strb	r1, [r3, r2]
              mb_buf_out[mb_buf_out_count++]=func;
 8001ac2:	4b41      	ldr	r3, [pc, #260]	; (8001bc8 <ModBusParse+0x340>)
 8001ac4:	781b      	ldrb	r3, [r3, #0]
 8001ac6:	1c5a      	adds	r2, r3, #1
 8001ac8:	b2d1      	uxtb	r1, r2
 8001aca:	4a3f      	ldr	r2, [pc, #252]	; (8001bc8 <ModBusParse+0x340>)
 8001acc:	7011      	strb	r1, [r2, #0]
 8001ace:	4619      	mov	r1, r3
 8001ad0:	4a3f      	ldr	r2, [pc, #252]	; (8001bd0 <ModBusParse+0x348>)
 8001ad2:	79fb      	ldrb	r3, [r7, #7]
 8001ad4:	5453      	strb	r3, [r2, r1]
              mb_buf_out[mb_buf_out_count++]=mb_buf_in[2]; // how many registers ask, so many wrote
 8001ad6:	4b3c      	ldr	r3, [pc, #240]	; (8001bc8 <ModBusParse+0x340>)
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	1c5a      	adds	r2, r3, #1
 8001adc:	b2d1      	uxtb	r1, r2
 8001ade:	4a3a      	ldr	r2, [pc, #232]	; (8001bc8 <ModBusParse+0x340>)
 8001ae0:	7011      	strb	r1, [r2, #0]
 8001ae2:	461a      	mov	r2, r3
 8001ae4:	4b36      	ldr	r3, [pc, #216]	; (8001bc0 <ModBusParse+0x338>)
 8001ae6:	7899      	ldrb	r1, [r3, #2]
 8001ae8:	4b39      	ldr	r3, [pc, #228]	; (8001bd0 <ModBusParse+0x348>)
 8001aea:	5499      	strb	r1, [r3, r2]
              mb_buf_out[mb_buf_out_count++]=mb_buf_in[3];
 8001aec:	4b36      	ldr	r3, [pc, #216]	; (8001bc8 <ModBusParse+0x340>)
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	1c5a      	adds	r2, r3, #1
 8001af2:	b2d1      	uxtb	r1, r2
 8001af4:	4a34      	ldr	r2, [pc, #208]	; (8001bc8 <ModBusParse+0x340>)
 8001af6:	7011      	strb	r1, [r2, #0]
 8001af8:	461a      	mov	r2, r3
 8001afa:	4b31      	ldr	r3, [pc, #196]	; (8001bc0 <ModBusParse+0x338>)
 8001afc:	78d9      	ldrb	r1, [r3, #3]
 8001afe:	4b34      	ldr	r3, [pc, #208]	; (8001bd0 <ModBusParse+0x348>)
 8001b00:	5499      	strb	r1, [r3, r2]
              mb_buf_out[mb_buf_out_count++]=mb_buf_in[4];
 8001b02:	4b31      	ldr	r3, [pc, #196]	; (8001bc8 <ModBusParse+0x340>)
 8001b04:	781b      	ldrb	r3, [r3, #0]
 8001b06:	1c5a      	adds	r2, r3, #1
 8001b08:	b2d1      	uxtb	r1, r2
 8001b0a:	4a2f      	ldr	r2, [pc, #188]	; (8001bc8 <ModBusParse+0x340>)
 8001b0c:	7011      	strb	r1, [r2, #0]
 8001b0e:	461a      	mov	r2, r3
 8001b10:	4b2b      	ldr	r3, [pc, #172]	; (8001bc0 <ModBusParse+0x338>)
 8001b12:	7919      	ldrb	r1, [r3, #4]
 8001b14:	4b2e      	ldr	r3, [pc, #184]	; (8001bd0 <ModBusParse+0x348>)
 8001b16:	5499      	strb	r1, [r3, r2]
              mb_buf_out[mb_buf_out_count++]=mb_buf_in[5];
 8001b18:	4b2b      	ldr	r3, [pc, #172]	; (8001bc8 <ModBusParse+0x340>)
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	1c5a      	adds	r2, r3, #1
 8001b1e:	b2d1      	uxtb	r1, r2
 8001b20:	4a29      	ldr	r2, [pc, #164]	; (8001bc8 <ModBusParse+0x340>)
 8001b22:	7011      	strb	r1, [r2, #0]
 8001b24:	461a      	mov	r2, r3
 8001b26:	4b26      	ldr	r3, [pc, #152]	; (8001bc0 <ModBusParse+0x338>)
 8001b28:	7959      	ldrb	r1, [r3, #5]
 8001b2a:	4b29      	ldr	r3, [pc, #164]	; (8001bd0 <ModBusParse+0x348>)
 8001b2c:	5499      	strb	r1, [r3, r2]
          break;
 8001b2e:	e021      	b.n	8001b74 <ModBusParse+0x2ec>
        default:  
          // Exception as we does not provide this function
          mb_buf_out[mb_buf_out_count++]=mb_addr;
 8001b30:	4b25      	ldr	r3, [pc, #148]	; (8001bc8 <ModBusParse+0x340>)
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	1c5a      	adds	r2, r3, #1
 8001b36:	b2d1      	uxtb	r1, r2
 8001b38:	4a23      	ldr	r2, [pc, #140]	; (8001bc8 <ModBusParse+0x340>)
 8001b3a:	7011      	strb	r1, [r2, #0]
 8001b3c:	461a      	mov	r2, r3
 8001b3e:	4b23      	ldr	r3, [pc, #140]	; (8001bcc <ModBusParse+0x344>)
 8001b40:	7819      	ldrb	r1, [r3, #0]
 8001b42:	4b23      	ldr	r3, [pc, #140]	; (8001bd0 <ModBusParse+0x348>)
 8001b44:	5499      	strb	r1, [r3, r2]
          mb_buf_out[mb_buf_out_count++]=func+0x80;
 8001b46:	4b20      	ldr	r3, [pc, #128]	; (8001bc8 <ModBusParse+0x340>)
 8001b48:	781b      	ldrb	r3, [r3, #0]
 8001b4a:	1c5a      	adds	r2, r3, #1
 8001b4c:	b2d1      	uxtb	r1, r2
 8001b4e:	4a1e      	ldr	r2, [pc, #120]	; (8001bc8 <ModBusParse+0x340>)
 8001b50:	7011      	strb	r1, [r2, #0]
 8001b52:	461a      	mov	r2, r3
 8001b54:	79fb      	ldrb	r3, [r7, #7]
 8001b56:	3b80      	subs	r3, #128	; 0x80
 8001b58:	b2d9      	uxtb	r1, r3
 8001b5a:	4b1d      	ldr	r3, [pc, #116]	; (8001bd0 <ModBusParse+0x348>)
 8001b5c:	5499      	strb	r1, [r3, r2]
          mb_buf_out[mb_buf_out_count++]=1;
 8001b5e:	4b1a      	ldr	r3, [pc, #104]	; (8001bc8 <ModBusParse+0x340>)
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	1c5a      	adds	r2, r3, #1
 8001b64:	b2d1      	uxtb	r1, r2
 8001b66:	4a18      	ldr	r2, [pc, #96]	; (8001bc8 <ModBusParse+0x340>)
 8001b68:	7011      	strb	r1, [r2, #0]
 8001b6a:	461a      	mov	r2, r3
 8001b6c:	4b18      	ldr	r3, [pc, #96]	; (8001bd0 <ModBusParse+0x348>)
 8001b6e:	2101      	movs	r1, #1
 8001b70:	5499      	strb	r1, [r3, r2]
          break;
 8001b72:	bf00      	nop
      }
      
      CRC16_OUT();
 8001b74:	f000 f84a 	bl	8001c0c <CRC16_OUT>
      
     // If you want directly to USB-CDC 
     //CDC_Transmit_FS(&mb_buf_out[0], mb_buf_out_count);
     for(int i=0;i<mb_buf_out_count;i++)
 8001b78:	2300      	movs	r3, #0
 8001b7a:	60bb      	str	r3, [r7, #8]
 8001b7c:	e00c      	b.n	8001b98 <ModBusParse+0x310>
        {
          osMessagePut(ModBusOutHandle,mb_buf_out[i],0);
 8001b7e:	4b15      	ldr	r3, [pc, #84]	; (8001bd4 <ModBusParse+0x34c>)
 8001b80:	6818      	ldr	r0, [r3, #0]
 8001b82:	4a13      	ldr	r2, [pc, #76]	; (8001bd0 <ModBusParse+0x348>)
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	4413      	add	r3, r2
 8001b88:	781b      	ldrb	r3, [r3, #0]
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	f004 f84b 	bl	8005c28 <osMessagePut>
     for(int i=0;i<mb_buf_out_count;i++)
 8001b92:	68bb      	ldr	r3, [r7, #8]
 8001b94:	3301      	adds	r3, #1
 8001b96:	60bb      	str	r3, [r7, #8]
 8001b98:	4b0b      	ldr	r3, [pc, #44]	; (8001bc8 <ModBusParse+0x340>)
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	461a      	mov	r2, r3
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	dbec      	blt.n	8001b7e <ModBusParse+0x2f6>
        }
    }
    // Ok, we parsed buffer, clean up
    mb_buf_in_count=0;
 8001ba4:	4b0c      	ldr	r3, [pc, #48]	; (8001bd8 <ModBusParse+0x350>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	701a      	strb	r2, [r3, #0]
    mb_buf_out_count=0;
 8001baa:	4b07      	ldr	r3, [pc, #28]	; (8001bc8 <ModBusParse+0x340>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	701a      	strb	r2, [r3, #0]
 8001bb0:	e002      	b.n	8001bb8 <ModBusParse+0x330>
      return;
 8001bb2:	bf00      	nop
 8001bb4:	e000      	b.n	8001bb8 <ModBusParse+0x330>
      return;
 8001bb6:	bf00      	nop
}
 8001bb8:	3710      	adds	r7, #16
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	20004380 	.word	0x20004380
 8001bc4:	200041a8 	.word	0x200041a8
 8001bc8:	2000437d 	.word	0x2000437d
 8001bcc:	20004374 	.word	0x20004374
 8001bd0:	20004270 	.word	0x20004270
 8001bd4:	20004370 	.word	0x20004370
 8001bd8:	2000437c 	.word	0x2000437c

08001bdc <ModBus_SetRegister>:

// set value of register
void ModBus_SetRegister(uint8_t reg,uint16_t value)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	4603      	mov	r3, r0
 8001be4:	460a      	mov	r2, r1
 8001be6:	71fb      	strb	r3, [r7, #7]
 8001be8:	4613      	mov	r3, r2
 8001bea:	80bb      	strh	r3, [r7, #4]
  if(reg<ModBusRegisters)
 8001bec:	79fb      	ldrb	r3, [r7, #7]
 8001bee:	2b63      	cmp	r3, #99	; 0x63
 8001bf0:	d804      	bhi.n	8001bfc <ModBus_SetRegister+0x20>
  {
    mb_reg[reg]=value;
 8001bf2:	79fb      	ldrb	r3, [r7, #7]
 8001bf4:	4904      	ldr	r1, [pc, #16]	; (8001c08 <ModBus_SetRegister+0x2c>)
 8001bf6:	88ba      	ldrh	r2, [r7, #4]
 8001bf8:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
  }
}
 8001bfc:	bf00      	nop
 8001bfe:	370c      	adds	r7, #12
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr
 8001c08:	200041a8 	.word	0x200041a8

08001c0c <CRC16_OUT>:


// Calculate CRC for outcoming buffer
// and place it to end.
void CRC16_OUT(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b083      	sub	sp, #12
 8001c10:	af00      	add	r7, sp, #0
  uint16_t crc = 0xFFFF;
 8001c12:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c16:	80fb      	strh	r3, [r7, #6]
  uint16_t pos = 0;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	80bb      	strh	r3, [r7, #4]
  uint8_t i =0;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	70fb      	strb	r3, [r7, #3]
  uint8_t lo =0;
 8001c20:	2300      	movs	r3, #0
 8001c22:	70bb      	strb	r3, [r7, #2]
  uint8_t hi =0;
 8001c24:	2300      	movs	r3, #0
 8001c26:	707b      	strb	r3, [r7, #1]
  
  for (pos = 0; pos < mb_buf_out_count; pos++)
 8001c28:	2300      	movs	r3, #0
 8001c2a:	80bb      	strh	r3, [r7, #4]
 8001c2c:	e025      	b.n	8001c7a <CRC16_OUT+0x6e>
  {
    crc ^= mb_buf_out[pos];
 8001c2e:	88bb      	ldrh	r3, [r7, #4]
 8001c30:	4a25      	ldr	r2, [pc, #148]	; (8001cc8 <CRC16_OUT+0xbc>)
 8001c32:	5cd3      	ldrb	r3, [r2, r3]
 8001c34:	b29a      	uxth	r2, r3
 8001c36:	88fb      	ldrh	r3, [r7, #6]
 8001c38:	4053      	eors	r3, r2
 8001c3a:	80fb      	strh	r3, [r7, #6]

  for (i = 8; i != 0; i--)
 8001c3c:	2308      	movs	r3, #8
 8001c3e:	70fb      	strb	r3, [r7, #3]
 8001c40:	e015      	b.n	8001c6e <CRC16_OUT+0x62>
    {
    if ((crc & 0x0001) != 0)
 8001c42:	88fb      	ldrh	r3, [r7, #6]
 8001c44:	f003 0301 	and.w	r3, r3, #1
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d00a      	beq.n	8001c62 <CRC16_OUT+0x56>
      {
      crc >>= 1;
 8001c4c:	88fb      	ldrh	r3, [r7, #6]
 8001c4e:	085b      	lsrs	r3, r3, #1
 8001c50:	80fb      	strh	r3, [r7, #6]
      crc ^= 0xA001;
 8001c52:	88fb      	ldrh	r3, [r7, #6]
 8001c54:	f483 43bf 	eor.w	r3, r3, #24448	; 0x5f80
 8001c58:	f083 037e 	eor.w	r3, r3, #126	; 0x7e
 8001c5c:	43db      	mvns	r3, r3
 8001c5e:	80fb      	strh	r3, [r7, #6]
 8001c60:	e002      	b.n	8001c68 <CRC16_OUT+0x5c>
      }
    else
      crc >>= 1;
 8001c62:	88fb      	ldrh	r3, [r7, #6]
 8001c64:	085b      	lsrs	r3, r3, #1
 8001c66:	80fb      	strh	r3, [r7, #6]
  for (i = 8; i != 0; i--)
 8001c68:	78fb      	ldrb	r3, [r7, #3]
 8001c6a:	3b01      	subs	r3, #1
 8001c6c:	70fb      	strb	r3, [r7, #3]
 8001c6e:	78fb      	ldrb	r3, [r7, #3]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d1e6      	bne.n	8001c42 <CRC16_OUT+0x36>
  for (pos = 0; pos < mb_buf_out_count; pos++)
 8001c74:	88bb      	ldrh	r3, [r7, #4]
 8001c76:	3301      	adds	r3, #1
 8001c78:	80bb      	strh	r3, [r7, #4]
 8001c7a:	4b14      	ldr	r3, [pc, #80]	; (8001ccc <CRC16_OUT+0xc0>)
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	b29b      	uxth	r3, r3
 8001c80:	88ba      	ldrh	r2, [r7, #4]
 8001c82:	429a      	cmp	r2, r3
 8001c84:	d3d3      	bcc.n	8001c2e <CRC16_OUT+0x22>
    }
  }
  lo = crc & 0xFF;
 8001c86:	88fb      	ldrh	r3, [r7, #6]
 8001c88:	70bb      	strb	r3, [r7, #2]
  hi = ( crc >> 8 ) & 0xFF;
 8001c8a:	88fb      	ldrh	r3, [r7, #6]
 8001c8c:	0a1b      	lsrs	r3, r3, #8
 8001c8e:	b29b      	uxth	r3, r3
 8001c90:	707b      	strb	r3, [r7, #1]
  
  mb_buf_out[mb_buf_out_count++] = lo;
 8001c92:	4b0e      	ldr	r3, [pc, #56]	; (8001ccc <CRC16_OUT+0xc0>)
 8001c94:	781b      	ldrb	r3, [r3, #0]
 8001c96:	1c5a      	adds	r2, r3, #1
 8001c98:	b2d1      	uxtb	r1, r2
 8001c9a:	4a0c      	ldr	r2, [pc, #48]	; (8001ccc <CRC16_OUT+0xc0>)
 8001c9c:	7011      	strb	r1, [r2, #0]
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	4a09      	ldr	r2, [pc, #36]	; (8001cc8 <CRC16_OUT+0xbc>)
 8001ca2:	78bb      	ldrb	r3, [r7, #2]
 8001ca4:	5453      	strb	r3, [r2, r1]
  mb_buf_out[mb_buf_out_count++] = hi;
 8001ca6:	4b09      	ldr	r3, [pc, #36]	; (8001ccc <CRC16_OUT+0xc0>)
 8001ca8:	781b      	ldrb	r3, [r3, #0]
 8001caa:	1c5a      	adds	r2, r3, #1
 8001cac:	b2d1      	uxtb	r1, r2
 8001cae:	4a07      	ldr	r2, [pc, #28]	; (8001ccc <CRC16_OUT+0xc0>)
 8001cb0:	7011      	strb	r1, [r2, #0]
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	4a04      	ldr	r2, [pc, #16]	; (8001cc8 <CRC16_OUT+0xbc>)
 8001cb6:	787b      	ldrb	r3, [r7, #1]
 8001cb8:	5453      	strb	r3, [r2, r1]
}
 8001cba:	bf00      	nop
 8001cbc:	370c      	adds	r7, #12
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr
 8001cc6:	bf00      	nop
 8001cc8:	20004270 	.word	0x20004270
 8001ccc:	2000437d 	.word	0x2000437d

08001cd0 <CRC16_IN>:

// Calculate CRC fro incoming buffer
// Return 0 - if CRC is correct, overwise return 0 
uint8_t CRC16_IN(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b083      	sub	sp, #12
 8001cd4:	af00      	add	r7, sp, #0
  uint16_t crc = 0xFFFF;
 8001cd6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001cda:	80fb      	strh	r3, [r7, #6]
  uint16_t pos = 0;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	80bb      	strh	r3, [r7, #4]
  uint8_t i =0;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	70fb      	strb	r3, [r7, #3]
  uint8_t lo =0;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	70bb      	strb	r3, [r7, #2]
  uint8_t hi =0;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	707b      	strb	r3, [r7, #1]
  
  for (pos = 0; pos < mb_buf_in_count-2; pos++)
 8001cec:	2300      	movs	r3, #0
 8001cee:	80bb      	strh	r3, [r7, #4]
 8001cf0:	e025      	b.n	8001d3e <CRC16_IN+0x6e>
  {
    crc ^= mb_buf_in[pos];
 8001cf2:	88bb      	ldrh	r3, [r7, #4]
 8001cf4:	4a24      	ldr	r2, [pc, #144]	; (8001d88 <CRC16_IN+0xb8>)
 8001cf6:	5cd3      	ldrb	r3, [r2, r3]
 8001cf8:	b29a      	uxth	r2, r3
 8001cfa:	88fb      	ldrh	r3, [r7, #6]
 8001cfc:	4053      	eors	r3, r2
 8001cfe:	80fb      	strh	r3, [r7, #6]

  for (i = 8; i != 0; i--)
 8001d00:	2308      	movs	r3, #8
 8001d02:	70fb      	strb	r3, [r7, #3]
 8001d04:	e015      	b.n	8001d32 <CRC16_IN+0x62>
    {
    if ((crc & 0x0001) != 0)
 8001d06:	88fb      	ldrh	r3, [r7, #6]
 8001d08:	f003 0301 	and.w	r3, r3, #1
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d00a      	beq.n	8001d26 <CRC16_IN+0x56>
      {
      crc >>= 1;
 8001d10:	88fb      	ldrh	r3, [r7, #6]
 8001d12:	085b      	lsrs	r3, r3, #1
 8001d14:	80fb      	strh	r3, [r7, #6]
      crc ^= 0xA001;
 8001d16:	88fb      	ldrh	r3, [r7, #6]
 8001d18:	f483 43bf 	eor.w	r3, r3, #24448	; 0x5f80
 8001d1c:	f083 037e 	eor.w	r3, r3, #126	; 0x7e
 8001d20:	43db      	mvns	r3, r3
 8001d22:	80fb      	strh	r3, [r7, #6]
 8001d24:	e002      	b.n	8001d2c <CRC16_IN+0x5c>
      }
    else
      crc >>= 1;
 8001d26:	88fb      	ldrh	r3, [r7, #6]
 8001d28:	085b      	lsrs	r3, r3, #1
 8001d2a:	80fb      	strh	r3, [r7, #6]
  for (i = 8; i != 0; i--)
 8001d2c:	78fb      	ldrb	r3, [r7, #3]
 8001d2e:	3b01      	subs	r3, #1
 8001d30:	70fb      	strb	r3, [r7, #3]
 8001d32:	78fb      	ldrb	r3, [r7, #3]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d1e6      	bne.n	8001d06 <CRC16_IN+0x36>
  for (pos = 0; pos < mb_buf_in_count-2; pos++)
 8001d38:	88bb      	ldrh	r3, [r7, #4]
 8001d3a:	3301      	adds	r3, #1
 8001d3c:	80bb      	strh	r3, [r7, #4]
 8001d3e:	88ba      	ldrh	r2, [r7, #4]
 8001d40:	4b12      	ldr	r3, [pc, #72]	; (8001d8c <CRC16_IN+0xbc>)
 8001d42:	781b      	ldrb	r3, [r3, #0]
 8001d44:	3b02      	subs	r3, #2
 8001d46:	429a      	cmp	r2, r3
 8001d48:	dbd3      	blt.n	8001cf2 <CRC16_IN+0x22>
    }
  }
  lo = crc & 0xFF;
 8001d4a:	88fb      	ldrh	r3, [r7, #6]
 8001d4c:	70bb      	strb	r3, [r7, #2]
  hi = ( crc >> 8 ) & 0xFF;
 8001d4e:	88fb      	ldrh	r3, [r7, #6]
 8001d50:	0a1b      	lsrs	r3, r3, #8
 8001d52:	b29b      	uxth	r3, r3
 8001d54:	707b      	strb	r3, [r7, #1]
  if( (mb_buf_in[mb_buf_in_count-2] == lo) && 
 8001d56:	4b0d      	ldr	r3, [pc, #52]	; (8001d8c <CRC16_IN+0xbc>)
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	3b02      	subs	r3, #2
 8001d5c:	4a0a      	ldr	r2, [pc, #40]	; (8001d88 <CRC16_IN+0xb8>)
 8001d5e:	5cd3      	ldrb	r3, [r2, r3]
 8001d60:	78ba      	ldrb	r2, [r7, #2]
 8001d62:	429a      	cmp	r2, r3
 8001d64:	d109      	bne.n	8001d7a <CRC16_IN+0xaa>
       (mb_buf_in[mb_buf_in_count-1] == hi) )
 8001d66:	4b09      	ldr	r3, [pc, #36]	; (8001d8c <CRC16_IN+0xbc>)
 8001d68:	781b      	ldrb	r3, [r3, #0]
 8001d6a:	3b01      	subs	r3, #1
 8001d6c:	4a06      	ldr	r2, [pc, #24]	; (8001d88 <CRC16_IN+0xb8>)
 8001d6e:	5cd3      	ldrb	r3, [r2, r3]
  if( (mb_buf_in[mb_buf_in_count-2] == lo) && 
 8001d70:	787a      	ldrb	r2, [r7, #1]
 8001d72:	429a      	cmp	r2, r3
 8001d74:	d101      	bne.n	8001d7a <CRC16_IN+0xaa>
    {
      return 0;
 8001d76:	2300      	movs	r3, #0
 8001d78:	e000      	b.n	8001d7c <CRC16_IN+0xac>
    }
  return 1;
 8001d7a:	2301      	movs	r3, #1
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	370c      	adds	r7, #12
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr
 8001d88:	20004380 	.word	0x20004380
 8001d8c:	2000437c 	.word	0x2000437c

08001d90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d96:	2300      	movs	r3, #0
 8001d98:	607b      	str	r3, [r7, #4]
 8001d9a:	4b12      	ldr	r3, [pc, #72]	; (8001de4 <HAL_MspInit+0x54>)
 8001d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d9e:	4a11      	ldr	r2, [pc, #68]	; (8001de4 <HAL_MspInit+0x54>)
 8001da0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001da4:	6453      	str	r3, [r2, #68]	; 0x44
 8001da6:	4b0f      	ldr	r3, [pc, #60]	; (8001de4 <HAL_MspInit+0x54>)
 8001da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001daa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dae:	607b      	str	r3, [r7, #4]
 8001db0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001db2:	2300      	movs	r3, #0
 8001db4:	603b      	str	r3, [r7, #0]
 8001db6:	4b0b      	ldr	r3, [pc, #44]	; (8001de4 <HAL_MspInit+0x54>)
 8001db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dba:	4a0a      	ldr	r2, [pc, #40]	; (8001de4 <HAL_MspInit+0x54>)
 8001dbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dc0:	6413      	str	r3, [r2, #64]	; 0x40
 8001dc2:	4b08      	ldr	r3, [pc, #32]	; (8001de4 <HAL_MspInit+0x54>)
 8001dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dca:	603b      	str	r3, [r7, #0]
 8001dcc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001dce:	2200      	movs	r2, #0
 8001dd0:	210f      	movs	r1, #15
 8001dd2:	f06f 0001 	mvn.w	r0, #1
 8001dd6:	f000 fabf 	bl	8002358 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dda:	bf00      	nop
 8001ddc:	3708      	adds	r7, #8
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	40023800 	.word	0x40023800

08001de8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b08a      	sub	sp, #40	; 0x28
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001df0:	f107 0314 	add.w	r3, r7, #20
 8001df4:	2200      	movs	r2, #0
 8001df6:	601a      	str	r2, [r3, #0]
 8001df8:	605a      	str	r2, [r3, #4]
 8001dfa:	609a      	str	r2, [r3, #8]
 8001dfc:	60da      	str	r2, [r3, #12]
 8001dfe:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a19      	ldr	r2, [pc, #100]	; (8001e6c <HAL_I2C_MspInit+0x84>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d12b      	bne.n	8001e62 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	613b      	str	r3, [r7, #16]
 8001e0e:	4b18      	ldr	r3, [pc, #96]	; (8001e70 <HAL_I2C_MspInit+0x88>)
 8001e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e12:	4a17      	ldr	r2, [pc, #92]	; (8001e70 <HAL_I2C_MspInit+0x88>)
 8001e14:	f043 0302 	orr.w	r3, r3, #2
 8001e18:	6313      	str	r3, [r2, #48]	; 0x30
 8001e1a:	4b15      	ldr	r3, [pc, #84]	; (8001e70 <HAL_I2C_MspInit+0x88>)
 8001e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1e:	f003 0302 	and.w	r3, r3, #2
 8001e22:	613b      	str	r3, [r7, #16]
 8001e24:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001e26:	23c0      	movs	r3, #192	; 0xc0
 8001e28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e2a:	2312      	movs	r3, #18
 8001e2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e32:	2303      	movs	r3, #3
 8001e34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e36:	2304      	movs	r3, #4
 8001e38:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e3a:	f107 0314 	add.w	r3, r7, #20
 8001e3e:	4619      	mov	r1, r3
 8001e40:	480c      	ldr	r0, [pc, #48]	; (8001e74 <HAL_I2C_MspInit+0x8c>)
 8001e42:	f000 fe43 	bl	8002acc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e46:	2300      	movs	r3, #0
 8001e48:	60fb      	str	r3, [r7, #12]
 8001e4a:	4b09      	ldr	r3, [pc, #36]	; (8001e70 <HAL_I2C_MspInit+0x88>)
 8001e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4e:	4a08      	ldr	r2, [pc, #32]	; (8001e70 <HAL_I2C_MspInit+0x88>)
 8001e50:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e54:	6413      	str	r3, [r2, #64]	; 0x40
 8001e56:	4b06      	ldr	r3, [pc, #24]	; (8001e70 <HAL_I2C_MspInit+0x88>)
 8001e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e5e:	60fb      	str	r3, [r7, #12]
 8001e60:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001e62:	bf00      	nop
 8001e64:	3728      	adds	r7, #40	; 0x28
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	40005400 	.word	0x40005400
 8001e70:	40023800 	.word	0x40023800
 8001e74:	40020400 	.word	0x40020400

08001e78 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b08a      	sub	sp, #40	; 0x28
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e80:	f107 0314 	add.w	r3, r7, #20
 8001e84:	2200      	movs	r2, #0
 8001e86:	601a      	str	r2, [r3, #0]
 8001e88:	605a      	str	r2, [r3, #4]
 8001e8a:	609a      	str	r2, [r3, #8]
 8001e8c:	60da      	str	r2, [r3, #12]
 8001e8e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a34      	ldr	r2, [pc, #208]	; (8001f68 <HAL_UART_MspInit+0xf0>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d162      	bne.n	8001f60 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	613b      	str	r3, [r7, #16]
 8001e9e:	4b33      	ldr	r3, [pc, #204]	; (8001f6c <HAL_UART_MspInit+0xf4>)
 8001ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ea2:	4a32      	ldr	r2, [pc, #200]	; (8001f6c <HAL_UART_MspInit+0xf4>)
 8001ea4:	f043 0320 	orr.w	r3, r3, #32
 8001ea8:	6453      	str	r3, [r2, #68]	; 0x44
 8001eaa:	4b30      	ldr	r3, [pc, #192]	; (8001f6c <HAL_UART_MspInit+0xf4>)
 8001eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eae:	f003 0320 	and.w	r3, r3, #32
 8001eb2:	613b      	str	r3, [r7, #16]
 8001eb4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	60fb      	str	r3, [r7, #12]
 8001eba:	4b2c      	ldr	r3, [pc, #176]	; (8001f6c <HAL_UART_MspInit+0xf4>)
 8001ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ebe:	4a2b      	ldr	r2, [pc, #172]	; (8001f6c <HAL_UART_MspInit+0xf4>)
 8001ec0:	f043 0304 	orr.w	r3, r3, #4
 8001ec4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ec6:	4b29      	ldr	r3, [pc, #164]	; (8001f6c <HAL_UART_MspInit+0xf4>)
 8001ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eca:	f003 0304 	and.w	r3, r3, #4
 8001ece:	60fb      	str	r3, [r7, #12]
 8001ed0:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration    
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001ed2:	23c0      	movs	r3, #192	; 0xc0
 8001ed4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed6:	2302      	movs	r3, #2
 8001ed8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eda:	2300      	movs	r3, #0
 8001edc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001ee2:	2308      	movs	r3, #8
 8001ee4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ee6:	f107 0314 	add.w	r3, r7, #20
 8001eea:	4619      	mov	r1, r3
 8001eec:	4820      	ldr	r0, [pc, #128]	; (8001f70 <HAL_UART_MspInit+0xf8>)
 8001eee:	f000 fded 	bl	8002acc <HAL_GPIO_Init>

    /* USART6 DMA Init */
    /* USART6_RX Init */
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8001ef2:	4b20      	ldr	r3, [pc, #128]	; (8001f74 <HAL_UART_MspInit+0xfc>)
 8001ef4:	4a20      	ldr	r2, [pc, #128]	; (8001f78 <HAL_UART_MspInit+0x100>)
 8001ef6:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8001ef8:	4b1e      	ldr	r3, [pc, #120]	; (8001f74 <HAL_UART_MspInit+0xfc>)
 8001efa:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8001efe:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f00:	4b1c      	ldr	r3, [pc, #112]	; (8001f74 <HAL_UART_MspInit+0xfc>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f06:	4b1b      	ldr	r3, [pc, #108]	; (8001f74 <HAL_UART_MspInit+0xfc>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001f0c:	4b19      	ldr	r3, [pc, #100]	; (8001f74 <HAL_UART_MspInit+0xfc>)
 8001f0e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f12:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f14:	4b17      	ldr	r3, [pc, #92]	; (8001f74 <HAL_UART_MspInit+0xfc>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f1a:	4b16      	ldr	r3, [pc, #88]	; (8001f74 <HAL_UART_MspInit+0xfc>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 8001f20:	4b14      	ldr	r3, [pc, #80]	; (8001f74 <HAL_UART_MspInit+0xfc>)
 8001f22:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f26:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001f28:	4b12      	ldr	r3, [pc, #72]	; (8001f74 <HAL_UART_MspInit+0xfc>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f2e:	4b11      	ldr	r3, [pc, #68]	; (8001f74 <HAL_UART_MspInit+0xfc>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8001f34:	480f      	ldr	r0, [pc, #60]	; (8001f74 <HAL_UART_MspInit+0xfc>)
 8001f36:	f000 fa39 	bl	80023ac <HAL_DMA_Init>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d001      	beq.n	8001f44 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8001f40:	f7ff fbf2 	bl	8001728 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	4a0b      	ldr	r2, [pc, #44]	; (8001f74 <HAL_UART_MspInit+0xfc>)
 8001f48:	635a      	str	r2, [r3, #52]	; 0x34
 8001f4a:	4a0a      	ldr	r2, [pc, #40]	; (8001f74 <HAL_UART_MspInit+0xfc>)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8001f50:	2200      	movs	r2, #0
 8001f52:	2105      	movs	r1, #5
 8001f54:	2047      	movs	r0, #71	; 0x47
 8001f56:	f000 f9ff 	bl	8002358 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001f5a:	2047      	movs	r0, #71	; 0x47
 8001f5c:	f000 fa18 	bl	8002390 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001f60:	bf00      	nop
 8001f62:	3728      	adds	r7, #40	; 0x28
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	40011400 	.word	0x40011400
 8001f6c:	40023800 	.word	0x40023800
 8001f70:	40020800 	.word	0x40020800
 8001f74:	2000405c 	.word	0x2000405c
 8001f78:	40026428 	.word	0x40026428

08001f7c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b08c      	sub	sp, #48	; 0x30
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001f84:	2300      	movs	r3, #0
 8001f86:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM3 IRQ priority */
  HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority ,0); 
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	6879      	ldr	r1, [r7, #4]
 8001f90:	201d      	movs	r0, #29
 8001f92:	f000 f9e1 	bl	8002358 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM3 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM3_IRQn); 
 8001f96:	201d      	movs	r0, #29
 8001f98:	f000 f9fa 	bl	8002390 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	60fb      	str	r3, [r7, #12]
 8001fa0:	4b1f      	ldr	r3, [pc, #124]	; (8002020 <HAL_InitTick+0xa4>)
 8001fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa4:	4a1e      	ldr	r2, [pc, #120]	; (8002020 <HAL_InitTick+0xa4>)
 8001fa6:	f043 0302 	orr.w	r3, r3, #2
 8001faa:	6413      	str	r3, [r2, #64]	; 0x40
 8001fac:	4b1c      	ldr	r3, [pc, #112]	; (8002020 <HAL_InitTick+0xa4>)
 8001fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb0:	f003 0302 	and.w	r3, r3, #2
 8001fb4:	60fb      	str	r3, [r7, #12]
 8001fb6:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001fb8:	f107 0210 	add.w	r2, r7, #16
 8001fbc:	f107 0314 	add.w	r3, r7, #20
 8001fc0:	4611      	mov	r1, r2
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f002 faf8 	bl	80045b8 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM3 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001fc8:	f002 face 	bl	8004568 <HAL_RCC_GetPCLK1Freq>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	005b      	lsls	r3, r3, #1
 8001fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fd4:	4a13      	ldr	r2, [pc, #76]	; (8002024 <HAL_InitTick+0xa8>)
 8001fd6:	fba2 2303 	umull	r2, r3, r2, r3
 8001fda:	0c9b      	lsrs	r3, r3, #18
 8001fdc:	3b01      	subs	r3, #1
 8001fde:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8001fe0:	4b11      	ldr	r3, [pc, #68]	; (8002028 <HAL_InitTick+0xac>)
 8001fe2:	4a12      	ldr	r2, [pc, #72]	; (800202c <HAL_InitTick+0xb0>)
 8001fe4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000 / 1000) - 1;
 8001fe6:	4b10      	ldr	r3, [pc, #64]	; (8002028 <HAL_InitTick+0xac>)
 8001fe8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001fec:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8001fee:	4a0e      	ldr	r2, [pc, #56]	; (8002028 <HAL_InitTick+0xac>)
 8001ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ff2:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8001ff4:	4b0c      	ldr	r3, [pc, #48]	; (8002028 <HAL_InitTick+0xac>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ffa:	4b0b      	ldr	r3, [pc, #44]	; (8002028 <HAL_InitTick+0xac>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 8002000:	4809      	ldr	r0, [pc, #36]	; (8002028 <HAL_InitTick+0xac>)
 8002002:	f002 fb0b 	bl	800461c <HAL_TIM_Base_Init>
 8002006:	4603      	mov	r3, r0
 8002008:	2b00      	cmp	r3, #0
 800200a:	d104      	bne.n	8002016 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim3);
 800200c:	4806      	ldr	r0, [pc, #24]	; (8002028 <HAL_InitTick+0xac>)
 800200e:	f002 fb3a 	bl	8004686 <HAL_TIM_Base_Start_IT>
 8002012:	4603      	mov	r3, r0
 8002014:	e000      	b.n	8002018 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
}
 8002018:	4618      	mov	r0, r3
 800201a:	3730      	adds	r7, #48	; 0x30
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}
 8002020:	40023800 	.word	0x40023800
 8002024:	431bde83 	.word	0x431bde83
 8002028:	20004480 	.word	0x20004480
 800202c:	40000400 	.word	0x40000400

08002030 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002030:	b480      	push	{r7}
 8002032:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002034:	bf00      	nop
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr

0800203e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800203e:	b480      	push	{r7}
 8002040:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002042:	e7fe      	b.n	8002042 <HardFault_Handler+0x4>

08002044 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002048:	e7fe      	b.n	8002048 <MemManage_Handler+0x4>

0800204a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800204a:	b480      	push	{r7}
 800204c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800204e:	e7fe      	b.n	800204e <BusFault_Handler+0x4>

08002050 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002054:	e7fe      	b.n	8002054 <UsageFault_Handler+0x4>

08002056 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002056:	b480      	push	{r7}
 8002058:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800205a:	bf00      	nop
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr

08002064 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002068:	4802      	ldr	r0, [pc, #8]	; (8002074 <TIM3_IRQHandler+0x10>)
 800206a:	f002 fb30 	bl	80046ce <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800206e:	bf00      	nop
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	20004480 	.word	0x20004480

08002078 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 800207c:	4802      	ldr	r0, [pc, #8]	; (8002088 <DMA2_Stream1_IRQHandler+0x10>)
 800207e:	f000 fabd 	bl	80025fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8002082:	bf00      	nop
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	2000405c 	.word	0x2000405c

0800208c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8002090:	4802      	ldr	r0, [pc, #8]	; (800209c <USART6_IRQHandler+0x10>)
 8002092:	f002 fe67 	bl	8004d64 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8002096:	bf00      	nop
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	20004150 	.word	0x20004150

080020a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020a0:	b480      	push	{r7}
 80020a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020a4:	4b08      	ldr	r3, [pc, #32]	; (80020c8 <SystemInit+0x28>)
 80020a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020aa:	4a07      	ldr	r2, [pc, #28]	; (80020c8 <SystemInit+0x28>)
 80020ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80020b4:	4b04      	ldr	r3, [pc, #16]	; (80020c8 <SystemInit+0x28>)
 80020b6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80020ba:	609a      	str	r2, [r3, #8]
#endif
}
 80020bc:	bf00      	nop
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr
 80020c6:	bf00      	nop
 80020c8:	e000ed00 	.word	0xe000ed00

080020cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80020cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002104 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80020d0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80020d2:	e003      	b.n	80020dc <LoopCopyDataInit>

080020d4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80020d4:	4b0c      	ldr	r3, [pc, #48]	; (8002108 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80020d6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80020d8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80020da:	3104      	adds	r1, #4

080020dc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80020dc:	480b      	ldr	r0, [pc, #44]	; (800210c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80020de:	4b0c      	ldr	r3, [pc, #48]	; (8002110 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80020e0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80020e2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80020e4:	d3f6      	bcc.n	80020d4 <CopyDataInit>
  ldr  r2, =_sbss
 80020e6:	4a0b      	ldr	r2, [pc, #44]	; (8002114 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80020e8:	e002      	b.n	80020f0 <LoopFillZerobss>

080020ea <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80020ea:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80020ec:	f842 3b04 	str.w	r3, [r2], #4

080020f0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80020f0:	4b09      	ldr	r3, [pc, #36]	; (8002118 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80020f2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80020f4:	d3f9      	bcc.n	80020ea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80020f6:	f7ff ffd3 	bl	80020a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80020fa:	f005 ff0d 	bl	8007f18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020fe:	f7fe ff93 	bl	8001028 <main>
  bx  lr    
 8002102:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002104:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002108:	08009188 	.word	0x08009188
  ldr  r0, =_sdata
 800210c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002110:	20000078 	.word	0x20000078
  ldr  r2, =_sbss
 8002114:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 8002118:	200044c4 	.word	0x200044c4

0800211c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800211c:	e7fe      	b.n	800211c <ADC_IRQHandler>
	...

08002120 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002124:	4b0e      	ldr	r3, [pc, #56]	; (8002160 <HAL_Init+0x40>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a0d      	ldr	r2, [pc, #52]	; (8002160 <HAL_Init+0x40>)
 800212a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800212e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002130:	4b0b      	ldr	r3, [pc, #44]	; (8002160 <HAL_Init+0x40>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a0a      	ldr	r2, [pc, #40]	; (8002160 <HAL_Init+0x40>)
 8002136:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800213a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800213c:	4b08      	ldr	r3, [pc, #32]	; (8002160 <HAL_Init+0x40>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a07      	ldr	r2, [pc, #28]	; (8002160 <HAL_Init+0x40>)
 8002142:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002146:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002148:	2003      	movs	r0, #3
 800214a:	f000 f8fa 	bl	8002342 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800214e:	2000      	movs	r0, #0
 8002150:	f7ff ff14 	bl	8001f7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002154:	f7ff fe1c 	bl	8001d90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002158:	2300      	movs	r3, #0
}
 800215a:	4618      	mov	r0, r3
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	40023c00 	.word	0x40023c00

08002164 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002164:	b480      	push	{r7}
 8002166:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002168:	4b06      	ldr	r3, [pc, #24]	; (8002184 <HAL_IncTick+0x20>)
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	461a      	mov	r2, r3
 800216e:	4b06      	ldr	r3, [pc, #24]	; (8002188 <HAL_IncTick+0x24>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4413      	add	r3, r2
 8002174:	4a04      	ldr	r2, [pc, #16]	; (8002188 <HAL_IncTick+0x24>)
 8002176:	6013      	str	r3, [r2, #0]
}
 8002178:	bf00      	nop
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr
 8002182:	bf00      	nop
 8002184:	20000008 	.word	0x20000008
 8002188:	200044c0 	.word	0x200044c0

0800218c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800218c:	b480      	push	{r7}
 800218e:	af00      	add	r7, sp, #0
  return uwTick;
 8002190:	4b03      	ldr	r3, [pc, #12]	; (80021a0 <HAL_GetTick+0x14>)
 8002192:	681b      	ldr	r3, [r3, #0]
}
 8002194:	4618      	mov	r0, r3
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr
 800219e:	bf00      	nop
 80021a0:	200044c0 	.word	0x200044c0

080021a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b084      	sub	sp, #16
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021ac:	f7ff ffee 	bl	800218c <HAL_GetTick>
 80021b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021bc:	d005      	beq.n	80021ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021be:	4b09      	ldr	r3, [pc, #36]	; (80021e4 <HAL_Delay+0x40>)
 80021c0:	781b      	ldrb	r3, [r3, #0]
 80021c2:	461a      	mov	r2, r3
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	4413      	add	r3, r2
 80021c8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80021ca:	bf00      	nop
 80021cc:	f7ff ffde 	bl	800218c <HAL_GetTick>
 80021d0:	4602      	mov	r2, r0
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	68fa      	ldr	r2, [r7, #12]
 80021d8:	429a      	cmp	r2, r3
 80021da:	d8f7      	bhi.n	80021cc <HAL_Delay+0x28>
  {
  }
}
 80021dc:	bf00      	nop
 80021de:	3710      	adds	r7, #16
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	20000008 	.word	0x20000008

080021e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b085      	sub	sp, #20
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	f003 0307 	and.w	r3, r3, #7
 80021f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021f8:	4b0c      	ldr	r3, [pc, #48]	; (800222c <__NVIC_SetPriorityGrouping+0x44>)
 80021fa:	68db      	ldr	r3, [r3, #12]
 80021fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021fe:	68ba      	ldr	r2, [r7, #8]
 8002200:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002204:	4013      	ands	r3, r2
 8002206:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002210:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002214:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002218:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800221a:	4a04      	ldr	r2, [pc, #16]	; (800222c <__NVIC_SetPriorityGrouping+0x44>)
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	60d3      	str	r3, [r2, #12]
}
 8002220:	bf00      	nop
 8002222:	3714      	adds	r7, #20
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr
 800222c:	e000ed00 	.word	0xe000ed00

08002230 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002230:	b480      	push	{r7}
 8002232:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002234:	4b04      	ldr	r3, [pc, #16]	; (8002248 <__NVIC_GetPriorityGrouping+0x18>)
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	0a1b      	lsrs	r3, r3, #8
 800223a:	f003 0307 	and.w	r3, r3, #7
}
 800223e:	4618      	mov	r0, r3
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr
 8002248:	e000ed00 	.word	0xe000ed00

0800224c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800224c:	b480      	push	{r7}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
 8002252:	4603      	mov	r3, r0
 8002254:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002256:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800225a:	2b00      	cmp	r3, #0
 800225c:	db0b      	blt.n	8002276 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800225e:	79fb      	ldrb	r3, [r7, #7]
 8002260:	f003 021f 	and.w	r2, r3, #31
 8002264:	4907      	ldr	r1, [pc, #28]	; (8002284 <__NVIC_EnableIRQ+0x38>)
 8002266:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800226a:	095b      	lsrs	r3, r3, #5
 800226c:	2001      	movs	r0, #1
 800226e:	fa00 f202 	lsl.w	r2, r0, r2
 8002272:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002276:	bf00      	nop
 8002278:	370c      	adds	r7, #12
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr
 8002282:	bf00      	nop
 8002284:	e000e100 	.word	0xe000e100

08002288 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002288:	b480      	push	{r7}
 800228a:	b083      	sub	sp, #12
 800228c:	af00      	add	r7, sp, #0
 800228e:	4603      	mov	r3, r0
 8002290:	6039      	str	r1, [r7, #0]
 8002292:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002294:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002298:	2b00      	cmp	r3, #0
 800229a:	db0a      	blt.n	80022b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	b2da      	uxtb	r2, r3
 80022a0:	490c      	ldr	r1, [pc, #48]	; (80022d4 <__NVIC_SetPriority+0x4c>)
 80022a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022a6:	0112      	lsls	r2, r2, #4
 80022a8:	b2d2      	uxtb	r2, r2
 80022aa:	440b      	add	r3, r1
 80022ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022b0:	e00a      	b.n	80022c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	b2da      	uxtb	r2, r3
 80022b6:	4908      	ldr	r1, [pc, #32]	; (80022d8 <__NVIC_SetPriority+0x50>)
 80022b8:	79fb      	ldrb	r3, [r7, #7]
 80022ba:	f003 030f 	and.w	r3, r3, #15
 80022be:	3b04      	subs	r3, #4
 80022c0:	0112      	lsls	r2, r2, #4
 80022c2:	b2d2      	uxtb	r2, r2
 80022c4:	440b      	add	r3, r1
 80022c6:	761a      	strb	r2, [r3, #24]
}
 80022c8:	bf00      	nop
 80022ca:	370c      	adds	r7, #12
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr
 80022d4:	e000e100 	.word	0xe000e100
 80022d8:	e000ed00 	.word	0xe000ed00

080022dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022dc:	b480      	push	{r7}
 80022de:	b089      	sub	sp, #36	; 0x24
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	60f8      	str	r0, [r7, #12]
 80022e4:	60b9      	str	r1, [r7, #8]
 80022e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	f003 0307 	and.w	r3, r3, #7
 80022ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022f0:	69fb      	ldr	r3, [r7, #28]
 80022f2:	f1c3 0307 	rsb	r3, r3, #7
 80022f6:	2b04      	cmp	r3, #4
 80022f8:	bf28      	it	cs
 80022fa:	2304      	movcs	r3, #4
 80022fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	3304      	adds	r3, #4
 8002302:	2b06      	cmp	r3, #6
 8002304:	d902      	bls.n	800230c <NVIC_EncodePriority+0x30>
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	3b03      	subs	r3, #3
 800230a:	e000      	b.n	800230e <NVIC_EncodePriority+0x32>
 800230c:	2300      	movs	r3, #0
 800230e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002310:	f04f 32ff 	mov.w	r2, #4294967295
 8002314:	69bb      	ldr	r3, [r7, #24]
 8002316:	fa02 f303 	lsl.w	r3, r2, r3
 800231a:	43da      	mvns	r2, r3
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	401a      	ands	r2, r3
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002324:	f04f 31ff 	mov.w	r1, #4294967295
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	fa01 f303 	lsl.w	r3, r1, r3
 800232e:	43d9      	mvns	r1, r3
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002334:	4313      	orrs	r3, r2
         );
}
 8002336:	4618      	mov	r0, r3
 8002338:	3724      	adds	r7, #36	; 0x24
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr

08002342 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002342:	b580      	push	{r7, lr}
 8002344:	b082      	sub	sp, #8
 8002346:	af00      	add	r7, sp, #0
 8002348:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800234a:	6878      	ldr	r0, [r7, #4]
 800234c:	f7ff ff4c 	bl	80021e8 <__NVIC_SetPriorityGrouping>
}
 8002350:	bf00      	nop
 8002352:	3708      	adds	r7, #8
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}

08002358 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002358:	b580      	push	{r7, lr}
 800235a:	b086      	sub	sp, #24
 800235c:	af00      	add	r7, sp, #0
 800235e:	4603      	mov	r3, r0
 8002360:	60b9      	str	r1, [r7, #8]
 8002362:	607a      	str	r2, [r7, #4]
 8002364:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002366:	2300      	movs	r3, #0
 8002368:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800236a:	f7ff ff61 	bl	8002230 <__NVIC_GetPriorityGrouping>
 800236e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002370:	687a      	ldr	r2, [r7, #4]
 8002372:	68b9      	ldr	r1, [r7, #8]
 8002374:	6978      	ldr	r0, [r7, #20]
 8002376:	f7ff ffb1 	bl	80022dc <NVIC_EncodePriority>
 800237a:	4602      	mov	r2, r0
 800237c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002380:	4611      	mov	r1, r2
 8002382:	4618      	mov	r0, r3
 8002384:	f7ff ff80 	bl	8002288 <__NVIC_SetPriority>
}
 8002388:	bf00      	nop
 800238a:	3718      	adds	r7, #24
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}

08002390 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b082      	sub	sp, #8
 8002394:	af00      	add	r7, sp, #0
 8002396:	4603      	mov	r3, r0
 8002398:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800239a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800239e:	4618      	mov	r0, r3
 80023a0:	f7ff ff54 	bl	800224c <__NVIC_EnableIRQ>
}
 80023a4:	bf00      	nop
 80023a6:	3708      	adds	r7, #8
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}

080023ac <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b086      	sub	sp, #24
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80023b4:	2300      	movs	r3, #0
 80023b6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80023b8:	f7ff fee8 	bl	800218c <HAL_GetTick>
 80023bc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d101      	bne.n	80023c8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	e099      	b.n	80024fc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2200      	movs	r2, #0
 80023cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2202      	movs	r2, #2
 80023d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f022 0201 	bic.w	r2, r2, #1
 80023e6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023e8:	e00f      	b.n	800240a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80023ea:	f7ff fecf 	bl	800218c <HAL_GetTick>
 80023ee:	4602      	mov	r2, r0
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	1ad3      	subs	r3, r2, r3
 80023f4:	2b05      	cmp	r3, #5
 80023f6:	d908      	bls.n	800240a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2220      	movs	r2, #32
 80023fc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2203      	movs	r2, #3
 8002402:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002406:	2303      	movs	r3, #3
 8002408:	e078      	b.n	80024fc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 0301 	and.w	r3, r3, #1
 8002414:	2b00      	cmp	r3, #0
 8002416:	d1e8      	bne.n	80023ea <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002420:	697a      	ldr	r2, [r7, #20]
 8002422:	4b38      	ldr	r3, [pc, #224]	; (8002504 <HAL_DMA_Init+0x158>)
 8002424:	4013      	ands	r3, r2
 8002426:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	685a      	ldr	r2, [r3, #4]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002436:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	691b      	ldr	r3, [r3, #16]
 800243c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002442:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	699b      	ldr	r3, [r3, #24]
 8002448:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800244e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6a1b      	ldr	r3, [r3, #32]
 8002454:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002456:	697a      	ldr	r2, [r7, #20]
 8002458:	4313      	orrs	r3, r2
 800245a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002460:	2b04      	cmp	r3, #4
 8002462:	d107      	bne.n	8002474 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800246c:	4313      	orrs	r3, r2
 800246e:	697a      	ldr	r2, [r7, #20]
 8002470:	4313      	orrs	r3, r2
 8002472:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	697a      	ldr	r2, [r7, #20]
 800247a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	695b      	ldr	r3, [r3, #20]
 8002482:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	f023 0307 	bic.w	r3, r3, #7
 800248a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002490:	697a      	ldr	r2, [r7, #20]
 8002492:	4313      	orrs	r3, r2
 8002494:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800249a:	2b04      	cmp	r3, #4
 800249c:	d117      	bne.n	80024ce <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024a2:	697a      	ldr	r2, [r7, #20]
 80024a4:	4313      	orrs	r3, r2
 80024a6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d00e      	beq.n	80024ce <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	f000 fa91 	bl	80029d8 <DMA_CheckFifoParam>
 80024b6:	4603      	mov	r3, r0
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d008      	beq.n	80024ce <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2240      	movs	r2, #64	; 0x40
 80024c0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2201      	movs	r2, #1
 80024c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80024ca:	2301      	movs	r3, #1
 80024cc:	e016      	b.n	80024fc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	697a      	ldr	r2, [r7, #20]
 80024d4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	f000 fa48 	bl	800296c <DMA_CalcBaseAndBitshift>
 80024dc:	4603      	mov	r3, r0
 80024de:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024e4:	223f      	movs	r2, #63	; 0x3f
 80024e6:	409a      	lsls	r2, r3
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2200      	movs	r2, #0
 80024f0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2201      	movs	r2, #1
 80024f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80024fa:	2300      	movs	r3, #0
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	3718      	adds	r7, #24
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}
 8002504:	f010803f 	.word	0xf010803f

08002508 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b086      	sub	sp, #24
 800250c:	af00      	add	r7, sp, #0
 800250e:	60f8      	str	r0, [r7, #12]
 8002510:	60b9      	str	r1, [r7, #8]
 8002512:	607a      	str	r2, [r7, #4]
 8002514:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002516:	2300      	movs	r3, #0
 8002518:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800251e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002526:	2b01      	cmp	r3, #1
 8002528:	d101      	bne.n	800252e <HAL_DMA_Start_IT+0x26>
 800252a:	2302      	movs	r3, #2
 800252c:	e040      	b.n	80025b0 <HAL_DMA_Start_IT+0xa8>
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	2201      	movs	r2, #1
 8002532:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800253c:	b2db      	uxtb	r3, r3
 800253e:	2b01      	cmp	r3, #1
 8002540:	d12f      	bne.n	80025a2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	2202      	movs	r2, #2
 8002546:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	2200      	movs	r2, #0
 800254e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	687a      	ldr	r2, [r7, #4]
 8002554:	68b9      	ldr	r1, [r7, #8]
 8002556:	68f8      	ldr	r0, [r7, #12]
 8002558:	f000 f9da 	bl	8002910 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002560:	223f      	movs	r2, #63	; 0x3f
 8002562:	409a      	lsls	r2, r3
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f042 0216 	orr.w	r2, r2, #22
 8002576:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257c:	2b00      	cmp	r3, #0
 800257e:	d007      	beq.n	8002590 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f042 0208 	orr.w	r2, r2, #8
 800258e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f042 0201 	orr.w	r2, r2, #1
 800259e:	601a      	str	r2, [r3, #0]
 80025a0:	e005      	b.n	80025ae <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	2200      	movs	r2, #0
 80025a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80025aa:	2302      	movs	r3, #2
 80025ac:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80025ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	3718      	adds	r7, #24
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}

080025b8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b083      	sub	sp, #12
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	2b02      	cmp	r3, #2
 80025ca:	d004      	beq.n	80025d6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2280      	movs	r2, #128	; 0x80
 80025d0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e00c      	b.n	80025f0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2205      	movs	r2, #5
 80025da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f022 0201 	bic.w	r2, r2, #1
 80025ec:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80025ee:	2300      	movs	r3, #0
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	370c      	adds	r7, #12
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr

080025fc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b086      	sub	sp, #24
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002604:	2300      	movs	r3, #0
 8002606:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002608:	4b92      	ldr	r3, [pc, #584]	; (8002854 <HAL_DMA_IRQHandler+0x258>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a92      	ldr	r2, [pc, #584]	; (8002858 <HAL_DMA_IRQHandler+0x25c>)
 800260e:	fba2 2303 	umull	r2, r3, r2, r3
 8002612:	0a9b      	lsrs	r3, r3, #10
 8002614:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800261a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002626:	2208      	movs	r2, #8
 8002628:	409a      	lsls	r2, r3
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	4013      	ands	r3, r2
 800262e:	2b00      	cmp	r3, #0
 8002630:	d01a      	beq.n	8002668 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 0304 	and.w	r3, r3, #4
 800263c:	2b00      	cmp	r3, #0
 800263e:	d013      	beq.n	8002668 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f022 0204 	bic.w	r2, r2, #4
 800264e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002654:	2208      	movs	r2, #8
 8002656:	409a      	lsls	r2, r3
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002660:	f043 0201 	orr.w	r2, r3, #1
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800266c:	2201      	movs	r2, #1
 800266e:	409a      	lsls	r2, r3
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	4013      	ands	r3, r2
 8002674:	2b00      	cmp	r3, #0
 8002676:	d012      	beq.n	800269e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	695b      	ldr	r3, [r3, #20]
 800267e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002682:	2b00      	cmp	r3, #0
 8002684:	d00b      	beq.n	800269e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800268a:	2201      	movs	r2, #1
 800268c:	409a      	lsls	r2, r3
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002696:	f043 0202 	orr.w	r2, r3, #2
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026a2:	2204      	movs	r2, #4
 80026a4:	409a      	lsls	r2, r3
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	4013      	ands	r3, r2
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d012      	beq.n	80026d4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 0302 	and.w	r3, r3, #2
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d00b      	beq.n	80026d4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026c0:	2204      	movs	r2, #4
 80026c2:	409a      	lsls	r2, r3
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026cc:	f043 0204 	orr.w	r2, r3, #4
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026d8:	2210      	movs	r2, #16
 80026da:	409a      	lsls	r2, r3
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	4013      	ands	r3, r2
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d043      	beq.n	800276c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 0308 	and.w	r3, r3, #8
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d03c      	beq.n	800276c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026f6:	2210      	movs	r2, #16
 80026f8:	409a      	lsls	r2, r3
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002708:	2b00      	cmp	r3, #0
 800270a:	d018      	beq.n	800273e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d108      	bne.n	800272c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271e:	2b00      	cmp	r3, #0
 8002720:	d024      	beq.n	800276c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	4798      	blx	r3
 800272a:	e01f      	b.n	800276c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002730:	2b00      	cmp	r3, #0
 8002732:	d01b      	beq.n	800276c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002738:	6878      	ldr	r0, [r7, #4]
 800273a:	4798      	blx	r3
 800273c:	e016      	b.n	800276c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002748:	2b00      	cmp	r3, #0
 800274a:	d107      	bne.n	800275c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f022 0208 	bic.w	r2, r2, #8
 800275a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002760:	2b00      	cmp	r3, #0
 8002762:	d003      	beq.n	800276c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002768:	6878      	ldr	r0, [r7, #4]
 800276a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002770:	2220      	movs	r2, #32
 8002772:	409a      	lsls	r2, r3
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	4013      	ands	r3, r2
 8002778:	2b00      	cmp	r3, #0
 800277a:	f000 808e 	beq.w	800289a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 0310 	and.w	r3, r3, #16
 8002788:	2b00      	cmp	r3, #0
 800278a:	f000 8086 	beq.w	800289a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002792:	2220      	movs	r2, #32
 8002794:	409a      	lsls	r2, r3
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	2b05      	cmp	r3, #5
 80027a4:	d136      	bne.n	8002814 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f022 0216 	bic.w	r2, r2, #22
 80027b4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	695a      	ldr	r2, [r3, #20]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80027c4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d103      	bne.n	80027d6 <HAL_DMA_IRQHandler+0x1da>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d007      	beq.n	80027e6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f022 0208 	bic.w	r2, r2, #8
 80027e4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027ea:	223f      	movs	r2, #63	; 0x3f
 80027ec:	409a      	lsls	r2, r3
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2200      	movs	r2, #0
 80027f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2201      	movs	r2, #1
 80027fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002806:	2b00      	cmp	r3, #0
 8002808:	d07d      	beq.n	8002906 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	4798      	blx	r3
        }
        return;
 8002812:	e078      	b.n	8002906 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800281e:	2b00      	cmp	r3, #0
 8002820:	d01c      	beq.n	800285c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800282c:	2b00      	cmp	r3, #0
 800282e:	d108      	bne.n	8002842 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002834:	2b00      	cmp	r3, #0
 8002836:	d030      	beq.n	800289a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800283c:	6878      	ldr	r0, [r7, #4]
 800283e:	4798      	blx	r3
 8002840:	e02b      	b.n	800289a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002846:	2b00      	cmp	r3, #0
 8002848:	d027      	beq.n	800289a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800284e:	6878      	ldr	r0, [r7, #4]
 8002850:	4798      	blx	r3
 8002852:	e022      	b.n	800289a <HAL_DMA_IRQHandler+0x29e>
 8002854:	20000000 	.word	0x20000000
 8002858:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002866:	2b00      	cmp	r3, #0
 8002868:	d10f      	bne.n	800288a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f022 0210 	bic.w	r2, r2, #16
 8002878:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2200      	movs	r2, #0
 800287e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2201      	movs	r2, #1
 8002886:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800288e:	2b00      	cmp	r3, #0
 8002890:	d003      	beq.n	800289a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d032      	beq.n	8002908 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028a6:	f003 0301 	and.w	r3, r3, #1
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d022      	beq.n	80028f4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2205      	movs	r2, #5
 80028b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f022 0201 	bic.w	r2, r2, #1
 80028c4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	3301      	adds	r3, #1
 80028ca:	60bb      	str	r3, [r7, #8]
 80028cc:	697a      	ldr	r2, [r7, #20]
 80028ce:	429a      	cmp	r2, r3
 80028d0:	d307      	bcc.n	80028e2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f003 0301 	and.w	r3, r3, #1
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d1f2      	bne.n	80028c6 <HAL_DMA_IRQHandler+0x2ca>
 80028e0:	e000      	b.n	80028e4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80028e2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2200      	movs	r2, #0
 80028e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2201      	movs	r2, #1
 80028f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d005      	beq.n	8002908 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002900:	6878      	ldr	r0, [r7, #4]
 8002902:	4798      	blx	r3
 8002904:	e000      	b.n	8002908 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002906:	bf00      	nop
    }
  }
}
 8002908:	3718      	adds	r7, #24
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
 800290e:	bf00      	nop

08002910 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002910:	b480      	push	{r7}
 8002912:	b085      	sub	sp, #20
 8002914:	af00      	add	r7, sp, #0
 8002916:	60f8      	str	r0, [r7, #12]
 8002918:	60b9      	str	r1, [r7, #8]
 800291a:	607a      	str	r2, [r7, #4]
 800291c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800292c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	683a      	ldr	r2, [r7, #0]
 8002934:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	2b40      	cmp	r3, #64	; 0x40
 800293c:	d108      	bne.n	8002950 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	68ba      	ldr	r2, [r7, #8]
 800294c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800294e:	e007      	b.n	8002960 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	68ba      	ldr	r2, [r7, #8]
 8002956:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	687a      	ldr	r2, [r7, #4]
 800295e:	60da      	str	r2, [r3, #12]
}
 8002960:	bf00      	nop
 8002962:	3714      	adds	r7, #20
 8002964:	46bd      	mov	sp, r7
 8002966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296a:	4770      	bx	lr

0800296c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800296c:	b480      	push	{r7}
 800296e:	b085      	sub	sp, #20
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	b2db      	uxtb	r3, r3
 800297a:	3b10      	subs	r3, #16
 800297c:	4a14      	ldr	r2, [pc, #80]	; (80029d0 <DMA_CalcBaseAndBitshift+0x64>)
 800297e:	fba2 2303 	umull	r2, r3, r2, r3
 8002982:	091b      	lsrs	r3, r3, #4
 8002984:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002986:	4a13      	ldr	r2, [pc, #76]	; (80029d4 <DMA_CalcBaseAndBitshift+0x68>)
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	4413      	add	r3, r2
 800298c:	781b      	ldrb	r3, [r3, #0]
 800298e:	461a      	mov	r2, r3
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2b03      	cmp	r3, #3
 8002998:	d909      	bls.n	80029ae <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80029a2:	f023 0303 	bic.w	r3, r3, #3
 80029a6:	1d1a      	adds	r2, r3, #4
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	659a      	str	r2, [r3, #88]	; 0x58
 80029ac:	e007      	b.n	80029be <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80029b6:	f023 0303 	bic.w	r3, r3, #3
 80029ba:	687a      	ldr	r2, [r7, #4]
 80029bc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3714      	adds	r7, #20
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr
 80029ce:	bf00      	nop
 80029d0:	aaaaaaab 	.word	0xaaaaaaab
 80029d4:	0800912c 	.word	0x0800912c

080029d8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80029d8:	b480      	push	{r7}
 80029da:	b085      	sub	sp, #20
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029e0:	2300      	movs	r3, #0
 80029e2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029e8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	699b      	ldr	r3, [r3, #24]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d11f      	bne.n	8002a32 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	2b03      	cmp	r3, #3
 80029f6:	d855      	bhi.n	8002aa4 <DMA_CheckFifoParam+0xcc>
 80029f8:	a201      	add	r2, pc, #4	; (adr r2, 8002a00 <DMA_CheckFifoParam+0x28>)
 80029fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029fe:	bf00      	nop
 8002a00:	08002a11 	.word	0x08002a11
 8002a04:	08002a23 	.word	0x08002a23
 8002a08:	08002a11 	.word	0x08002a11
 8002a0c:	08002aa5 	.word	0x08002aa5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a14:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d045      	beq.n	8002aa8 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a20:	e042      	b.n	8002aa8 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a26:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002a2a:	d13f      	bne.n	8002aac <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a30:	e03c      	b.n	8002aac <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	699b      	ldr	r3, [r3, #24]
 8002a36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a3a:	d121      	bne.n	8002a80 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	2b03      	cmp	r3, #3
 8002a40:	d836      	bhi.n	8002ab0 <DMA_CheckFifoParam+0xd8>
 8002a42:	a201      	add	r2, pc, #4	; (adr r2, 8002a48 <DMA_CheckFifoParam+0x70>)
 8002a44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a48:	08002a59 	.word	0x08002a59
 8002a4c:	08002a5f 	.word	0x08002a5f
 8002a50:	08002a59 	.word	0x08002a59
 8002a54:	08002a71 	.word	0x08002a71
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	73fb      	strb	r3, [r7, #15]
      break;
 8002a5c:	e02f      	b.n	8002abe <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a62:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d024      	beq.n	8002ab4 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a6e:	e021      	b.n	8002ab4 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a74:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002a78:	d11e      	bne.n	8002ab8 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002a7e:	e01b      	b.n	8002ab8 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	2b02      	cmp	r3, #2
 8002a84:	d902      	bls.n	8002a8c <DMA_CheckFifoParam+0xb4>
 8002a86:	2b03      	cmp	r3, #3
 8002a88:	d003      	beq.n	8002a92 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002a8a:	e018      	b.n	8002abe <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	73fb      	strb	r3, [r7, #15]
      break;
 8002a90:	e015      	b.n	8002abe <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a96:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d00e      	beq.n	8002abc <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	73fb      	strb	r3, [r7, #15]
      break;
 8002aa2:	e00b      	b.n	8002abc <DMA_CheckFifoParam+0xe4>
      break;
 8002aa4:	bf00      	nop
 8002aa6:	e00a      	b.n	8002abe <DMA_CheckFifoParam+0xe6>
      break;
 8002aa8:	bf00      	nop
 8002aaa:	e008      	b.n	8002abe <DMA_CheckFifoParam+0xe6>
      break;
 8002aac:	bf00      	nop
 8002aae:	e006      	b.n	8002abe <DMA_CheckFifoParam+0xe6>
      break;
 8002ab0:	bf00      	nop
 8002ab2:	e004      	b.n	8002abe <DMA_CheckFifoParam+0xe6>
      break;
 8002ab4:	bf00      	nop
 8002ab6:	e002      	b.n	8002abe <DMA_CheckFifoParam+0xe6>
      break;   
 8002ab8:	bf00      	nop
 8002aba:	e000      	b.n	8002abe <DMA_CheckFifoParam+0xe6>
      break;
 8002abc:	bf00      	nop
    }
  } 
  
  return status; 
 8002abe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	3714      	adds	r7, #20
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr

08002acc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b089      	sub	sp, #36	; 0x24
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
 8002ad4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002ada:	2300      	movs	r3, #0
 8002adc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	61fb      	str	r3, [r7, #28]
 8002ae6:	e16b      	b.n	8002dc0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002ae8:	2201      	movs	r2, #1
 8002aea:	69fb      	ldr	r3, [r7, #28]
 8002aec:	fa02 f303 	lsl.w	r3, r2, r3
 8002af0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	697a      	ldr	r2, [r7, #20]
 8002af8:	4013      	ands	r3, r2
 8002afa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002afc:	693a      	ldr	r2, [r7, #16]
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	429a      	cmp	r2, r3
 8002b02:	f040 815a 	bne.w	8002dba <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	2b01      	cmp	r3, #1
 8002b0c:	d00b      	beq.n	8002b26 <HAL_GPIO_Init+0x5a>
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	2b02      	cmp	r3, #2
 8002b14:	d007      	beq.n	8002b26 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002b1a:	2b11      	cmp	r3, #17
 8002b1c:	d003      	beq.n	8002b26 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	2b12      	cmp	r3, #18
 8002b24:	d130      	bne.n	8002b88 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b2c:	69fb      	ldr	r3, [r7, #28]
 8002b2e:	005b      	lsls	r3, r3, #1
 8002b30:	2203      	movs	r2, #3
 8002b32:	fa02 f303 	lsl.w	r3, r2, r3
 8002b36:	43db      	mvns	r3, r3
 8002b38:	69ba      	ldr	r2, [r7, #24]
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	68da      	ldr	r2, [r3, #12]
 8002b42:	69fb      	ldr	r3, [r7, #28]
 8002b44:	005b      	lsls	r3, r3, #1
 8002b46:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4a:	69ba      	ldr	r2, [r7, #24]
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	69ba      	ldr	r2, [r7, #24]
 8002b54:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	69fb      	ldr	r3, [r7, #28]
 8002b60:	fa02 f303 	lsl.w	r3, r2, r3
 8002b64:	43db      	mvns	r3, r3
 8002b66:	69ba      	ldr	r2, [r7, #24]
 8002b68:	4013      	ands	r3, r2
 8002b6a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	091b      	lsrs	r3, r3, #4
 8002b72:	f003 0201 	and.w	r2, r3, #1
 8002b76:	69fb      	ldr	r3, [r7, #28]
 8002b78:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7c:	69ba      	ldr	r2, [r7, #24]
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	69ba      	ldr	r2, [r7, #24]
 8002b86:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	68db      	ldr	r3, [r3, #12]
 8002b8c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	005b      	lsls	r3, r3, #1
 8002b92:	2203      	movs	r2, #3
 8002b94:	fa02 f303 	lsl.w	r3, r2, r3
 8002b98:	43db      	mvns	r3, r3
 8002b9a:	69ba      	ldr	r2, [r7, #24]
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	689a      	ldr	r2, [r3, #8]
 8002ba4:	69fb      	ldr	r3, [r7, #28]
 8002ba6:	005b      	lsls	r3, r3, #1
 8002ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bac:	69ba      	ldr	r2, [r7, #24]
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	69ba      	ldr	r2, [r7, #24]
 8002bb6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	2b02      	cmp	r3, #2
 8002bbe:	d003      	beq.n	8002bc8 <HAL_GPIO_Init+0xfc>
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	2b12      	cmp	r3, #18
 8002bc6:	d123      	bne.n	8002c10 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002bc8:	69fb      	ldr	r3, [r7, #28]
 8002bca:	08da      	lsrs	r2, r3, #3
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	3208      	adds	r2, #8
 8002bd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002bd6:	69fb      	ldr	r3, [r7, #28]
 8002bd8:	f003 0307 	and.w	r3, r3, #7
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	220f      	movs	r2, #15
 8002be0:	fa02 f303 	lsl.w	r3, r2, r3
 8002be4:	43db      	mvns	r3, r3
 8002be6:	69ba      	ldr	r2, [r7, #24]
 8002be8:	4013      	ands	r3, r2
 8002bea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	691a      	ldr	r2, [r3, #16]
 8002bf0:	69fb      	ldr	r3, [r7, #28]
 8002bf2:	f003 0307 	and.w	r3, r3, #7
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfc:	69ba      	ldr	r2, [r7, #24]
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	08da      	lsrs	r2, r3, #3
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	3208      	adds	r2, #8
 8002c0a:	69b9      	ldr	r1, [r7, #24]
 8002c0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c16:	69fb      	ldr	r3, [r7, #28]
 8002c18:	005b      	lsls	r3, r3, #1
 8002c1a:	2203      	movs	r2, #3
 8002c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c20:	43db      	mvns	r3, r3
 8002c22:	69ba      	ldr	r2, [r7, #24]
 8002c24:	4013      	ands	r3, r2
 8002c26:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	f003 0203 	and.w	r2, r3, #3
 8002c30:	69fb      	ldr	r3, [r7, #28]
 8002c32:	005b      	lsls	r3, r3, #1
 8002c34:	fa02 f303 	lsl.w	r3, r2, r3
 8002c38:	69ba      	ldr	r2, [r7, #24]
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	69ba      	ldr	r2, [r7, #24]
 8002c42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	f000 80b4 	beq.w	8002dba <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c52:	2300      	movs	r3, #0
 8002c54:	60fb      	str	r3, [r7, #12]
 8002c56:	4b5f      	ldr	r3, [pc, #380]	; (8002dd4 <HAL_GPIO_Init+0x308>)
 8002c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c5a:	4a5e      	ldr	r2, [pc, #376]	; (8002dd4 <HAL_GPIO_Init+0x308>)
 8002c5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c60:	6453      	str	r3, [r2, #68]	; 0x44
 8002c62:	4b5c      	ldr	r3, [pc, #368]	; (8002dd4 <HAL_GPIO_Init+0x308>)
 8002c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c6a:	60fb      	str	r3, [r7, #12]
 8002c6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c6e:	4a5a      	ldr	r2, [pc, #360]	; (8002dd8 <HAL_GPIO_Init+0x30c>)
 8002c70:	69fb      	ldr	r3, [r7, #28]
 8002c72:	089b      	lsrs	r3, r3, #2
 8002c74:	3302      	adds	r3, #2
 8002c76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c7c:	69fb      	ldr	r3, [r7, #28]
 8002c7e:	f003 0303 	and.w	r3, r3, #3
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	220f      	movs	r2, #15
 8002c86:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8a:	43db      	mvns	r3, r3
 8002c8c:	69ba      	ldr	r2, [r7, #24]
 8002c8e:	4013      	ands	r3, r2
 8002c90:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	4a51      	ldr	r2, [pc, #324]	; (8002ddc <HAL_GPIO_Init+0x310>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d02b      	beq.n	8002cf2 <HAL_GPIO_Init+0x226>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	4a50      	ldr	r2, [pc, #320]	; (8002de0 <HAL_GPIO_Init+0x314>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d025      	beq.n	8002cee <HAL_GPIO_Init+0x222>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	4a4f      	ldr	r2, [pc, #316]	; (8002de4 <HAL_GPIO_Init+0x318>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d01f      	beq.n	8002cea <HAL_GPIO_Init+0x21e>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	4a4e      	ldr	r2, [pc, #312]	; (8002de8 <HAL_GPIO_Init+0x31c>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d019      	beq.n	8002ce6 <HAL_GPIO_Init+0x21a>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	4a4d      	ldr	r2, [pc, #308]	; (8002dec <HAL_GPIO_Init+0x320>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d013      	beq.n	8002ce2 <HAL_GPIO_Init+0x216>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	4a4c      	ldr	r2, [pc, #304]	; (8002df0 <HAL_GPIO_Init+0x324>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d00d      	beq.n	8002cde <HAL_GPIO_Init+0x212>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	4a4b      	ldr	r2, [pc, #300]	; (8002df4 <HAL_GPIO_Init+0x328>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d007      	beq.n	8002cda <HAL_GPIO_Init+0x20e>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	4a4a      	ldr	r2, [pc, #296]	; (8002df8 <HAL_GPIO_Init+0x32c>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d101      	bne.n	8002cd6 <HAL_GPIO_Init+0x20a>
 8002cd2:	2307      	movs	r3, #7
 8002cd4:	e00e      	b.n	8002cf4 <HAL_GPIO_Init+0x228>
 8002cd6:	2308      	movs	r3, #8
 8002cd8:	e00c      	b.n	8002cf4 <HAL_GPIO_Init+0x228>
 8002cda:	2306      	movs	r3, #6
 8002cdc:	e00a      	b.n	8002cf4 <HAL_GPIO_Init+0x228>
 8002cde:	2305      	movs	r3, #5
 8002ce0:	e008      	b.n	8002cf4 <HAL_GPIO_Init+0x228>
 8002ce2:	2304      	movs	r3, #4
 8002ce4:	e006      	b.n	8002cf4 <HAL_GPIO_Init+0x228>
 8002ce6:	2303      	movs	r3, #3
 8002ce8:	e004      	b.n	8002cf4 <HAL_GPIO_Init+0x228>
 8002cea:	2302      	movs	r3, #2
 8002cec:	e002      	b.n	8002cf4 <HAL_GPIO_Init+0x228>
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e000      	b.n	8002cf4 <HAL_GPIO_Init+0x228>
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	69fa      	ldr	r2, [r7, #28]
 8002cf6:	f002 0203 	and.w	r2, r2, #3
 8002cfa:	0092      	lsls	r2, r2, #2
 8002cfc:	4093      	lsls	r3, r2
 8002cfe:	69ba      	ldr	r2, [r7, #24]
 8002d00:	4313      	orrs	r3, r2
 8002d02:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d04:	4934      	ldr	r1, [pc, #208]	; (8002dd8 <HAL_GPIO_Init+0x30c>)
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	089b      	lsrs	r3, r3, #2
 8002d0a:	3302      	adds	r3, #2
 8002d0c:	69ba      	ldr	r2, [r7, #24]
 8002d0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d12:	4b3a      	ldr	r3, [pc, #232]	; (8002dfc <HAL_GPIO_Init+0x330>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	43db      	mvns	r3, r3
 8002d1c:	69ba      	ldr	r2, [r7, #24]
 8002d1e:	4013      	ands	r3, r2
 8002d20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d003      	beq.n	8002d36 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002d2e:	69ba      	ldr	r2, [r7, #24]
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	4313      	orrs	r3, r2
 8002d34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d36:	4a31      	ldr	r2, [pc, #196]	; (8002dfc <HAL_GPIO_Init+0x330>)
 8002d38:	69bb      	ldr	r3, [r7, #24]
 8002d3a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002d3c:	4b2f      	ldr	r3, [pc, #188]	; (8002dfc <HAL_GPIO_Init+0x330>)
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	43db      	mvns	r3, r3
 8002d46:	69ba      	ldr	r2, [r7, #24]
 8002d48:	4013      	ands	r3, r2
 8002d4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d003      	beq.n	8002d60 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002d58:	69ba      	ldr	r2, [r7, #24]
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d60:	4a26      	ldr	r2, [pc, #152]	; (8002dfc <HAL_GPIO_Init+0x330>)
 8002d62:	69bb      	ldr	r3, [r7, #24]
 8002d64:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d66:	4b25      	ldr	r3, [pc, #148]	; (8002dfc <HAL_GPIO_Init+0x330>)
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	43db      	mvns	r3, r3
 8002d70:	69ba      	ldr	r2, [r7, #24]
 8002d72:	4013      	ands	r3, r2
 8002d74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d003      	beq.n	8002d8a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002d82:	69ba      	ldr	r2, [r7, #24]
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	4313      	orrs	r3, r2
 8002d88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d8a:	4a1c      	ldr	r2, [pc, #112]	; (8002dfc <HAL_GPIO_Init+0x330>)
 8002d8c:	69bb      	ldr	r3, [r7, #24]
 8002d8e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d90:	4b1a      	ldr	r3, [pc, #104]	; (8002dfc <HAL_GPIO_Init+0x330>)
 8002d92:	68db      	ldr	r3, [r3, #12]
 8002d94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	43db      	mvns	r3, r3
 8002d9a:	69ba      	ldr	r2, [r7, #24]
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d003      	beq.n	8002db4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002dac:	69ba      	ldr	r2, [r7, #24]
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	4313      	orrs	r3, r2
 8002db2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002db4:	4a11      	ldr	r2, [pc, #68]	; (8002dfc <HAL_GPIO_Init+0x330>)
 8002db6:	69bb      	ldr	r3, [r7, #24]
 8002db8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	3301      	adds	r3, #1
 8002dbe:	61fb      	str	r3, [r7, #28]
 8002dc0:	69fb      	ldr	r3, [r7, #28]
 8002dc2:	2b0f      	cmp	r3, #15
 8002dc4:	f67f ae90 	bls.w	8002ae8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002dc8:	bf00      	nop
 8002dca:	3724      	adds	r7, #36	; 0x24
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd2:	4770      	bx	lr
 8002dd4:	40023800 	.word	0x40023800
 8002dd8:	40013800 	.word	0x40013800
 8002ddc:	40020000 	.word	0x40020000
 8002de0:	40020400 	.word	0x40020400
 8002de4:	40020800 	.word	0x40020800
 8002de8:	40020c00 	.word	0x40020c00
 8002dec:	40021000 	.word	0x40021000
 8002df0:	40021400 	.word	0x40021400
 8002df4:	40021800 	.word	0x40021800
 8002df8:	40021c00 	.word	0x40021c00
 8002dfc:	40013c00 	.word	0x40013c00

08002e00 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b085      	sub	sp, #20
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
 8002e08:	460b      	mov	r3, r1
 8002e0a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	691a      	ldr	r2, [r3, #16]
 8002e10:	887b      	ldrh	r3, [r7, #2]
 8002e12:	4013      	ands	r3, r2
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d002      	beq.n	8002e1e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	73fb      	strb	r3, [r7, #15]
 8002e1c:	e001      	b.n	8002e22 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002e22:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	3714      	adds	r7, #20
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2e:	4770      	bx	lr

08002e30 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b084      	sub	sp, #16
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d101      	bne.n	8002e42 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e11f      	b.n	8003082 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d106      	bne.n	8002e5c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2200      	movs	r2, #0
 8002e52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	f7fe ffc6 	bl	8001de8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2224      	movs	r2, #36	; 0x24
 8002e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f022 0201 	bic.w	r2, r2, #1
 8002e72:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e82:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e92:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002e94:	f001 fb68 	bl	8004568 <HAL_RCC_GetPCLK1Freq>
 8002e98:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	4a7b      	ldr	r2, [pc, #492]	; (800308c <HAL_I2C_Init+0x25c>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d807      	bhi.n	8002eb4 <HAL_I2C_Init+0x84>
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	4a7a      	ldr	r2, [pc, #488]	; (8003090 <HAL_I2C_Init+0x260>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	bf94      	ite	ls
 8002eac:	2301      	movls	r3, #1
 8002eae:	2300      	movhi	r3, #0
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	e006      	b.n	8002ec2 <HAL_I2C_Init+0x92>
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	4a77      	ldr	r2, [pc, #476]	; (8003094 <HAL_I2C_Init+0x264>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	bf94      	ite	ls
 8002ebc:	2301      	movls	r3, #1
 8002ebe:	2300      	movhi	r3, #0
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d001      	beq.n	8002eca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e0db      	b.n	8003082 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	4a72      	ldr	r2, [pc, #456]	; (8003098 <HAL_I2C_Init+0x268>)
 8002ece:	fba2 2303 	umull	r2, r3, r2, r3
 8002ed2:	0c9b      	lsrs	r3, r3, #18
 8002ed4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	68ba      	ldr	r2, [r7, #8]
 8002ee6:	430a      	orrs	r2, r1
 8002ee8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	6a1b      	ldr	r3, [r3, #32]
 8002ef0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	4a64      	ldr	r2, [pc, #400]	; (800308c <HAL_I2C_Init+0x25c>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d802      	bhi.n	8002f04 <HAL_I2C_Init+0xd4>
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	3301      	adds	r3, #1
 8002f02:	e009      	b.n	8002f18 <HAL_I2C_Init+0xe8>
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002f0a:	fb02 f303 	mul.w	r3, r2, r3
 8002f0e:	4a63      	ldr	r2, [pc, #396]	; (800309c <HAL_I2C_Init+0x26c>)
 8002f10:	fba2 2303 	umull	r2, r3, r2, r3
 8002f14:	099b      	lsrs	r3, r3, #6
 8002f16:	3301      	adds	r3, #1
 8002f18:	687a      	ldr	r2, [r7, #4]
 8002f1a:	6812      	ldr	r2, [r2, #0]
 8002f1c:	430b      	orrs	r3, r1
 8002f1e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	69db      	ldr	r3, [r3, #28]
 8002f26:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002f2a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	4956      	ldr	r1, [pc, #344]	; (800308c <HAL_I2C_Init+0x25c>)
 8002f34:	428b      	cmp	r3, r1
 8002f36:	d80d      	bhi.n	8002f54 <HAL_I2C_Init+0x124>
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	1e59      	subs	r1, r3, #1
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	005b      	lsls	r3, r3, #1
 8002f42:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f46:	3301      	adds	r3, #1
 8002f48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f4c:	2b04      	cmp	r3, #4
 8002f4e:	bf38      	it	cc
 8002f50:	2304      	movcc	r3, #4
 8002f52:	e04f      	b.n	8002ff4 <HAL_I2C_Init+0x1c4>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d111      	bne.n	8002f80 <HAL_I2C_Init+0x150>
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	1e58      	subs	r0, r3, #1
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6859      	ldr	r1, [r3, #4]
 8002f64:	460b      	mov	r3, r1
 8002f66:	005b      	lsls	r3, r3, #1
 8002f68:	440b      	add	r3, r1
 8002f6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f6e:	3301      	adds	r3, #1
 8002f70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	bf0c      	ite	eq
 8002f78:	2301      	moveq	r3, #1
 8002f7a:	2300      	movne	r3, #0
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	e012      	b.n	8002fa6 <HAL_I2C_Init+0x176>
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	1e58      	subs	r0, r3, #1
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6859      	ldr	r1, [r3, #4]
 8002f88:	460b      	mov	r3, r1
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	440b      	add	r3, r1
 8002f8e:	0099      	lsls	r1, r3, #2
 8002f90:	440b      	add	r3, r1
 8002f92:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f96:	3301      	adds	r3, #1
 8002f98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	bf0c      	ite	eq
 8002fa0:	2301      	moveq	r3, #1
 8002fa2:	2300      	movne	r3, #0
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d001      	beq.n	8002fae <HAL_I2C_Init+0x17e>
 8002faa:	2301      	movs	r3, #1
 8002fac:	e022      	b.n	8002ff4 <HAL_I2C_Init+0x1c4>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d10e      	bne.n	8002fd4 <HAL_I2C_Init+0x1a4>
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	1e58      	subs	r0, r3, #1
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6859      	ldr	r1, [r3, #4]
 8002fbe:	460b      	mov	r3, r1
 8002fc0:	005b      	lsls	r3, r3, #1
 8002fc2:	440b      	add	r3, r1
 8002fc4:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fc8:	3301      	adds	r3, #1
 8002fca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002fd2:	e00f      	b.n	8002ff4 <HAL_I2C_Init+0x1c4>
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	1e58      	subs	r0, r3, #1
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6859      	ldr	r1, [r3, #4]
 8002fdc:	460b      	mov	r3, r1
 8002fde:	009b      	lsls	r3, r3, #2
 8002fe0:	440b      	add	r3, r1
 8002fe2:	0099      	lsls	r1, r3, #2
 8002fe4:	440b      	add	r3, r1
 8002fe6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fea:	3301      	adds	r3, #1
 8002fec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ff0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ff4:	6879      	ldr	r1, [r7, #4]
 8002ff6:	6809      	ldr	r1, [r1, #0]
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	69da      	ldr	r2, [r3, #28]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6a1b      	ldr	r3, [r3, #32]
 800300e:	431a      	orrs	r2, r3
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	430a      	orrs	r2, r1
 8003016:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003022:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003026:	687a      	ldr	r2, [r7, #4]
 8003028:	6911      	ldr	r1, [r2, #16]
 800302a:	687a      	ldr	r2, [r7, #4]
 800302c:	68d2      	ldr	r2, [r2, #12]
 800302e:	4311      	orrs	r1, r2
 8003030:	687a      	ldr	r2, [r7, #4]
 8003032:	6812      	ldr	r2, [r2, #0]
 8003034:	430b      	orrs	r3, r1
 8003036:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	68db      	ldr	r3, [r3, #12]
 800303e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	695a      	ldr	r2, [r3, #20]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	699b      	ldr	r3, [r3, #24]
 800304a:	431a      	orrs	r2, r3
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	430a      	orrs	r2, r1
 8003052:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f042 0201 	orr.w	r2, r2, #1
 8003062:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2200      	movs	r2, #0
 8003068:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2220      	movs	r2, #32
 800306e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2200      	movs	r2, #0
 8003076:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2200      	movs	r2, #0
 800307c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003080:	2300      	movs	r3, #0
}
 8003082:	4618      	mov	r0, r3
 8003084:	3710      	adds	r7, #16
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
 800308a:	bf00      	nop
 800308c:	000186a0 	.word	0x000186a0
 8003090:	001e847f 	.word	0x001e847f
 8003094:	003d08ff 	.word	0x003d08ff
 8003098:	431bde83 	.word	0x431bde83
 800309c:	10624dd3 	.word	0x10624dd3

080030a0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b088      	sub	sp, #32
 80030a4:	af02      	add	r7, sp, #8
 80030a6:	60f8      	str	r0, [r7, #12]
 80030a8:	607a      	str	r2, [r7, #4]
 80030aa:	461a      	mov	r2, r3
 80030ac:	460b      	mov	r3, r1
 80030ae:	817b      	strh	r3, [r7, #10]
 80030b0:	4613      	mov	r3, r2
 80030b2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80030b4:	f7ff f86a 	bl	800218c <HAL_GetTick>
 80030b8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	2b20      	cmp	r3, #32
 80030c4:	f040 80e0 	bne.w	8003288 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	9300      	str	r3, [sp, #0]
 80030cc:	2319      	movs	r3, #25
 80030ce:	2201      	movs	r2, #1
 80030d0:	4970      	ldr	r1, [pc, #448]	; (8003294 <HAL_I2C_Master_Transmit+0x1f4>)
 80030d2:	68f8      	ldr	r0, [r7, #12]
 80030d4:	f000 fc56 	bl	8003984 <I2C_WaitOnFlagUntilTimeout>
 80030d8:	4603      	mov	r3, r0
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d001      	beq.n	80030e2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80030de:	2302      	movs	r3, #2
 80030e0:	e0d3      	b.n	800328a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d101      	bne.n	80030f0 <HAL_I2C_Master_Transmit+0x50>
 80030ec:	2302      	movs	r3, #2
 80030ee:	e0cc      	b.n	800328a <HAL_I2C_Master_Transmit+0x1ea>
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2201      	movs	r2, #1
 80030f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 0301 	and.w	r3, r3, #1
 8003102:	2b01      	cmp	r3, #1
 8003104:	d007      	beq.n	8003116 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f042 0201 	orr.w	r2, r2, #1
 8003114:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003124:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2221      	movs	r2, #33	; 0x21
 800312a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2210      	movs	r2, #16
 8003132:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2200      	movs	r2, #0
 800313a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	687a      	ldr	r2, [r7, #4]
 8003140:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	893a      	ldrh	r2, [r7, #8]
 8003146:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800314c:	b29a      	uxth	r2, r3
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	4a50      	ldr	r2, [pc, #320]	; (8003298 <HAL_I2C_Master_Transmit+0x1f8>)
 8003156:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003158:	8979      	ldrh	r1, [r7, #10]
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	6a3a      	ldr	r2, [r7, #32]
 800315e:	68f8      	ldr	r0, [r7, #12]
 8003160:	f000 fac2 	bl	80036e8 <I2C_MasterRequestWrite>
 8003164:	4603      	mov	r3, r0
 8003166:	2b00      	cmp	r3, #0
 8003168:	d001      	beq.n	800316e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e08d      	b.n	800328a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800316e:	2300      	movs	r3, #0
 8003170:	613b      	str	r3, [r7, #16]
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	695b      	ldr	r3, [r3, #20]
 8003178:	613b      	str	r3, [r7, #16]
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	699b      	ldr	r3, [r3, #24]
 8003180:	613b      	str	r3, [r7, #16]
 8003182:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003184:	e066      	b.n	8003254 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003186:	697a      	ldr	r2, [r7, #20]
 8003188:	6a39      	ldr	r1, [r7, #32]
 800318a:	68f8      	ldr	r0, [r7, #12]
 800318c:	f000 fcd0 	bl	8003b30 <I2C_WaitOnTXEFlagUntilTimeout>
 8003190:	4603      	mov	r3, r0
 8003192:	2b00      	cmp	r3, #0
 8003194:	d00d      	beq.n	80031b2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319a:	2b04      	cmp	r3, #4
 800319c:	d107      	bne.n	80031ae <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031ac:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e06b      	b.n	800328a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b6:	781a      	ldrb	r2, [r3, #0]
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c2:	1c5a      	adds	r2, r3, #1
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031cc:	b29b      	uxth	r3, r3
 80031ce:	3b01      	subs	r3, #1
 80031d0:	b29a      	uxth	r2, r3
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031da:	3b01      	subs	r3, #1
 80031dc:	b29a      	uxth	r2, r3
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	695b      	ldr	r3, [r3, #20]
 80031e8:	f003 0304 	and.w	r3, r3, #4
 80031ec:	2b04      	cmp	r3, #4
 80031ee:	d11b      	bne.n	8003228 <HAL_I2C_Master_Transmit+0x188>
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d017      	beq.n	8003228 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031fc:	781a      	ldrb	r2, [r3, #0]
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003208:	1c5a      	adds	r2, r3, #1
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003212:	b29b      	uxth	r3, r3
 8003214:	3b01      	subs	r3, #1
 8003216:	b29a      	uxth	r2, r3
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003220:	3b01      	subs	r3, #1
 8003222:	b29a      	uxth	r2, r3
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003228:	697a      	ldr	r2, [r7, #20]
 800322a:	6a39      	ldr	r1, [r7, #32]
 800322c:	68f8      	ldr	r0, [r7, #12]
 800322e:	f000 fcc0 	bl	8003bb2 <I2C_WaitOnBTFFlagUntilTimeout>
 8003232:	4603      	mov	r3, r0
 8003234:	2b00      	cmp	r3, #0
 8003236:	d00d      	beq.n	8003254 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323c:	2b04      	cmp	r3, #4
 800323e:	d107      	bne.n	8003250 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800324e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	e01a      	b.n	800328a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003258:	2b00      	cmp	r3, #0
 800325a:	d194      	bne.n	8003186 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800326a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2220      	movs	r2, #32
 8003270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2200      	movs	r2, #0
 8003278:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2200      	movs	r2, #0
 8003280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003284:	2300      	movs	r3, #0
 8003286:	e000      	b.n	800328a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003288:	2302      	movs	r3, #2
  }
}
 800328a:	4618      	mov	r0, r3
 800328c:	3718      	adds	r7, #24
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}
 8003292:	bf00      	nop
 8003294:	00100002 	.word	0x00100002
 8003298:	ffff0000 	.word	0xffff0000

0800329c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b08c      	sub	sp, #48	; 0x30
 80032a0:	af02      	add	r7, sp, #8
 80032a2:	60f8      	str	r0, [r7, #12]
 80032a4:	607a      	str	r2, [r7, #4]
 80032a6:	461a      	mov	r2, r3
 80032a8:	460b      	mov	r3, r1
 80032aa:	817b      	strh	r3, [r7, #10]
 80032ac:	4613      	mov	r3, r2
 80032ae:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80032b0:	f7fe ff6c 	bl	800218c <HAL_GetTick>
 80032b4:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	2b20      	cmp	r3, #32
 80032c0:	f040 820b 	bne.w	80036da <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80032c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c6:	9300      	str	r3, [sp, #0]
 80032c8:	2319      	movs	r3, #25
 80032ca:	2201      	movs	r2, #1
 80032cc:	497c      	ldr	r1, [pc, #496]	; (80034c0 <HAL_I2C_Master_Receive+0x224>)
 80032ce:	68f8      	ldr	r0, [r7, #12]
 80032d0:	f000 fb58 	bl	8003984 <I2C_WaitOnFlagUntilTimeout>
 80032d4:	4603      	mov	r3, r0
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d001      	beq.n	80032de <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80032da:	2302      	movs	r3, #2
 80032dc:	e1fe      	b.n	80036dc <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	d101      	bne.n	80032ec <HAL_I2C_Master_Receive+0x50>
 80032e8:	2302      	movs	r3, #2
 80032ea:	e1f7      	b.n	80036dc <HAL_I2C_Master_Receive+0x440>
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2201      	movs	r2, #1
 80032f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 0301 	and.w	r3, r3, #1
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d007      	beq.n	8003312 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f042 0201 	orr.w	r2, r2, #1
 8003310:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	681a      	ldr	r2, [r3, #0]
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003320:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	2222      	movs	r2, #34	; 0x22
 8003326:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2210      	movs	r2, #16
 800332e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2200      	movs	r2, #0
 8003336:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	687a      	ldr	r2, [r7, #4]
 800333c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	893a      	ldrh	r2, [r7, #8]
 8003342:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003348:	b29a      	uxth	r2, r3
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	4a5c      	ldr	r2, [pc, #368]	; (80034c4 <HAL_I2C_Master_Receive+0x228>)
 8003352:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003354:	8979      	ldrh	r1, [r7, #10]
 8003356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003358:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800335a:	68f8      	ldr	r0, [r7, #12]
 800335c:	f000 fa46 	bl	80037ec <I2C_MasterRequestRead>
 8003360:	4603      	mov	r3, r0
 8003362:	2b00      	cmp	r3, #0
 8003364:	d001      	beq.n	800336a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	e1b8      	b.n	80036dc <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800336e:	2b00      	cmp	r3, #0
 8003370:	d113      	bne.n	800339a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003372:	2300      	movs	r3, #0
 8003374:	623b      	str	r3, [r7, #32]
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	695b      	ldr	r3, [r3, #20]
 800337c:	623b      	str	r3, [r7, #32]
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	699b      	ldr	r3, [r3, #24]
 8003384:	623b      	str	r3, [r7, #32]
 8003386:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003396:	601a      	str	r2, [r3, #0]
 8003398:	e18c      	b.n	80036b4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d11b      	bne.n	80033da <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	681a      	ldr	r2, [r3, #0]
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033b0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033b2:	2300      	movs	r3, #0
 80033b4:	61fb      	str	r3, [r7, #28]
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	695b      	ldr	r3, [r3, #20]
 80033bc:	61fb      	str	r3, [r7, #28]
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	699b      	ldr	r3, [r3, #24]
 80033c4:	61fb      	str	r3, [r7, #28]
 80033c6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033d6:	601a      	str	r2, [r3, #0]
 80033d8:	e16c      	b.n	80036b4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033de:	2b02      	cmp	r3, #2
 80033e0:	d11b      	bne.n	800341a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033f0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	681a      	ldr	r2, [r3, #0]
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003400:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003402:	2300      	movs	r3, #0
 8003404:	61bb      	str	r3, [r7, #24]
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	695b      	ldr	r3, [r3, #20]
 800340c:	61bb      	str	r3, [r7, #24]
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	699b      	ldr	r3, [r3, #24]
 8003414:	61bb      	str	r3, [r7, #24]
 8003416:	69bb      	ldr	r3, [r7, #24]
 8003418:	e14c      	b.n	80036b4 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003428:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800342a:	2300      	movs	r3, #0
 800342c:	617b      	str	r3, [r7, #20]
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	695b      	ldr	r3, [r3, #20]
 8003434:	617b      	str	r3, [r7, #20]
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	699b      	ldr	r3, [r3, #24]
 800343c:	617b      	str	r3, [r7, #20]
 800343e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003440:	e138      	b.n	80036b4 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003446:	2b03      	cmp	r3, #3
 8003448:	f200 80f1 	bhi.w	800362e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003450:	2b01      	cmp	r3, #1
 8003452:	d123      	bne.n	800349c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003454:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003456:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003458:	68f8      	ldr	r0, [r7, #12]
 800345a:	f000 fbeb 	bl	8003c34 <I2C_WaitOnRXNEFlagUntilTimeout>
 800345e:	4603      	mov	r3, r0
 8003460:	2b00      	cmp	r3, #0
 8003462:	d001      	beq.n	8003468 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003464:	2301      	movs	r3, #1
 8003466:	e139      	b.n	80036dc <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	691a      	ldr	r2, [r3, #16]
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003472:	b2d2      	uxtb	r2, r2
 8003474:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800347a:	1c5a      	adds	r2, r3, #1
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003484:	3b01      	subs	r3, #1
 8003486:	b29a      	uxth	r2, r3
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003490:	b29b      	uxth	r3, r3
 8003492:	3b01      	subs	r3, #1
 8003494:	b29a      	uxth	r2, r3
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	855a      	strh	r2, [r3, #42]	; 0x2a
 800349a:	e10b      	b.n	80036b4 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034a0:	2b02      	cmp	r3, #2
 80034a2:	d14e      	bne.n	8003542 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80034a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a6:	9300      	str	r3, [sp, #0]
 80034a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034aa:	2200      	movs	r2, #0
 80034ac:	4906      	ldr	r1, [pc, #24]	; (80034c8 <HAL_I2C_Master_Receive+0x22c>)
 80034ae:	68f8      	ldr	r0, [r7, #12]
 80034b0:	f000 fa68 	bl	8003984 <I2C_WaitOnFlagUntilTimeout>
 80034b4:	4603      	mov	r3, r0
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d008      	beq.n	80034cc <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	e10e      	b.n	80036dc <HAL_I2C_Master_Receive+0x440>
 80034be:	bf00      	nop
 80034c0:	00100002 	.word	0x00100002
 80034c4:	ffff0000 	.word	0xffff0000
 80034c8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034da:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	691a      	ldr	r2, [r3, #16]
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e6:	b2d2      	uxtb	r2, r2
 80034e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ee:	1c5a      	adds	r2, r3, #1
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034f8:	3b01      	subs	r3, #1
 80034fa:	b29a      	uxth	r2, r3
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003504:	b29b      	uxth	r3, r3
 8003506:	3b01      	subs	r3, #1
 8003508:	b29a      	uxth	r2, r3
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	691a      	ldr	r2, [r3, #16]
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003518:	b2d2      	uxtb	r2, r2
 800351a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003520:	1c5a      	adds	r2, r3, #1
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800352a:	3b01      	subs	r3, #1
 800352c:	b29a      	uxth	r2, r3
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003536:	b29b      	uxth	r3, r3
 8003538:	3b01      	subs	r3, #1
 800353a:	b29a      	uxth	r2, r3
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003540:	e0b8      	b.n	80036b4 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003544:	9300      	str	r3, [sp, #0]
 8003546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003548:	2200      	movs	r2, #0
 800354a:	4966      	ldr	r1, [pc, #408]	; (80036e4 <HAL_I2C_Master_Receive+0x448>)
 800354c:	68f8      	ldr	r0, [r7, #12]
 800354e:	f000 fa19 	bl	8003984 <I2C_WaitOnFlagUntilTimeout>
 8003552:	4603      	mov	r3, r0
 8003554:	2b00      	cmp	r3, #0
 8003556:	d001      	beq.n	800355c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003558:	2301      	movs	r3, #1
 800355a:	e0bf      	b.n	80036dc <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800356a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	691a      	ldr	r2, [r3, #16]
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003576:	b2d2      	uxtb	r2, r2
 8003578:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800357e:	1c5a      	adds	r2, r3, #1
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003588:	3b01      	subs	r3, #1
 800358a:	b29a      	uxth	r2, r3
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003594:	b29b      	uxth	r3, r3
 8003596:	3b01      	subs	r3, #1
 8003598:	b29a      	uxth	r2, r3
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800359e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a0:	9300      	str	r3, [sp, #0]
 80035a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035a4:	2200      	movs	r2, #0
 80035a6:	494f      	ldr	r1, [pc, #316]	; (80036e4 <HAL_I2C_Master_Receive+0x448>)
 80035a8:	68f8      	ldr	r0, [r7, #12]
 80035aa:	f000 f9eb 	bl	8003984 <I2C_WaitOnFlagUntilTimeout>
 80035ae:	4603      	mov	r3, r0
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d001      	beq.n	80035b8 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	e091      	b.n	80036dc <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035c6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	691a      	ldr	r2, [r3, #16]
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d2:	b2d2      	uxtb	r2, r2
 80035d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035da:	1c5a      	adds	r2, r3, #1
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035e4:	3b01      	subs	r3, #1
 80035e6:	b29a      	uxth	r2, r3
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035f0:	b29b      	uxth	r3, r3
 80035f2:	3b01      	subs	r3, #1
 80035f4:	b29a      	uxth	r2, r3
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	691a      	ldr	r2, [r3, #16]
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003604:	b2d2      	uxtb	r2, r2
 8003606:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800360c:	1c5a      	adds	r2, r3, #1
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003616:	3b01      	subs	r3, #1
 8003618:	b29a      	uxth	r2, r3
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003622:	b29b      	uxth	r3, r3
 8003624:	3b01      	subs	r3, #1
 8003626:	b29a      	uxth	r2, r3
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800362c:	e042      	b.n	80036b4 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800362e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003630:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003632:	68f8      	ldr	r0, [r7, #12]
 8003634:	f000 fafe 	bl	8003c34 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003638:	4603      	mov	r3, r0
 800363a:	2b00      	cmp	r3, #0
 800363c:	d001      	beq.n	8003642 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	e04c      	b.n	80036dc <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	691a      	ldr	r2, [r3, #16]
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800364c:	b2d2      	uxtb	r2, r2
 800364e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003654:	1c5a      	adds	r2, r3, #1
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800365e:	3b01      	subs	r3, #1
 8003660:	b29a      	uxth	r2, r3
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800366a:	b29b      	uxth	r3, r3
 800366c:	3b01      	subs	r3, #1
 800366e:	b29a      	uxth	r2, r3
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	695b      	ldr	r3, [r3, #20]
 800367a:	f003 0304 	and.w	r3, r3, #4
 800367e:	2b04      	cmp	r3, #4
 8003680:	d118      	bne.n	80036b4 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	691a      	ldr	r2, [r3, #16]
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800368c:	b2d2      	uxtb	r2, r2
 800368e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003694:	1c5a      	adds	r2, r3, #1
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800369e:	3b01      	subs	r3, #1
 80036a0:	b29a      	uxth	r2, r3
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036aa:	b29b      	uxth	r3, r3
 80036ac:	3b01      	subs	r3, #1
 80036ae:	b29a      	uxth	r2, r3
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	f47f aec2 	bne.w	8003442 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2220      	movs	r2, #32
 80036c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2200      	movs	r2, #0
 80036ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2200      	movs	r2, #0
 80036d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80036d6:	2300      	movs	r3, #0
 80036d8:	e000      	b.n	80036dc <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80036da:	2302      	movs	r3, #2
  }
}
 80036dc:	4618      	mov	r0, r3
 80036de:	3728      	adds	r7, #40	; 0x28
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}
 80036e4:	00010004 	.word	0x00010004

080036e8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b088      	sub	sp, #32
 80036ec:	af02      	add	r7, sp, #8
 80036ee:	60f8      	str	r0, [r7, #12]
 80036f0:	607a      	str	r2, [r7, #4]
 80036f2:	603b      	str	r3, [r7, #0]
 80036f4:	460b      	mov	r3, r1
 80036f6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036fc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	2b08      	cmp	r3, #8
 8003702:	d006      	beq.n	8003712 <I2C_MasterRequestWrite+0x2a>
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	2b01      	cmp	r3, #1
 8003708:	d003      	beq.n	8003712 <I2C_MasterRequestWrite+0x2a>
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003710:	d108      	bne.n	8003724 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003720:	601a      	str	r2, [r3, #0]
 8003722:	e00b      	b.n	800373c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003728:	2b12      	cmp	r3, #18
 800372a:	d107      	bne.n	800373c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800373a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	9300      	str	r3, [sp, #0]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2200      	movs	r2, #0
 8003744:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003748:	68f8      	ldr	r0, [r7, #12]
 800374a:	f000 f91b 	bl	8003984 <I2C_WaitOnFlagUntilTimeout>
 800374e:	4603      	mov	r3, r0
 8003750:	2b00      	cmp	r3, #0
 8003752:	d00c      	beq.n	800376e <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800375e:	2b00      	cmp	r3, #0
 8003760:	d003      	beq.n	800376a <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003768:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800376a:	2303      	movs	r3, #3
 800376c:	e035      	b.n	80037da <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	691b      	ldr	r3, [r3, #16]
 8003772:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003776:	d108      	bne.n	800378a <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003778:	897b      	ldrh	r3, [r7, #10]
 800377a:	b2db      	uxtb	r3, r3
 800377c:	461a      	mov	r2, r3
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003786:	611a      	str	r2, [r3, #16]
 8003788:	e01b      	b.n	80037c2 <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800378a:	897b      	ldrh	r3, [r7, #10]
 800378c:	11db      	asrs	r3, r3, #7
 800378e:	b2db      	uxtb	r3, r3
 8003790:	f003 0306 	and.w	r3, r3, #6
 8003794:	b2db      	uxtb	r3, r3
 8003796:	f063 030f 	orn	r3, r3, #15
 800379a:	b2da      	uxtb	r2, r3
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	687a      	ldr	r2, [r7, #4]
 80037a6:	490f      	ldr	r1, [pc, #60]	; (80037e4 <I2C_MasterRequestWrite+0xfc>)
 80037a8:	68f8      	ldr	r0, [r7, #12]
 80037aa:	f000 f942 	bl	8003a32 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80037ae:	4603      	mov	r3, r0
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d001      	beq.n	80037b8 <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	e010      	b.n	80037da <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80037b8:	897b      	ldrh	r3, [r7, #10]
 80037ba:	b2da      	uxtb	r2, r3
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	687a      	ldr	r2, [r7, #4]
 80037c6:	4908      	ldr	r1, [pc, #32]	; (80037e8 <I2C_MasterRequestWrite+0x100>)
 80037c8:	68f8      	ldr	r0, [r7, #12]
 80037ca:	f000 f932 	bl	8003a32 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80037ce:	4603      	mov	r3, r0
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d001      	beq.n	80037d8 <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	e000      	b.n	80037da <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 80037d8:	2300      	movs	r3, #0
}
 80037da:	4618      	mov	r0, r3
 80037dc:	3718      	adds	r7, #24
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}
 80037e2:	bf00      	nop
 80037e4:	00010008 	.word	0x00010008
 80037e8:	00010002 	.word	0x00010002

080037ec <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b088      	sub	sp, #32
 80037f0:	af02      	add	r7, sp, #8
 80037f2:	60f8      	str	r0, [r7, #12]
 80037f4:	607a      	str	r2, [r7, #4]
 80037f6:	603b      	str	r3, [r7, #0]
 80037f8:	460b      	mov	r3, r1
 80037fa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003800:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	681a      	ldr	r2, [r3, #0]
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003810:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	2b08      	cmp	r3, #8
 8003816:	d006      	beq.n	8003826 <I2C_MasterRequestRead+0x3a>
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	2b01      	cmp	r3, #1
 800381c:	d003      	beq.n	8003826 <I2C_MasterRequestRead+0x3a>
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003824:	d108      	bne.n	8003838 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	681a      	ldr	r2, [r3, #0]
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003834:	601a      	str	r2, [r3, #0]
 8003836:	e00b      	b.n	8003850 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800383c:	2b11      	cmp	r3, #17
 800383e:	d107      	bne.n	8003850 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	681a      	ldr	r2, [r3, #0]
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800384e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	9300      	str	r3, [sp, #0]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2200      	movs	r2, #0
 8003858:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800385c:	68f8      	ldr	r0, [r7, #12]
 800385e:	f000 f891 	bl	8003984 <I2C_WaitOnFlagUntilTimeout>
 8003862:	4603      	mov	r3, r0
 8003864:	2b00      	cmp	r3, #0
 8003866:	d00c      	beq.n	8003882 <I2C_MasterRequestRead+0x96>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003872:	2b00      	cmp	r3, #0
 8003874:	d003      	beq.n	800387e <I2C_MasterRequestRead+0x92>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	f44f 7200 	mov.w	r2, #512	; 0x200
 800387c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800387e:	2303      	movs	r3, #3
 8003880:	e078      	b.n	8003974 <I2C_MasterRequestRead+0x188>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	691b      	ldr	r3, [r3, #16]
 8003886:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800388a:	d108      	bne.n	800389e <I2C_MasterRequestRead+0xb2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800388c:	897b      	ldrh	r3, [r7, #10]
 800388e:	b2db      	uxtb	r3, r3
 8003890:	f043 0301 	orr.w	r3, r3, #1
 8003894:	b2da      	uxtb	r2, r3
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	611a      	str	r2, [r3, #16]
 800389c:	e05e      	b.n	800395c <I2C_MasterRequestRead+0x170>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800389e:	897b      	ldrh	r3, [r7, #10]
 80038a0:	11db      	asrs	r3, r3, #7
 80038a2:	b2db      	uxtb	r3, r3
 80038a4:	f003 0306 	and.w	r3, r3, #6
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	f063 030f 	orn	r3, r3, #15
 80038ae:	b2da      	uxtb	r2, r3
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	687a      	ldr	r2, [r7, #4]
 80038ba:	4930      	ldr	r1, [pc, #192]	; (800397c <I2C_MasterRequestRead+0x190>)
 80038bc:	68f8      	ldr	r0, [r7, #12]
 80038be:	f000 f8b8 	bl	8003a32 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80038c2:	4603      	mov	r3, r0
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d001      	beq.n	80038cc <I2C_MasterRequestRead+0xe0>
    {
      return HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	e053      	b.n	8003974 <I2C_MasterRequestRead+0x188>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80038cc:	897b      	ldrh	r3, [r7, #10]
 80038ce:	b2da      	uxtb	r2, r3
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	687a      	ldr	r2, [r7, #4]
 80038da:	4929      	ldr	r1, [pc, #164]	; (8003980 <I2C_MasterRequestRead+0x194>)
 80038dc:	68f8      	ldr	r0, [r7, #12]
 80038de:	f000 f8a8 	bl	8003a32 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80038e2:	4603      	mov	r3, r0
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d001      	beq.n	80038ec <I2C_MasterRequestRead+0x100>
    {
      return HAL_ERROR;
 80038e8:	2301      	movs	r3, #1
 80038ea:	e043      	b.n	8003974 <I2C_MasterRequestRead+0x188>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038ec:	2300      	movs	r3, #0
 80038ee:	613b      	str	r3, [r7, #16]
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	695b      	ldr	r3, [r3, #20]
 80038f6:	613b      	str	r3, [r7, #16]
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	699b      	ldr	r3, [r3, #24]
 80038fe:	613b      	str	r3, [r7, #16]
 8003900:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003910:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	9300      	str	r3, [sp, #0]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2200      	movs	r2, #0
 800391a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800391e:	68f8      	ldr	r0, [r7, #12]
 8003920:	f000 f830 	bl	8003984 <I2C_WaitOnFlagUntilTimeout>
 8003924:	4603      	mov	r3, r0
 8003926:	2b00      	cmp	r3, #0
 8003928:	d00c      	beq.n	8003944 <I2C_MasterRequestRead+0x158>
    {
      if (hi2c->Instance->CR1 & I2C_CR1_START)
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003934:	2b00      	cmp	r3, #0
 8003936:	d003      	beq.n	8003940 <I2C_MasterRequestRead+0x154>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800393e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8003940:	2303      	movs	r3, #3
 8003942:	e017      	b.n	8003974 <I2C_MasterRequestRead+0x188>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003944:	897b      	ldrh	r3, [r7, #10]
 8003946:	11db      	asrs	r3, r3, #7
 8003948:	b2db      	uxtb	r3, r3
 800394a:	f003 0306 	and.w	r3, r3, #6
 800394e:	b2db      	uxtb	r3, r3
 8003950:	f063 030e 	orn	r3, r3, #14
 8003954:	b2da      	uxtb	r2, r3
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	687a      	ldr	r2, [r7, #4]
 8003960:	4907      	ldr	r1, [pc, #28]	; (8003980 <I2C_MasterRequestRead+0x194>)
 8003962:	68f8      	ldr	r0, [r7, #12]
 8003964:	f000 f865 	bl	8003a32 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003968:	4603      	mov	r3, r0
 800396a:	2b00      	cmp	r3, #0
 800396c:	d001      	beq.n	8003972 <I2C_MasterRequestRead+0x186>
  {
    return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e000      	b.n	8003974 <I2C_MasterRequestRead+0x188>
  }

  return HAL_OK;
 8003972:	2300      	movs	r3, #0
}
 8003974:	4618      	mov	r0, r3
 8003976:	3718      	adds	r7, #24
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}
 800397c:	00010008 	.word	0x00010008
 8003980:	00010002 	.word	0x00010002

08003984 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b084      	sub	sp, #16
 8003988:	af00      	add	r7, sp, #0
 800398a:	60f8      	str	r0, [r7, #12]
 800398c:	60b9      	str	r1, [r7, #8]
 800398e:	603b      	str	r3, [r7, #0]
 8003990:	4613      	mov	r3, r2
 8003992:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003994:	e025      	b.n	80039e2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	f1b3 3fff 	cmp.w	r3, #4294967295
 800399c:	d021      	beq.n	80039e2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800399e:	f7fe fbf5 	bl	800218c <HAL_GetTick>
 80039a2:	4602      	mov	r2, r0
 80039a4:	69bb      	ldr	r3, [r7, #24]
 80039a6:	1ad3      	subs	r3, r2, r3
 80039a8:	683a      	ldr	r2, [r7, #0]
 80039aa:	429a      	cmp	r2, r3
 80039ac:	d302      	bcc.n	80039b4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d116      	bne.n	80039e2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2200      	movs	r2, #0
 80039b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	2220      	movs	r2, #32
 80039be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	2200      	movs	r2, #0
 80039c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ce:	f043 0220 	orr.w	r2, r3, #32
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2200      	movs	r2, #0
 80039da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	e023      	b.n	8003a2a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	0c1b      	lsrs	r3, r3, #16
 80039e6:	b2db      	uxtb	r3, r3
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	d10d      	bne.n	8003a08 <I2C_WaitOnFlagUntilTimeout+0x84>
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	695b      	ldr	r3, [r3, #20]
 80039f2:	43da      	mvns	r2, r3
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	4013      	ands	r3, r2
 80039f8:	b29b      	uxth	r3, r3
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	bf0c      	ite	eq
 80039fe:	2301      	moveq	r3, #1
 8003a00:	2300      	movne	r3, #0
 8003a02:	b2db      	uxtb	r3, r3
 8003a04:	461a      	mov	r2, r3
 8003a06:	e00c      	b.n	8003a22 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	699b      	ldr	r3, [r3, #24]
 8003a0e:	43da      	mvns	r2, r3
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	4013      	ands	r3, r2
 8003a14:	b29b      	uxth	r3, r3
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	bf0c      	ite	eq
 8003a1a:	2301      	moveq	r3, #1
 8003a1c:	2300      	movne	r3, #0
 8003a1e:	b2db      	uxtb	r3, r3
 8003a20:	461a      	mov	r2, r3
 8003a22:	79fb      	ldrb	r3, [r7, #7]
 8003a24:	429a      	cmp	r2, r3
 8003a26:	d0b6      	beq.n	8003996 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003a28:	2300      	movs	r3, #0
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	3710      	adds	r7, #16
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}

08003a32 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003a32:	b580      	push	{r7, lr}
 8003a34:	b084      	sub	sp, #16
 8003a36:	af00      	add	r7, sp, #0
 8003a38:	60f8      	str	r0, [r7, #12]
 8003a3a:	60b9      	str	r1, [r7, #8]
 8003a3c:	607a      	str	r2, [r7, #4]
 8003a3e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003a40:	e051      	b.n	8003ae6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	695b      	ldr	r3, [r3, #20]
 8003a48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a50:	d123      	bne.n	8003a9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	681a      	ldr	r2, [r3, #0]
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a60:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003a6a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2220      	movs	r2, #32
 8003a76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a86:	f043 0204 	orr.w	r2, r3, #4
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2200      	movs	r2, #0
 8003a92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	e046      	b.n	8003b28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aa0:	d021      	beq.n	8003ae6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003aa2:	f7fe fb73 	bl	800218c <HAL_GetTick>
 8003aa6:	4602      	mov	r2, r0
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	1ad3      	subs	r3, r2, r3
 8003aac:	687a      	ldr	r2, [r7, #4]
 8003aae:	429a      	cmp	r2, r3
 8003ab0:	d302      	bcc.n	8003ab8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d116      	bne.n	8003ae6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	2200      	movs	r2, #0
 8003abc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	2220      	movs	r2, #32
 8003ac2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad2:	f043 0220 	orr.w	r2, r3, #32
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	2200      	movs	r2, #0
 8003ade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e020      	b.n	8003b28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	0c1b      	lsrs	r3, r3, #16
 8003aea:	b2db      	uxtb	r3, r3
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d10c      	bne.n	8003b0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	695b      	ldr	r3, [r3, #20]
 8003af6:	43da      	mvns	r2, r3
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	4013      	ands	r3, r2
 8003afc:	b29b      	uxth	r3, r3
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	bf14      	ite	ne
 8003b02:	2301      	movne	r3, #1
 8003b04:	2300      	moveq	r3, #0
 8003b06:	b2db      	uxtb	r3, r3
 8003b08:	e00b      	b.n	8003b22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	699b      	ldr	r3, [r3, #24]
 8003b10:	43da      	mvns	r2, r3
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	4013      	ands	r3, r2
 8003b16:	b29b      	uxth	r3, r3
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	bf14      	ite	ne
 8003b1c:	2301      	movne	r3, #1
 8003b1e:	2300      	moveq	r3, #0
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d18d      	bne.n	8003a42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003b26:	2300      	movs	r3, #0
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	3710      	adds	r7, #16
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}

08003b30 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b084      	sub	sp, #16
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	60f8      	str	r0, [r7, #12]
 8003b38:	60b9      	str	r1, [r7, #8]
 8003b3a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b3c:	e02d      	b.n	8003b9a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003b3e:	68f8      	ldr	r0, [r7, #12]
 8003b40:	f000 f8ce 	bl	8003ce0 <I2C_IsAcknowledgeFailed>
 8003b44:	4603      	mov	r3, r0
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d001      	beq.n	8003b4e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e02d      	b.n	8003baa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b54:	d021      	beq.n	8003b9a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b56:	f7fe fb19 	bl	800218c <HAL_GetTick>
 8003b5a:	4602      	mov	r2, r0
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	1ad3      	subs	r3, r2, r3
 8003b60:	68ba      	ldr	r2, [r7, #8]
 8003b62:	429a      	cmp	r2, r3
 8003b64:	d302      	bcc.n	8003b6c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d116      	bne.n	8003b9a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2220      	movs	r2, #32
 8003b76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b86:	f043 0220 	orr.w	r2, r3, #32
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	2200      	movs	r2, #0
 8003b92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	e007      	b.n	8003baa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	695b      	ldr	r3, [r3, #20]
 8003ba0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ba4:	2b80      	cmp	r3, #128	; 0x80
 8003ba6:	d1ca      	bne.n	8003b3e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003ba8:	2300      	movs	r3, #0
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3710      	adds	r7, #16
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}

08003bb2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003bb2:	b580      	push	{r7, lr}
 8003bb4:	b084      	sub	sp, #16
 8003bb6:	af00      	add	r7, sp, #0
 8003bb8:	60f8      	str	r0, [r7, #12]
 8003bba:	60b9      	str	r1, [r7, #8]
 8003bbc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003bbe:	e02d      	b.n	8003c1c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003bc0:	68f8      	ldr	r0, [r7, #12]
 8003bc2:	f000 f88d 	bl	8003ce0 <I2C_IsAcknowledgeFailed>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d001      	beq.n	8003bd0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	e02d      	b.n	8003c2c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bd6:	d021      	beq.n	8003c1c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bd8:	f7fe fad8 	bl	800218c <HAL_GetTick>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	1ad3      	subs	r3, r2, r3
 8003be2:	68ba      	ldr	r2, [r7, #8]
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d302      	bcc.n	8003bee <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d116      	bne.n	8003c1c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2220      	movs	r2, #32
 8003bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c08:	f043 0220 	orr.w	r2, r3, #32
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2200      	movs	r2, #0
 8003c14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	e007      	b.n	8003c2c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	695b      	ldr	r3, [r3, #20]
 8003c22:	f003 0304 	and.w	r3, r3, #4
 8003c26:	2b04      	cmp	r3, #4
 8003c28:	d1ca      	bne.n	8003bc0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003c2a:	2300      	movs	r3, #0
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	3710      	adds	r7, #16
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd80      	pop	{r7, pc}

08003c34 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b084      	sub	sp, #16
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	60f8      	str	r0, [r7, #12]
 8003c3c:	60b9      	str	r1, [r7, #8]
 8003c3e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003c40:	e042      	b.n	8003cc8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	695b      	ldr	r3, [r3, #20]
 8003c48:	f003 0310 	and.w	r3, r3, #16
 8003c4c:	2b10      	cmp	r3, #16
 8003c4e:	d119      	bne.n	8003c84 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f06f 0210 	mvn.w	r2, #16
 8003c58:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	2220      	movs	r2, #32
 8003c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003c80:	2301      	movs	r3, #1
 8003c82:	e029      	b.n	8003cd8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c84:	f7fe fa82 	bl	800218c <HAL_GetTick>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	1ad3      	subs	r3, r2, r3
 8003c8e:	68ba      	ldr	r2, [r7, #8]
 8003c90:	429a      	cmp	r2, r3
 8003c92:	d302      	bcc.n	8003c9a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d116      	bne.n	8003cc8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	2220      	movs	r2, #32
 8003ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2200      	movs	r2, #0
 8003cac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb4:	f043 0220 	orr.w	r2, r3, #32
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	e007      	b.n	8003cd8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	695b      	ldr	r3, [r3, #20]
 8003cce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cd2:	2b40      	cmp	r3, #64	; 0x40
 8003cd4:	d1b5      	bne.n	8003c42 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003cd6:	2300      	movs	r3, #0
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	3710      	adds	r7, #16
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}

08003ce0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b083      	sub	sp, #12
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	695b      	ldr	r3, [r3, #20]
 8003cee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cf2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cf6:	d11b      	bne.n	8003d30 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003d00:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2200      	movs	r2, #0
 8003d06:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2220      	movs	r2, #32
 8003d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2200      	movs	r2, #0
 8003d14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d1c:	f043 0204 	orr.w	r2, r3, #4
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2200      	movs	r2, #0
 8003d28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	e000      	b.n	8003d32 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003d30:	2300      	movs	r3, #0
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	370c      	adds	r7, #12
 8003d36:	46bd      	mov	sp, r7
 8003d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3c:	4770      	bx	lr
	...

08003d40 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b086      	sub	sp, #24
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d101      	bne.n	8003d52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e25b      	b.n	800420a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 0301 	and.w	r3, r3, #1
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d075      	beq.n	8003e4a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d5e:	4ba3      	ldr	r3, [pc, #652]	; (8003fec <HAL_RCC_OscConfig+0x2ac>)
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	f003 030c 	and.w	r3, r3, #12
 8003d66:	2b04      	cmp	r3, #4
 8003d68:	d00c      	beq.n	8003d84 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d6a:	4ba0      	ldr	r3, [pc, #640]	; (8003fec <HAL_RCC_OscConfig+0x2ac>)
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d72:	2b08      	cmp	r3, #8
 8003d74:	d112      	bne.n	8003d9c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d76:	4b9d      	ldr	r3, [pc, #628]	; (8003fec <HAL_RCC_OscConfig+0x2ac>)
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d7e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d82:	d10b      	bne.n	8003d9c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d84:	4b99      	ldr	r3, [pc, #612]	; (8003fec <HAL_RCC_OscConfig+0x2ac>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d05b      	beq.n	8003e48 <HAL_RCC_OscConfig+0x108>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d157      	bne.n	8003e48 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	e236      	b.n	800420a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003da4:	d106      	bne.n	8003db4 <HAL_RCC_OscConfig+0x74>
 8003da6:	4b91      	ldr	r3, [pc, #580]	; (8003fec <HAL_RCC_OscConfig+0x2ac>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a90      	ldr	r2, [pc, #576]	; (8003fec <HAL_RCC_OscConfig+0x2ac>)
 8003dac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003db0:	6013      	str	r3, [r2, #0]
 8003db2:	e01d      	b.n	8003df0 <HAL_RCC_OscConfig+0xb0>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003dbc:	d10c      	bne.n	8003dd8 <HAL_RCC_OscConfig+0x98>
 8003dbe:	4b8b      	ldr	r3, [pc, #556]	; (8003fec <HAL_RCC_OscConfig+0x2ac>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a8a      	ldr	r2, [pc, #552]	; (8003fec <HAL_RCC_OscConfig+0x2ac>)
 8003dc4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003dc8:	6013      	str	r3, [r2, #0]
 8003dca:	4b88      	ldr	r3, [pc, #544]	; (8003fec <HAL_RCC_OscConfig+0x2ac>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a87      	ldr	r2, [pc, #540]	; (8003fec <HAL_RCC_OscConfig+0x2ac>)
 8003dd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dd4:	6013      	str	r3, [r2, #0]
 8003dd6:	e00b      	b.n	8003df0 <HAL_RCC_OscConfig+0xb0>
 8003dd8:	4b84      	ldr	r3, [pc, #528]	; (8003fec <HAL_RCC_OscConfig+0x2ac>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a83      	ldr	r2, [pc, #524]	; (8003fec <HAL_RCC_OscConfig+0x2ac>)
 8003dde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003de2:	6013      	str	r3, [r2, #0]
 8003de4:	4b81      	ldr	r3, [pc, #516]	; (8003fec <HAL_RCC_OscConfig+0x2ac>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a80      	ldr	r2, [pc, #512]	; (8003fec <HAL_RCC_OscConfig+0x2ac>)
 8003dea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003dee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d013      	beq.n	8003e20 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003df8:	f7fe f9c8 	bl	800218c <HAL_GetTick>
 8003dfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dfe:	e008      	b.n	8003e12 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e00:	f7fe f9c4 	bl	800218c <HAL_GetTick>
 8003e04:	4602      	mov	r2, r0
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	1ad3      	subs	r3, r2, r3
 8003e0a:	2b64      	cmp	r3, #100	; 0x64
 8003e0c:	d901      	bls.n	8003e12 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003e0e:	2303      	movs	r3, #3
 8003e10:	e1fb      	b.n	800420a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e12:	4b76      	ldr	r3, [pc, #472]	; (8003fec <HAL_RCC_OscConfig+0x2ac>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d0f0      	beq.n	8003e00 <HAL_RCC_OscConfig+0xc0>
 8003e1e:	e014      	b.n	8003e4a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e20:	f7fe f9b4 	bl	800218c <HAL_GetTick>
 8003e24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e26:	e008      	b.n	8003e3a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e28:	f7fe f9b0 	bl	800218c <HAL_GetTick>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	1ad3      	subs	r3, r2, r3
 8003e32:	2b64      	cmp	r3, #100	; 0x64
 8003e34:	d901      	bls.n	8003e3a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003e36:	2303      	movs	r3, #3
 8003e38:	e1e7      	b.n	800420a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e3a:	4b6c      	ldr	r3, [pc, #432]	; (8003fec <HAL_RCC_OscConfig+0x2ac>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d1f0      	bne.n	8003e28 <HAL_RCC_OscConfig+0xe8>
 8003e46:	e000      	b.n	8003e4a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f003 0302 	and.w	r3, r3, #2
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d063      	beq.n	8003f1e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e56:	4b65      	ldr	r3, [pc, #404]	; (8003fec <HAL_RCC_OscConfig+0x2ac>)
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	f003 030c 	and.w	r3, r3, #12
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d00b      	beq.n	8003e7a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e62:	4b62      	ldr	r3, [pc, #392]	; (8003fec <HAL_RCC_OscConfig+0x2ac>)
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e6a:	2b08      	cmp	r3, #8
 8003e6c:	d11c      	bne.n	8003ea8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e6e:	4b5f      	ldr	r3, [pc, #380]	; (8003fec <HAL_RCC_OscConfig+0x2ac>)
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d116      	bne.n	8003ea8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e7a:	4b5c      	ldr	r3, [pc, #368]	; (8003fec <HAL_RCC_OscConfig+0x2ac>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f003 0302 	and.w	r3, r3, #2
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d005      	beq.n	8003e92 <HAL_RCC_OscConfig+0x152>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	68db      	ldr	r3, [r3, #12]
 8003e8a:	2b01      	cmp	r3, #1
 8003e8c:	d001      	beq.n	8003e92 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e1bb      	b.n	800420a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e92:	4b56      	ldr	r3, [pc, #344]	; (8003fec <HAL_RCC_OscConfig+0x2ac>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	691b      	ldr	r3, [r3, #16]
 8003e9e:	00db      	lsls	r3, r3, #3
 8003ea0:	4952      	ldr	r1, [pc, #328]	; (8003fec <HAL_RCC_OscConfig+0x2ac>)
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ea6:	e03a      	b.n	8003f1e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	68db      	ldr	r3, [r3, #12]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d020      	beq.n	8003ef2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003eb0:	4b4f      	ldr	r3, [pc, #316]	; (8003ff0 <HAL_RCC_OscConfig+0x2b0>)
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eb6:	f7fe f969 	bl	800218c <HAL_GetTick>
 8003eba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ebc:	e008      	b.n	8003ed0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ebe:	f7fe f965 	bl	800218c <HAL_GetTick>
 8003ec2:	4602      	mov	r2, r0
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	1ad3      	subs	r3, r2, r3
 8003ec8:	2b02      	cmp	r3, #2
 8003eca:	d901      	bls.n	8003ed0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003ecc:	2303      	movs	r3, #3
 8003ece:	e19c      	b.n	800420a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ed0:	4b46      	ldr	r3, [pc, #280]	; (8003fec <HAL_RCC_OscConfig+0x2ac>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f003 0302 	and.w	r3, r3, #2
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d0f0      	beq.n	8003ebe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003edc:	4b43      	ldr	r3, [pc, #268]	; (8003fec <HAL_RCC_OscConfig+0x2ac>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	691b      	ldr	r3, [r3, #16]
 8003ee8:	00db      	lsls	r3, r3, #3
 8003eea:	4940      	ldr	r1, [pc, #256]	; (8003fec <HAL_RCC_OscConfig+0x2ac>)
 8003eec:	4313      	orrs	r3, r2
 8003eee:	600b      	str	r3, [r1, #0]
 8003ef0:	e015      	b.n	8003f1e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ef2:	4b3f      	ldr	r3, [pc, #252]	; (8003ff0 <HAL_RCC_OscConfig+0x2b0>)
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ef8:	f7fe f948 	bl	800218c <HAL_GetTick>
 8003efc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003efe:	e008      	b.n	8003f12 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f00:	f7fe f944 	bl	800218c <HAL_GetTick>
 8003f04:	4602      	mov	r2, r0
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	1ad3      	subs	r3, r2, r3
 8003f0a:	2b02      	cmp	r3, #2
 8003f0c:	d901      	bls.n	8003f12 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003f0e:	2303      	movs	r3, #3
 8003f10:	e17b      	b.n	800420a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f12:	4b36      	ldr	r3, [pc, #216]	; (8003fec <HAL_RCC_OscConfig+0x2ac>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f003 0302 	and.w	r3, r3, #2
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d1f0      	bne.n	8003f00 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f003 0308 	and.w	r3, r3, #8
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d030      	beq.n	8003f8c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	695b      	ldr	r3, [r3, #20]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d016      	beq.n	8003f60 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f32:	4b30      	ldr	r3, [pc, #192]	; (8003ff4 <HAL_RCC_OscConfig+0x2b4>)
 8003f34:	2201      	movs	r2, #1
 8003f36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f38:	f7fe f928 	bl	800218c <HAL_GetTick>
 8003f3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f3e:	e008      	b.n	8003f52 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f40:	f7fe f924 	bl	800218c <HAL_GetTick>
 8003f44:	4602      	mov	r2, r0
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	1ad3      	subs	r3, r2, r3
 8003f4a:	2b02      	cmp	r3, #2
 8003f4c:	d901      	bls.n	8003f52 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003f4e:	2303      	movs	r3, #3
 8003f50:	e15b      	b.n	800420a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f52:	4b26      	ldr	r3, [pc, #152]	; (8003fec <HAL_RCC_OscConfig+0x2ac>)
 8003f54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f56:	f003 0302 	and.w	r3, r3, #2
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d0f0      	beq.n	8003f40 <HAL_RCC_OscConfig+0x200>
 8003f5e:	e015      	b.n	8003f8c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f60:	4b24      	ldr	r3, [pc, #144]	; (8003ff4 <HAL_RCC_OscConfig+0x2b4>)
 8003f62:	2200      	movs	r2, #0
 8003f64:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f66:	f7fe f911 	bl	800218c <HAL_GetTick>
 8003f6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f6c:	e008      	b.n	8003f80 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f6e:	f7fe f90d 	bl	800218c <HAL_GetTick>
 8003f72:	4602      	mov	r2, r0
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	1ad3      	subs	r3, r2, r3
 8003f78:	2b02      	cmp	r3, #2
 8003f7a:	d901      	bls.n	8003f80 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003f7c:	2303      	movs	r3, #3
 8003f7e:	e144      	b.n	800420a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f80:	4b1a      	ldr	r3, [pc, #104]	; (8003fec <HAL_RCC_OscConfig+0x2ac>)
 8003f82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f84:	f003 0302 	and.w	r3, r3, #2
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d1f0      	bne.n	8003f6e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f003 0304 	and.w	r3, r3, #4
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	f000 80a0 	beq.w	80040da <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f9e:	4b13      	ldr	r3, [pc, #76]	; (8003fec <HAL_RCC_OscConfig+0x2ac>)
 8003fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d10f      	bne.n	8003fca <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003faa:	2300      	movs	r3, #0
 8003fac:	60bb      	str	r3, [r7, #8]
 8003fae:	4b0f      	ldr	r3, [pc, #60]	; (8003fec <HAL_RCC_OscConfig+0x2ac>)
 8003fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb2:	4a0e      	ldr	r2, [pc, #56]	; (8003fec <HAL_RCC_OscConfig+0x2ac>)
 8003fb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fb8:	6413      	str	r3, [r2, #64]	; 0x40
 8003fba:	4b0c      	ldr	r3, [pc, #48]	; (8003fec <HAL_RCC_OscConfig+0x2ac>)
 8003fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fc2:	60bb      	str	r3, [r7, #8]
 8003fc4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fca:	4b0b      	ldr	r3, [pc, #44]	; (8003ff8 <HAL_RCC_OscConfig+0x2b8>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d121      	bne.n	800401a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003fd6:	4b08      	ldr	r3, [pc, #32]	; (8003ff8 <HAL_RCC_OscConfig+0x2b8>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a07      	ldr	r2, [pc, #28]	; (8003ff8 <HAL_RCC_OscConfig+0x2b8>)
 8003fdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fe0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fe2:	f7fe f8d3 	bl	800218c <HAL_GetTick>
 8003fe6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fe8:	e011      	b.n	800400e <HAL_RCC_OscConfig+0x2ce>
 8003fea:	bf00      	nop
 8003fec:	40023800 	.word	0x40023800
 8003ff0:	42470000 	.word	0x42470000
 8003ff4:	42470e80 	.word	0x42470e80
 8003ff8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ffc:	f7fe f8c6 	bl	800218c <HAL_GetTick>
 8004000:	4602      	mov	r2, r0
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	1ad3      	subs	r3, r2, r3
 8004006:	2b02      	cmp	r3, #2
 8004008:	d901      	bls.n	800400e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800400a:	2303      	movs	r3, #3
 800400c:	e0fd      	b.n	800420a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800400e:	4b81      	ldr	r3, [pc, #516]	; (8004214 <HAL_RCC_OscConfig+0x4d4>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004016:	2b00      	cmp	r3, #0
 8004018:	d0f0      	beq.n	8003ffc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	2b01      	cmp	r3, #1
 8004020:	d106      	bne.n	8004030 <HAL_RCC_OscConfig+0x2f0>
 8004022:	4b7d      	ldr	r3, [pc, #500]	; (8004218 <HAL_RCC_OscConfig+0x4d8>)
 8004024:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004026:	4a7c      	ldr	r2, [pc, #496]	; (8004218 <HAL_RCC_OscConfig+0x4d8>)
 8004028:	f043 0301 	orr.w	r3, r3, #1
 800402c:	6713      	str	r3, [r2, #112]	; 0x70
 800402e:	e01c      	b.n	800406a <HAL_RCC_OscConfig+0x32a>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	2b05      	cmp	r3, #5
 8004036:	d10c      	bne.n	8004052 <HAL_RCC_OscConfig+0x312>
 8004038:	4b77      	ldr	r3, [pc, #476]	; (8004218 <HAL_RCC_OscConfig+0x4d8>)
 800403a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800403c:	4a76      	ldr	r2, [pc, #472]	; (8004218 <HAL_RCC_OscConfig+0x4d8>)
 800403e:	f043 0304 	orr.w	r3, r3, #4
 8004042:	6713      	str	r3, [r2, #112]	; 0x70
 8004044:	4b74      	ldr	r3, [pc, #464]	; (8004218 <HAL_RCC_OscConfig+0x4d8>)
 8004046:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004048:	4a73      	ldr	r2, [pc, #460]	; (8004218 <HAL_RCC_OscConfig+0x4d8>)
 800404a:	f043 0301 	orr.w	r3, r3, #1
 800404e:	6713      	str	r3, [r2, #112]	; 0x70
 8004050:	e00b      	b.n	800406a <HAL_RCC_OscConfig+0x32a>
 8004052:	4b71      	ldr	r3, [pc, #452]	; (8004218 <HAL_RCC_OscConfig+0x4d8>)
 8004054:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004056:	4a70      	ldr	r2, [pc, #448]	; (8004218 <HAL_RCC_OscConfig+0x4d8>)
 8004058:	f023 0301 	bic.w	r3, r3, #1
 800405c:	6713      	str	r3, [r2, #112]	; 0x70
 800405e:	4b6e      	ldr	r3, [pc, #440]	; (8004218 <HAL_RCC_OscConfig+0x4d8>)
 8004060:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004062:	4a6d      	ldr	r2, [pc, #436]	; (8004218 <HAL_RCC_OscConfig+0x4d8>)
 8004064:	f023 0304 	bic.w	r3, r3, #4
 8004068:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d015      	beq.n	800409e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004072:	f7fe f88b 	bl	800218c <HAL_GetTick>
 8004076:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004078:	e00a      	b.n	8004090 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800407a:	f7fe f887 	bl	800218c <HAL_GetTick>
 800407e:	4602      	mov	r2, r0
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	1ad3      	subs	r3, r2, r3
 8004084:	f241 3288 	movw	r2, #5000	; 0x1388
 8004088:	4293      	cmp	r3, r2
 800408a:	d901      	bls.n	8004090 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800408c:	2303      	movs	r3, #3
 800408e:	e0bc      	b.n	800420a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004090:	4b61      	ldr	r3, [pc, #388]	; (8004218 <HAL_RCC_OscConfig+0x4d8>)
 8004092:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004094:	f003 0302 	and.w	r3, r3, #2
 8004098:	2b00      	cmp	r3, #0
 800409a:	d0ee      	beq.n	800407a <HAL_RCC_OscConfig+0x33a>
 800409c:	e014      	b.n	80040c8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800409e:	f7fe f875 	bl	800218c <HAL_GetTick>
 80040a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040a4:	e00a      	b.n	80040bc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040a6:	f7fe f871 	bl	800218c <HAL_GetTick>
 80040aa:	4602      	mov	r2, r0
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	1ad3      	subs	r3, r2, r3
 80040b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d901      	bls.n	80040bc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80040b8:	2303      	movs	r3, #3
 80040ba:	e0a6      	b.n	800420a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040bc:	4b56      	ldr	r3, [pc, #344]	; (8004218 <HAL_RCC_OscConfig+0x4d8>)
 80040be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040c0:	f003 0302 	and.w	r3, r3, #2
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d1ee      	bne.n	80040a6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80040c8:	7dfb      	ldrb	r3, [r7, #23]
 80040ca:	2b01      	cmp	r3, #1
 80040cc:	d105      	bne.n	80040da <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040ce:	4b52      	ldr	r3, [pc, #328]	; (8004218 <HAL_RCC_OscConfig+0x4d8>)
 80040d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d2:	4a51      	ldr	r2, [pc, #324]	; (8004218 <HAL_RCC_OscConfig+0x4d8>)
 80040d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040d8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	699b      	ldr	r3, [r3, #24]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	f000 8092 	beq.w	8004208 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80040e4:	4b4c      	ldr	r3, [pc, #304]	; (8004218 <HAL_RCC_OscConfig+0x4d8>)
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	f003 030c 	and.w	r3, r3, #12
 80040ec:	2b08      	cmp	r3, #8
 80040ee:	d05c      	beq.n	80041aa <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	699b      	ldr	r3, [r3, #24]
 80040f4:	2b02      	cmp	r3, #2
 80040f6:	d141      	bne.n	800417c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040f8:	4b48      	ldr	r3, [pc, #288]	; (800421c <HAL_RCC_OscConfig+0x4dc>)
 80040fa:	2200      	movs	r2, #0
 80040fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040fe:	f7fe f845 	bl	800218c <HAL_GetTick>
 8004102:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004104:	e008      	b.n	8004118 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004106:	f7fe f841 	bl	800218c <HAL_GetTick>
 800410a:	4602      	mov	r2, r0
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	1ad3      	subs	r3, r2, r3
 8004110:	2b02      	cmp	r3, #2
 8004112:	d901      	bls.n	8004118 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004114:	2303      	movs	r3, #3
 8004116:	e078      	b.n	800420a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004118:	4b3f      	ldr	r3, [pc, #252]	; (8004218 <HAL_RCC_OscConfig+0x4d8>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004120:	2b00      	cmp	r3, #0
 8004122:	d1f0      	bne.n	8004106 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	69da      	ldr	r2, [r3, #28]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6a1b      	ldr	r3, [r3, #32]
 800412c:	431a      	orrs	r2, r3
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004132:	019b      	lsls	r3, r3, #6
 8004134:	431a      	orrs	r2, r3
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800413a:	085b      	lsrs	r3, r3, #1
 800413c:	3b01      	subs	r3, #1
 800413e:	041b      	lsls	r3, r3, #16
 8004140:	431a      	orrs	r2, r3
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004146:	061b      	lsls	r3, r3, #24
 8004148:	4933      	ldr	r1, [pc, #204]	; (8004218 <HAL_RCC_OscConfig+0x4d8>)
 800414a:	4313      	orrs	r3, r2
 800414c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800414e:	4b33      	ldr	r3, [pc, #204]	; (800421c <HAL_RCC_OscConfig+0x4dc>)
 8004150:	2201      	movs	r2, #1
 8004152:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004154:	f7fe f81a 	bl	800218c <HAL_GetTick>
 8004158:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800415a:	e008      	b.n	800416e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800415c:	f7fe f816 	bl	800218c <HAL_GetTick>
 8004160:	4602      	mov	r2, r0
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	1ad3      	subs	r3, r2, r3
 8004166:	2b02      	cmp	r3, #2
 8004168:	d901      	bls.n	800416e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800416a:	2303      	movs	r3, #3
 800416c:	e04d      	b.n	800420a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800416e:	4b2a      	ldr	r3, [pc, #168]	; (8004218 <HAL_RCC_OscConfig+0x4d8>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004176:	2b00      	cmp	r3, #0
 8004178:	d0f0      	beq.n	800415c <HAL_RCC_OscConfig+0x41c>
 800417a:	e045      	b.n	8004208 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800417c:	4b27      	ldr	r3, [pc, #156]	; (800421c <HAL_RCC_OscConfig+0x4dc>)
 800417e:	2200      	movs	r2, #0
 8004180:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004182:	f7fe f803 	bl	800218c <HAL_GetTick>
 8004186:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004188:	e008      	b.n	800419c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800418a:	f7fd ffff 	bl	800218c <HAL_GetTick>
 800418e:	4602      	mov	r2, r0
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	1ad3      	subs	r3, r2, r3
 8004194:	2b02      	cmp	r3, #2
 8004196:	d901      	bls.n	800419c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004198:	2303      	movs	r3, #3
 800419a:	e036      	b.n	800420a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800419c:	4b1e      	ldr	r3, [pc, #120]	; (8004218 <HAL_RCC_OscConfig+0x4d8>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d1f0      	bne.n	800418a <HAL_RCC_OscConfig+0x44a>
 80041a8:	e02e      	b.n	8004208 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	699b      	ldr	r3, [r3, #24]
 80041ae:	2b01      	cmp	r3, #1
 80041b0:	d101      	bne.n	80041b6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	e029      	b.n	800420a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80041b6:	4b18      	ldr	r3, [pc, #96]	; (8004218 <HAL_RCC_OscConfig+0x4d8>)
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	69db      	ldr	r3, [r3, #28]
 80041c6:	429a      	cmp	r2, r3
 80041c8:	d11c      	bne.n	8004204 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041d4:	429a      	cmp	r2, r3
 80041d6:	d115      	bne.n	8004204 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80041d8:	68fa      	ldr	r2, [r7, #12]
 80041da:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80041de:	4013      	ands	r3, r2
 80041e0:	687a      	ldr	r2, [r7, #4]
 80041e2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d10d      	bne.n	8004204 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80041f2:	429a      	cmp	r2, r3
 80041f4:	d106      	bne.n	8004204 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004200:	429a      	cmp	r2, r3
 8004202:	d001      	beq.n	8004208 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	e000      	b.n	800420a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004208:	2300      	movs	r3, #0
}
 800420a:	4618      	mov	r0, r3
 800420c:	3718      	adds	r7, #24
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}
 8004212:	bf00      	nop
 8004214:	40007000 	.word	0x40007000
 8004218:	40023800 	.word	0x40023800
 800421c:	42470060 	.word	0x42470060

08004220 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b084      	sub	sp, #16
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
 8004228:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d101      	bne.n	8004234 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004230:	2301      	movs	r3, #1
 8004232:	e0cc      	b.n	80043ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004234:	4b68      	ldr	r3, [pc, #416]	; (80043d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f003 030f 	and.w	r3, r3, #15
 800423c:	683a      	ldr	r2, [r7, #0]
 800423e:	429a      	cmp	r2, r3
 8004240:	d90c      	bls.n	800425c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004242:	4b65      	ldr	r3, [pc, #404]	; (80043d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004244:	683a      	ldr	r2, [r7, #0]
 8004246:	b2d2      	uxtb	r2, r2
 8004248:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800424a:	4b63      	ldr	r3, [pc, #396]	; (80043d8 <HAL_RCC_ClockConfig+0x1b8>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f003 030f 	and.w	r3, r3, #15
 8004252:	683a      	ldr	r2, [r7, #0]
 8004254:	429a      	cmp	r2, r3
 8004256:	d001      	beq.n	800425c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004258:	2301      	movs	r3, #1
 800425a:	e0b8      	b.n	80043ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f003 0302 	and.w	r3, r3, #2
 8004264:	2b00      	cmp	r3, #0
 8004266:	d020      	beq.n	80042aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f003 0304 	and.w	r3, r3, #4
 8004270:	2b00      	cmp	r3, #0
 8004272:	d005      	beq.n	8004280 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004274:	4b59      	ldr	r3, [pc, #356]	; (80043dc <HAL_RCC_ClockConfig+0x1bc>)
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	4a58      	ldr	r2, [pc, #352]	; (80043dc <HAL_RCC_ClockConfig+0x1bc>)
 800427a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800427e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f003 0308 	and.w	r3, r3, #8
 8004288:	2b00      	cmp	r3, #0
 800428a:	d005      	beq.n	8004298 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800428c:	4b53      	ldr	r3, [pc, #332]	; (80043dc <HAL_RCC_ClockConfig+0x1bc>)
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	4a52      	ldr	r2, [pc, #328]	; (80043dc <HAL_RCC_ClockConfig+0x1bc>)
 8004292:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004296:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004298:	4b50      	ldr	r3, [pc, #320]	; (80043dc <HAL_RCC_ClockConfig+0x1bc>)
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	494d      	ldr	r1, [pc, #308]	; (80043dc <HAL_RCC_ClockConfig+0x1bc>)
 80042a6:	4313      	orrs	r3, r2
 80042a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 0301 	and.w	r3, r3, #1
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d044      	beq.n	8004340 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	2b01      	cmp	r3, #1
 80042bc:	d107      	bne.n	80042ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042be:	4b47      	ldr	r3, [pc, #284]	; (80043dc <HAL_RCC_ClockConfig+0x1bc>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d119      	bne.n	80042fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	e07f      	b.n	80043ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	2b02      	cmp	r3, #2
 80042d4:	d003      	beq.n	80042de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80042da:	2b03      	cmp	r3, #3
 80042dc:	d107      	bne.n	80042ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042de:	4b3f      	ldr	r3, [pc, #252]	; (80043dc <HAL_RCC_ClockConfig+0x1bc>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d109      	bne.n	80042fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	e06f      	b.n	80043ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042ee:	4b3b      	ldr	r3, [pc, #236]	; (80043dc <HAL_RCC_ClockConfig+0x1bc>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f003 0302 	and.w	r3, r3, #2
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d101      	bne.n	80042fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	e067      	b.n	80043ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80042fe:	4b37      	ldr	r3, [pc, #220]	; (80043dc <HAL_RCC_ClockConfig+0x1bc>)
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	f023 0203 	bic.w	r2, r3, #3
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	4934      	ldr	r1, [pc, #208]	; (80043dc <HAL_RCC_ClockConfig+0x1bc>)
 800430c:	4313      	orrs	r3, r2
 800430e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004310:	f7fd ff3c 	bl	800218c <HAL_GetTick>
 8004314:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004316:	e00a      	b.n	800432e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004318:	f7fd ff38 	bl	800218c <HAL_GetTick>
 800431c:	4602      	mov	r2, r0
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	1ad3      	subs	r3, r2, r3
 8004322:	f241 3288 	movw	r2, #5000	; 0x1388
 8004326:	4293      	cmp	r3, r2
 8004328:	d901      	bls.n	800432e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800432a:	2303      	movs	r3, #3
 800432c:	e04f      	b.n	80043ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800432e:	4b2b      	ldr	r3, [pc, #172]	; (80043dc <HAL_RCC_ClockConfig+0x1bc>)
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	f003 020c 	and.w	r2, r3, #12
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	009b      	lsls	r3, r3, #2
 800433c:	429a      	cmp	r2, r3
 800433e:	d1eb      	bne.n	8004318 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004340:	4b25      	ldr	r3, [pc, #148]	; (80043d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f003 030f 	and.w	r3, r3, #15
 8004348:	683a      	ldr	r2, [r7, #0]
 800434a:	429a      	cmp	r2, r3
 800434c:	d20c      	bcs.n	8004368 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800434e:	4b22      	ldr	r3, [pc, #136]	; (80043d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004350:	683a      	ldr	r2, [r7, #0]
 8004352:	b2d2      	uxtb	r2, r2
 8004354:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004356:	4b20      	ldr	r3, [pc, #128]	; (80043d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f003 030f 	and.w	r3, r3, #15
 800435e:	683a      	ldr	r2, [r7, #0]
 8004360:	429a      	cmp	r2, r3
 8004362:	d001      	beq.n	8004368 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004364:	2301      	movs	r3, #1
 8004366:	e032      	b.n	80043ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f003 0304 	and.w	r3, r3, #4
 8004370:	2b00      	cmp	r3, #0
 8004372:	d008      	beq.n	8004386 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004374:	4b19      	ldr	r3, [pc, #100]	; (80043dc <HAL_RCC_ClockConfig+0x1bc>)
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	68db      	ldr	r3, [r3, #12]
 8004380:	4916      	ldr	r1, [pc, #88]	; (80043dc <HAL_RCC_ClockConfig+0x1bc>)
 8004382:	4313      	orrs	r3, r2
 8004384:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f003 0308 	and.w	r3, r3, #8
 800438e:	2b00      	cmp	r3, #0
 8004390:	d009      	beq.n	80043a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004392:	4b12      	ldr	r3, [pc, #72]	; (80043dc <HAL_RCC_ClockConfig+0x1bc>)
 8004394:	689b      	ldr	r3, [r3, #8]
 8004396:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	691b      	ldr	r3, [r3, #16]
 800439e:	00db      	lsls	r3, r3, #3
 80043a0:	490e      	ldr	r1, [pc, #56]	; (80043dc <HAL_RCC_ClockConfig+0x1bc>)
 80043a2:	4313      	orrs	r3, r2
 80043a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80043a6:	f000 f821 	bl	80043ec <HAL_RCC_GetSysClockFreq>
 80043aa:	4601      	mov	r1, r0
 80043ac:	4b0b      	ldr	r3, [pc, #44]	; (80043dc <HAL_RCC_ClockConfig+0x1bc>)
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	091b      	lsrs	r3, r3, #4
 80043b2:	f003 030f 	and.w	r3, r3, #15
 80043b6:	4a0a      	ldr	r2, [pc, #40]	; (80043e0 <HAL_RCC_ClockConfig+0x1c0>)
 80043b8:	5cd3      	ldrb	r3, [r2, r3]
 80043ba:	fa21 f303 	lsr.w	r3, r1, r3
 80043be:	4a09      	ldr	r2, [pc, #36]	; (80043e4 <HAL_RCC_ClockConfig+0x1c4>)
 80043c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80043c2:	4b09      	ldr	r3, [pc, #36]	; (80043e8 <HAL_RCC_ClockConfig+0x1c8>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4618      	mov	r0, r3
 80043c8:	f7fd fdd8 	bl	8001f7c <HAL_InitTick>

  return HAL_OK;
 80043cc:	2300      	movs	r3, #0
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	3710      	adds	r7, #16
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}
 80043d6:	bf00      	nop
 80043d8:	40023c00 	.word	0x40023c00
 80043dc:	40023800 	.word	0x40023800
 80043e0:	08009114 	.word	0x08009114
 80043e4:	20000000 	.word	0x20000000
 80043e8:	20000004 	.word	0x20000004

080043ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043ee:	b085      	sub	sp, #20
 80043f0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80043f2:	2300      	movs	r3, #0
 80043f4:	607b      	str	r3, [r7, #4]
 80043f6:	2300      	movs	r3, #0
 80043f8:	60fb      	str	r3, [r7, #12]
 80043fa:	2300      	movs	r3, #0
 80043fc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80043fe:	2300      	movs	r3, #0
 8004400:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004402:	4b50      	ldr	r3, [pc, #320]	; (8004544 <HAL_RCC_GetSysClockFreq+0x158>)
 8004404:	689b      	ldr	r3, [r3, #8]
 8004406:	f003 030c 	and.w	r3, r3, #12
 800440a:	2b04      	cmp	r3, #4
 800440c:	d007      	beq.n	800441e <HAL_RCC_GetSysClockFreq+0x32>
 800440e:	2b08      	cmp	r3, #8
 8004410:	d008      	beq.n	8004424 <HAL_RCC_GetSysClockFreq+0x38>
 8004412:	2b00      	cmp	r3, #0
 8004414:	f040 808d 	bne.w	8004532 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004418:	4b4b      	ldr	r3, [pc, #300]	; (8004548 <HAL_RCC_GetSysClockFreq+0x15c>)
 800441a:	60bb      	str	r3, [r7, #8]
       break;
 800441c:	e08c      	b.n	8004538 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800441e:	4b4b      	ldr	r3, [pc, #300]	; (800454c <HAL_RCC_GetSysClockFreq+0x160>)
 8004420:	60bb      	str	r3, [r7, #8]
      break;
 8004422:	e089      	b.n	8004538 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004424:	4b47      	ldr	r3, [pc, #284]	; (8004544 <HAL_RCC_GetSysClockFreq+0x158>)
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800442c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800442e:	4b45      	ldr	r3, [pc, #276]	; (8004544 <HAL_RCC_GetSysClockFreq+0x158>)
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004436:	2b00      	cmp	r3, #0
 8004438:	d023      	beq.n	8004482 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800443a:	4b42      	ldr	r3, [pc, #264]	; (8004544 <HAL_RCC_GetSysClockFreq+0x158>)
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	099b      	lsrs	r3, r3, #6
 8004440:	f04f 0400 	mov.w	r4, #0
 8004444:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004448:	f04f 0200 	mov.w	r2, #0
 800444c:	ea03 0501 	and.w	r5, r3, r1
 8004450:	ea04 0602 	and.w	r6, r4, r2
 8004454:	4a3d      	ldr	r2, [pc, #244]	; (800454c <HAL_RCC_GetSysClockFreq+0x160>)
 8004456:	fb02 f106 	mul.w	r1, r2, r6
 800445a:	2200      	movs	r2, #0
 800445c:	fb02 f205 	mul.w	r2, r2, r5
 8004460:	440a      	add	r2, r1
 8004462:	493a      	ldr	r1, [pc, #232]	; (800454c <HAL_RCC_GetSysClockFreq+0x160>)
 8004464:	fba5 0101 	umull	r0, r1, r5, r1
 8004468:	1853      	adds	r3, r2, r1
 800446a:	4619      	mov	r1, r3
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	f04f 0400 	mov.w	r4, #0
 8004472:	461a      	mov	r2, r3
 8004474:	4623      	mov	r3, r4
 8004476:	f7fc fb37 	bl	8000ae8 <__aeabi_uldivmod>
 800447a:	4603      	mov	r3, r0
 800447c:	460c      	mov	r4, r1
 800447e:	60fb      	str	r3, [r7, #12]
 8004480:	e049      	b.n	8004516 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004482:	4b30      	ldr	r3, [pc, #192]	; (8004544 <HAL_RCC_GetSysClockFreq+0x158>)
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	099b      	lsrs	r3, r3, #6
 8004488:	f04f 0400 	mov.w	r4, #0
 800448c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004490:	f04f 0200 	mov.w	r2, #0
 8004494:	ea03 0501 	and.w	r5, r3, r1
 8004498:	ea04 0602 	and.w	r6, r4, r2
 800449c:	4629      	mov	r1, r5
 800449e:	4632      	mov	r2, r6
 80044a0:	f04f 0300 	mov.w	r3, #0
 80044a4:	f04f 0400 	mov.w	r4, #0
 80044a8:	0154      	lsls	r4, r2, #5
 80044aa:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80044ae:	014b      	lsls	r3, r1, #5
 80044b0:	4619      	mov	r1, r3
 80044b2:	4622      	mov	r2, r4
 80044b4:	1b49      	subs	r1, r1, r5
 80044b6:	eb62 0206 	sbc.w	r2, r2, r6
 80044ba:	f04f 0300 	mov.w	r3, #0
 80044be:	f04f 0400 	mov.w	r4, #0
 80044c2:	0194      	lsls	r4, r2, #6
 80044c4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80044c8:	018b      	lsls	r3, r1, #6
 80044ca:	1a5b      	subs	r3, r3, r1
 80044cc:	eb64 0402 	sbc.w	r4, r4, r2
 80044d0:	f04f 0100 	mov.w	r1, #0
 80044d4:	f04f 0200 	mov.w	r2, #0
 80044d8:	00e2      	lsls	r2, r4, #3
 80044da:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80044de:	00d9      	lsls	r1, r3, #3
 80044e0:	460b      	mov	r3, r1
 80044e2:	4614      	mov	r4, r2
 80044e4:	195b      	adds	r3, r3, r5
 80044e6:	eb44 0406 	adc.w	r4, r4, r6
 80044ea:	f04f 0100 	mov.w	r1, #0
 80044ee:	f04f 0200 	mov.w	r2, #0
 80044f2:	02a2      	lsls	r2, r4, #10
 80044f4:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80044f8:	0299      	lsls	r1, r3, #10
 80044fa:	460b      	mov	r3, r1
 80044fc:	4614      	mov	r4, r2
 80044fe:	4618      	mov	r0, r3
 8004500:	4621      	mov	r1, r4
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	f04f 0400 	mov.w	r4, #0
 8004508:	461a      	mov	r2, r3
 800450a:	4623      	mov	r3, r4
 800450c:	f7fc faec 	bl	8000ae8 <__aeabi_uldivmod>
 8004510:	4603      	mov	r3, r0
 8004512:	460c      	mov	r4, r1
 8004514:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004516:	4b0b      	ldr	r3, [pc, #44]	; (8004544 <HAL_RCC_GetSysClockFreq+0x158>)
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	0c1b      	lsrs	r3, r3, #16
 800451c:	f003 0303 	and.w	r3, r3, #3
 8004520:	3301      	adds	r3, #1
 8004522:	005b      	lsls	r3, r3, #1
 8004524:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004526:	68fa      	ldr	r2, [r7, #12]
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	fbb2 f3f3 	udiv	r3, r2, r3
 800452e:	60bb      	str	r3, [r7, #8]
      break;
 8004530:	e002      	b.n	8004538 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004532:	4b05      	ldr	r3, [pc, #20]	; (8004548 <HAL_RCC_GetSysClockFreq+0x15c>)
 8004534:	60bb      	str	r3, [r7, #8]
      break;
 8004536:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004538:	68bb      	ldr	r3, [r7, #8]
}
 800453a:	4618      	mov	r0, r3
 800453c:	3714      	adds	r7, #20
 800453e:	46bd      	mov	sp, r7
 8004540:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004542:	bf00      	nop
 8004544:	40023800 	.word	0x40023800
 8004548:	00f42400 	.word	0x00f42400
 800454c:	017d7840 	.word	0x017d7840

08004550 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004550:	b480      	push	{r7}
 8004552:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004554:	4b03      	ldr	r3, [pc, #12]	; (8004564 <HAL_RCC_GetHCLKFreq+0x14>)
 8004556:	681b      	ldr	r3, [r3, #0]
}
 8004558:	4618      	mov	r0, r3
 800455a:	46bd      	mov	sp, r7
 800455c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004560:	4770      	bx	lr
 8004562:	bf00      	nop
 8004564:	20000000 	.word	0x20000000

08004568 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800456c:	f7ff fff0 	bl	8004550 <HAL_RCC_GetHCLKFreq>
 8004570:	4601      	mov	r1, r0
 8004572:	4b05      	ldr	r3, [pc, #20]	; (8004588 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	0a9b      	lsrs	r3, r3, #10
 8004578:	f003 0307 	and.w	r3, r3, #7
 800457c:	4a03      	ldr	r2, [pc, #12]	; (800458c <HAL_RCC_GetPCLK1Freq+0x24>)
 800457e:	5cd3      	ldrb	r3, [r2, r3]
 8004580:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004584:	4618      	mov	r0, r3
 8004586:	bd80      	pop	{r7, pc}
 8004588:	40023800 	.word	0x40023800
 800458c:	08009124 	.word	0x08009124

08004590 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004594:	f7ff ffdc 	bl	8004550 <HAL_RCC_GetHCLKFreq>
 8004598:	4601      	mov	r1, r0
 800459a:	4b05      	ldr	r3, [pc, #20]	; (80045b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800459c:	689b      	ldr	r3, [r3, #8]
 800459e:	0b5b      	lsrs	r3, r3, #13
 80045a0:	f003 0307 	and.w	r3, r3, #7
 80045a4:	4a03      	ldr	r2, [pc, #12]	; (80045b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80045a6:	5cd3      	ldrb	r3, [r2, r3]
 80045a8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	bd80      	pop	{r7, pc}
 80045b0:	40023800 	.word	0x40023800
 80045b4:	08009124 	.word	0x08009124

080045b8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b083      	sub	sp, #12
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
 80045c0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	220f      	movs	r2, #15
 80045c6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80045c8:	4b12      	ldr	r3, [pc, #72]	; (8004614 <HAL_RCC_GetClockConfig+0x5c>)
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	f003 0203 	and.w	r2, r3, #3
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80045d4:	4b0f      	ldr	r3, [pc, #60]	; (8004614 <HAL_RCC_GetClockConfig+0x5c>)
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80045e0:	4b0c      	ldr	r3, [pc, #48]	; (8004614 <HAL_RCC_GetClockConfig+0x5c>)
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80045ec:	4b09      	ldr	r3, [pc, #36]	; (8004614 <HAL_RCC_GetClockConfig+0x5c>)
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	08db      	lsrs	r3, r3, #3
 80045f2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80045fa:	4b07      	ldr	r3, [pc, #28]	; (8004618 <HAL_RCC_GetClockConfig+0x60>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f003 020f 	and.w	r2, r3, #15
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	601a      	str	r2, [r3, #0]
}
 8004606:	bf00      	nop
 8004608:	370c      	adds	r7, #12
 800460a:	46bd      	mov	sp, r7
 800460c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004610:	4770      	bx	lr
 8004612:	bf00      	nop
 8004614:	40023800 	.word	0x40023800
 8004618:	40023c00 	.word	0x40023c00

0800461c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b082      	sub	sp, #8
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d101      	bne.n	800462e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800462a:	2301      	movs	r3, #1
 800462c:	e01d      	b.n	800466a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004634:	b2db      	uxtb	r3, r3
 8004636:	2b00      	cmp	r3, #0
 8004638:	d106      	bne.n	8004648 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2200      	movs	r2, #0
 800463e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	f000 f815 	bl	8004672 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2202      	movs	r2, #2
 800464c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681a      	ldr	r2, [r3, #0]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	3304      	adds	r3, #4
 8004658:	4619      	mov	r1, r3
 800465a:	4610      	mov	r0, r2
 800465c:	f000 f968 	bl	8004930 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2201      	movs	r2, #1
 8004664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004668:	2300      	movs	r3, #0
}
 800466a:	4618      	mov	r0, r3
 800466c:	3708      	adds	r7, #8
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}

08004672 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004672:	b480      	push	{r7}
 8004674:	b083      	sub	sp, #12
 8004676:	af00      	add	r7, sp, #0
 8004678:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800467a:	bf00      	nop
 800467c:	370c      	adds	r7, #12
 800467e:	46bd      	mov	sp, r7
 8004680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004684:	4770      	bx	lr

08004686 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004686:	b480      	push	{r7}
 8004688:	b085      	sub	sp, #20
 800468a:	af00      	add	r7, sp, #0
 800468c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	68da      	ldr	r2, [r3, #12]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f042 0201 	orr.w	r2, r2, #1
 800469c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	689b      	ldr	r3, [r3, #8]
 80046a4:	f003 0307 	and.w	r3, r3, #7
 80046a8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2b06      	cmp	r3, #6
 80046ae:	d007      	beq.n	80046c0 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	681a      	ldr	r2, [r3, #0]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f042 0201 	orr.w	r2, r2, #1
 80046be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80046c0:	2300      	movs	r3, #0
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	3714      	adds	r7, #20
 80046c6:	46bd      	mov	sp, r7
 80046c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046cc:	4770      	bx	lr

080046ce <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80046ce:	b580      	push	{r7, lr}
 80046d0:	b082      	sub	sp, #8
 80046d2:	af00      	add	r7, sp, #0
 80046d4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	691b      	ldr	r3, [r3, #16]
 80046dc:	f003 0302 	and.w	r3, r3, #2
 80046e0:	2b02      	cmp	r3, #2
 80046e2:	d122      	bne.n	800472a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	68db      	ldr	r3, [r3, #12]
 80046ea:	f003 0302 	and.w	r3, r3, #2
 80046ee:	2b02      	cmp	r3, #2
 80046f0:	d11b      	bne.n	800472a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f06f 0202 	mvn.w	r2, #2
 80046fa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2201      	movs	r2, #1
 8004700:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	699b      	ldr	r3, [r3, #24]
 8004708:	f003 0303 	and.w	r3, r3, #3
 800470c:	2b00      	cmp	r3, #0
 800470e:	d003      	beq.n	8004718 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004710:	6878      	ldr	r0, [r7, #4]
 8004712:	f000 f8ee 	bl	80048f2 <HAL_TIM_IC_CaptureCallback>
 8004716:	e005      	b.n	8004724 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004718:	6878      	ldr	r0, [r7, #4]
 800471a:	f000 f8e0 	bl	80048de <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800471e:	6878      	ldr	r0, [r7, #4]
 8004720:	f000 f8f1 	bl	8004906 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2200      	movs	r2, #0
 8004728:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	691b      	ldr	r3, [r3, #16]
 8004730:	f003 0304 	and.w	r3, r3, #4
 8004734:	2b04      	cmp	r3, #4
 8004736:	d122      	bne.n	800477e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	68db      	ldr	r3, [r3, #12]
 800473e:	f003 0304 	and.w	r3, r3, #4
 8004742:	2b04      	cmp	r3, #4
 8004744:	d11b      	bne.n	800477e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f06f 0204 	mvn.w	r2, #4
 800474e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2202      	movs	r2, #2
 8004754:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	699b      	ldr	r3, [r3, #24]
 800475c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004760:	2b00      	cmp	r3, #0
 8004762:	d003      	beq.n	800476c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004764:	6878      	ldr	r0, [r7, #4]
 8004766:	f000 f8c4 	bl	80048f2 <HAL_TIM_IC_CaptureCallback>
 800476a:	e005      	b.n	8004778 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800476c:	6878      	ldr	r0, [r7, #4]
 800476e:	f000 f8b6 	bl	80048de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004772:	6878      	ldr	r0, [r7, #4]
 8004774:	f000 f8c7 	bl	8004906 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2200      	movs	r2, #0
 800477c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	691b      	ldr	r3, [r3, #16]
 8004784:	f003 0308 	and.w	r3, r3, #8
 8004788:	2b08      	cmp	r3, #8
 800478a:	d122      	bne.n	80047d2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	68db      	ldr	r3, [r3, #12]
 8004792:	f003 0308 	and.w	r3, r3, #8
 8004796:	2b08      	cmp	r3, #8
 8004798:	d11b      	bne.n	80047d2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f06f 0208 	mvn.w	r2, #8
 80047a2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2204      	movs	r2, #4
 80047a8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	69db      	ldr	r3, [r3, #28]
 80047b0:	f003 0303 	and.w	r3, r3, #3
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d003      	beq.n	80047c0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047b8:	6878      	ldr	r0, [r7, #4]
 80047ba:	f000 f89a 	bl	80048f2 <HAL_TIM_IC_CaptureCallback>
 80047be:	e005      	b.n	80047cc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047c0:	6878      	ldr	r0, [r7, #4]
 80047c2:	f000 f88c 	bl	80048de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047c6:	6878      	ldr	r0, [r7, #4]
 80047c8:	f000 f89d 	bl	8004906 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2200      	movs	r2, #0
 80047d0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	691b      	ldr	r3, [r3, #16]
 80047d8:	f003 0310 	and.w	r3, r3, #16
 80047dc:	2b10      	cmp	r3, #16
 80047de:	d122      	bne.n	8004826 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	68db      	ldr	r3, [r3, #12]
 80047e6:	f003 0310 	and.w	r3, r3, #16
 80047ea:	2b10      	cmp	r3, #16
 80047ec:	d11b      	bne.n	8004826 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f06f 0210 	mvn.w	r2, #16
 80047f6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2208      	movs	r2, #8
 80047fc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	69db      	ldr	r3, [r3, #28]
 8004804:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004808:	2b00      	cmp	r3, #0
 800480a:	d003      	beq.n	8004814 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800480c:	6878      	ldr	r0, [r7, #4]
 800480e:	f000 f870 	bl	80048f2 <HAL_TIM_IC_CaptureCallback>
 8004812:	e005      	b.n	8004820 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004814:	6878      	ldr	r0, [r7, #4]
 8004816:	f000 f862 	bl	80048de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f000 f873 	bl	8004906 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2200      	movs	r2, #0
 8004824:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	691b      	ldr	r3, [r3, #16]
 800482c:	f003 0301 	and.w	r3, r3, #1
 8004830:	2b01      	cmp	r3, #1
 8004832:	d10e      	bne.n	8004852 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	68db      	ldr	r3, [r3, #12]
 800483a:	f003 0301 	and.w	r3, r3, #1
 800483e:	2b01      	cmp	r3, #1
 8004840:	d107      	bne.n	8004852 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f06f 0201 	mvn.w	r2, #1
 800484a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800484c:	6878      	ldr	r0, [r7, #4]
 800484e:	f7fc ff59 	bl	8001704 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	691b      	ldr	r3, [r3, #16]
 8004858:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800485c:	2b80      	cmp	r3, #128	; 0x80
 800485e:	d10e      	bne.n	800487e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	68db      	ldr	r3, [r3, #12]
 8004866:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800486a:	2b80      	cmp	r3, #128	; 0x80
 800486c:	d107      	bne.n	800487e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004876:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004878:	6878      	ldr	r0, [r7, #4]
 800487a:	f000 f903 	bl	8004a84 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	691b      	ldr	r3, [r3, #16]
 8004884:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004888:	2b40      	cmp	r3, #64	; 0x40
 800488a:	d10e      	bne.n	80048aa <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	68db      	ldr	r3, [r3, #12]
 8004892:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004896:	2b40      	cmp	r3, #64	; 0x40
 8004898:	d107      	bne.n	80048aa <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80048a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80048a4:	6878      	ldr	r0, [r7, #4]
 80048a6:	f000 f838 	bl	800491a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	691b      	ldr	r3, [r3, #16]
 80048b0:	f003 0320 	and.w	r3, r3, #32
 80048b4:	2b20      	cmp	r3, #32
 80048b6:	d10e      	bne.n	80048d6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	68db      	ldr	r3, [r3, #12]
 80048be:	f003 0320 	and.w	r3, r3, #32
 80048c2:	2b20      	cmp	r3, #32
 80048c4:	d107      	bne.n	80048d6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f06f 0220 	mvn.w	r2, #32
 80048ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80048d0:	6878      	ldr	r0, [r7, #4]
 80048d2:	f000 f8cd 	bl	8004a70 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80048d6:	bf00      	nop
 80048d8:	3708      	adds	r7, #8
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}

080048de <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80048de:	b480      	push	{r7}
 80048e0:	b083      	sub	sp, #12
 80048e2:	af00      	add	r7, sp, #0
 80048e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80048e6:	bf00      	nop
 80048e8:	370c      	adds	r7, #12
 80048ea:	46bd      	mov	sp, r7
 80048ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f0:	4770      	bx	lr

080048f2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80048f2:	b480      	push	{r7}
 80048f4:	b083      	sub	sp, #12
 80048f6:	af00      	add	r7, sp, #0
 80048f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80048fa:	bf00      	nop
 80048fc:	370c      	adds	r7, #12
 80048fe:	46bd      	mov	sp, r7
 8004900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004904:	4770      	bx	lr

08004906 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004906:	b480      	push	{r7}
 8004908:	b083      	sub	sp, #12
 800490a:	af00      	add	r7, sp, #0
 800490c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800490e:	bf00      	nop
 8004910:	370c      	adds	r7, #12
 8004912:	46bd      	mov	sp, r7
 8004914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004918:	4770      	bx	lr

0800491a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800491a:	b480      	push	{r7}
 800491c:	b083      	sub	sp, #12
 800491e:	af00      	add	r7, sp, #0
 8004920:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004922:	bf00      	nop
 8004924:	370c      	adds	r7, #12
 8004926:	46bd      	mov	sp, r7
 8004928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492c:	4770      	bx	lr
	...

08004930 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004930:	b480      	push	{r7}
 8004932:	b085      	sub	sp, #20
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
 8004938:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	4a40      	ldr	r2, [pc, #256]	; (8004a44 <TIM_Base_SetConfig+0x114>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d013      	beq.n	8004970 <TIM_Base_SetConfig+0x40>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800494e:	d00f      	beq.n	8004970 <TIM_Base_SetConfig+0x40>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	4a3d      	ldr	r2, [pc, #244]	; (8004a48 <TIM_Base_SetConfig+0x118>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d00b      	beq.n	8004970 <TIM_Base_SetConfig+0x40>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	4a3c      	ldr	r2, [pc, #240]	; (8004a4c <TIM_Base_SetConfig+0x11c>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d007      	beq.n	8004970 <TIM_Base_SetConfig+0x40>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	4a3b      	ldr	r2, [pc, #236]	; (8004a50 <TIM_Base_SetConfig+0x120>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d003      	beq.n	8004970 <TIM_Base_SetConfig+0x40>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	4a3a      	ldr	r2, [pc, #232]	; (8004a54 <TIM_Base_SetConfig+0x124>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d108      	bne.n	8004982 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004976:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	68fa      	ldr	r2, [r7, #12]
 800497e:	4313      	orrs	r3, r2
 8004980:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	4a2f      	ldr	r2, [pc, #188]	; (8004a44 <TIM_Base_SetConfig+0x114>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d02b      	beq.n	80049e2 <TIM_Base_SetConfig+0xb2>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004990:	d027      	beq.n	80049e2 <TIM_Base_SetConfig+0xb2>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	4a2c      	ldr	r2, [pc, #176]	; (8004a48 <TIM_Base_SetConfig+0x118>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d023      	beq.n	80049e2 <TIM_Base_SetConfig+0xb2>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	4a2b      	ldr	r2, [pc, #172]	; (8004a4c <TIM_Base_SetConfig+0x11c>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d01f      	beq.n	80049e2 <TIM_Base_SetConfig+0xb2>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	4a2a      	ldr	r2, [pc, #168]	; (8004a50 <TIM_Base_SetConfig+0x120>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d01b      	beq.n	80049e2 <TIM_Base_SetConfig+0xb2>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	4a29      	ldr	r2, [pc, #164]	; (8004a54 <TIM_Base_SetConfig+0x124>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d017      	beq.n	80049e2 <TIM_Base_SetConfig+0xb2>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	4a28      	ldr	r2, [pc, #160]	; (8004a58 <TIM_Base_SetConfig+0x128>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d013      	beq.n	80049e2 <TIM_Base_SetConfig+0xb2>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	4a27      	ldr	r2, [pc, #156]	; (8004a5c <TIM_Base_SetConfig+0x12c>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d00f      	beq.n	80049e2 <TIM_Base_SetConfig+0xb2>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	4a26      	ldr	r2, [pc, #152]	; (8004a60 <TIM_Base_SetConfig+0x130>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d00b      	beq.n	80049e2 <TIM_Base_SetConfig+0xb2>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	4a25      	ldr	r2, [pc, #148]	; (8004a64 <TIM_Base_SetConfig+0x134>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d007      	beq.n	80049e2 <TIM_Base_SetConfig+0xb2>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	4a24      	ldr	r2, [pc, #144]	; (8004a68 <TIM_Base_SetConfig+0x138>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d003      	beq.n	80049e2 <TIM_Base_SetConfig+0xb2>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	4a23      	ldr	r2, [pc, #140]	; (8004a6c <TIM_Base_SetConfig+0x13c>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d108      	bne.n	80049f4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	68db      	ldr	r3, [r3, #12]
 80049ee:	68fa      	ldr	r2, [r7, #12]
 80049f0:	4313      	orrs	r3, r2
 80049f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	695b      	ldr	r3, [r3, #20]
 80049fe:	4313      	orrs	r3, r2
 8004a00:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	68fa      	ldr	r2, [r7, #12]
 8004a06:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	689a      	ldr	r2, [r3, #8]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	681a      	ldr	r2, [r3, #0]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	4a0a      	ldr	r2, [pc, #40]	; (8004a44 <TIM_Base_SetConfig+0x114>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d003      	beq.n	8004a28 <TIM_Base_SetConfig+0xf8>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	4a0c      	ldr	r2, [pc, #48]	; (8004a54 <TIM_Base_SetConfig+0x124>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d103      	bne.n	8004a30 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	691a      	ldr	r2, [r3, #16]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2201      	movs	r2, #1
 8004a34:	615a      	str	r2, [r3, #20]
}
 8004a36:	bf00      	nop
 8004a38:	3714      	adds	r7, #20
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a40:	4770      	bx	lr
 8004a42:	bf00      	nop
 8004a44:	40010000 	.word	0x40010000
 8004a48:	40000400 	.word	0x40000400
 8004a4c:	40000800 	.word	0x40000800
 8004a50:	40000c00 	.word	0x40000c00
 8004a54:	40010400 	.word	0x40010400
 8004a58:	40014000 	.word	0x40014000
 8004a5c:	40014400 	.word	0x40014400
 8004a60:	40014800 	.word	0x40014800
 8004a64:	40001800 	.word	0x40001800
 8004a68:	40001c00 	.word	0x40001c00
 8004a6c:	40002000 	.word	0x40002000

08004a70 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b083      	sub	sp, #12
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a78:	bf00      	nop
 8004a7a:	370c      	adds	r7, #12
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a82:	4770      	bx	lr

08004a84 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a84:	b480      	push	{r7}
 8004a86:	b083      	sub	sp, #12
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a8c:	bf00      	nop
 8004a8e:	370c      	adds	r7, #12
 8004a90:	46bd      	mov	sp, r7
 8004a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a96:	4770      	bx	lr

08004a98 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b082      	sub	sp, #8
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d101      	bne.n	8004aaa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	e03f      	b.n	8004b2a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004ab0:	b2db      	uxtb	r3, r3
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d106      	bne.n	8004ac4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004abe:	6878      	ldr	r0, [r7, #4]
 8004ac0:	f7fd f9da 	bl	8001e78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2224      	movs	r2, #36	; 0x24
 8004ac8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	68da      	ldr	r2, [r3, #12]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ada:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004adc:	6878      	ldr	r0, [r7, #4]
 8004ade:	f000 fc6d 	bl	80053bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	691a      	ldr	r2, [r3, #16]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004af0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	695a      	ldr	r2, [r3, #20]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004b00:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	68da      	ldr	r2, [r3, #12]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004b10:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2200      	movs	r2, #0
 8004b16:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2220      	movs	r2, #32
 8004b1c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2220      	movs	r2, #32
 8004b24:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004b28:	2300      	movs	r3, #0
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	3708      	adds	r7, #8
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bd80      	pop	{r7, pc}

08004b32 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b32:	b580      	push	{r7, lr}
 8004b34:	b088      	sub	sp, #32
 8004b36:	af02      	add	r7, sp, #8
 8004b38:	60f8      	str	r0, [r7, #12]
 8004b3a:	60b9      	str	r1, [r7, #8]
 8004b3c:	603b      	str	r3, [r7, #0]
 8004b3e:	4613      	mov	r3, r2
 8004b40:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004b42:	2300      	movs	r3, #0
 8004b44:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004b4c:	b2db      	uxtb	r3, r3
 8004b4e:	2b20      	cmp	r3, #32
 8004b50:	f040 8083 	bne.w	8004c5a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d002      	beq.n	8004b60 <HAL_UART_Transmit+0x2e>
 8004b5a:	88fb      	ldrh	r3, [r7, #6]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d101      	bne.n	8004b64 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8004b60:	2301      	movs	r3, #1
 8004b62:	e07b      	b.n	8004c5c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004b6a:	2b01      	cmp	r3, #1
 8004b6c:	d101      	bne.n	8004b72 <HAL_UART_Transmit+0x40>
 8004b6e:	2302      	movs	r3, #2
 8004b70:	e074      	b.n	8004c5c <HAL_UART_Transmit+0x12a>
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	2201      	movs	r2, #1
 8004b76:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	2221      	movs	r2, #33	; 0x21
 8004b84:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004b88:	f7fd fb00 	bl	800218c <HAL_GetTick>
 8004b8c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	88fa      	ldrh	r2, [r7, #6]
 8004b92:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	88fa      	ldrh	r2, [r7, #6]
 8004b98:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8004ba2:	e042      	b.n	8004c2a <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004ba8:	b29b      	uxth	r3, r3
 8004baa:	3b01      	subs	r3, #1
 8004bac:	b29a      	uxth	r2, r3
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	689b      	ldr	r3, [r3, #8]
 8004bb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bba:	d122      	bne.n	8004c02 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	9300      	str	r3, [sp, #0]
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	2180      	movs	r1, #128	; 0x80
 8004bc6:	68f8      	ldr	r0, [r7, #12]
 8004bc8:	f000 fa76 	bl	80050b8 <UART_WaitOnFlagUntilTimeout>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d001      	beq.n	8004bd6 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8004bd2:	2303      	movs	r3, #3
 8004bd4:	e042      	b.n	8004c5c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	881b      	ldrh	r3, [r3, #0]
 8004bde:	461a      	mov	r2, r3
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004be8:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	691b      	ldr	r3, [r3, #16]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d103      	bne.n	8004bfa <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	3302      	adds	r3, #2
 8004bf6:	60bb      	str	r3, [r7, #8]
 8004bf8:	e017      	b.n	8004c2a <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	3301      	adds	r3, #1
 8004bfe:	60bb      	str	r3, [r7, #8]
 8004c00:	e013      	b.n	8004c2a <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	9300      	str	r3, [sp, #0]
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	2180      	movs	r1, #128	; 0x80
 8004c0c:	68f8      	ldr	r0, [r7, #12]
 8004c0e:	f000 fa53 	bl	80050b8 <UART_WaitOnFlagUntilTimeout>
 8004c12:	4603      	mov	r3, r0
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d001      	beq.n	8004c1c <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8004c18:	2303      	movs	r3, #3
 8004c1a:	e01f      	b.n	8004c5c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	1c5a      	adds	r2, r3, #1
 8004c20:	60ba      	str	r2, [r7, #8]
 8004c22:	781a      	ldrb	r2, [r3, #0]
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004c2e:	b29b      	uxth	r3, r3
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d1b7      	bne.n	8004ba4 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	9300      	str	r3, [sp, #0]
 8004c38:	697b      	ldr	r3, [r7, #20]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	2140      	movs	r1, #64	; 0x40
 8004c3e:	68f8      	ldr	r0, [r7, #12]
 8004c40:	f000 fa3a 	bl	80050b8 <UART_WaitOnFlagUntilTimeout>
 8004c44:	4603      	mov	r3, r0
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d001      	beq.n	8004c4e <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8004c4a:	2303      	movs	r3, #3
 8004c4c:	e006      	b.n	8004c5c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	2220      	movs	r2, #32
 8004c52:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8004c56:	2300      	movs	r3, #0
 8004c58:	e000      	b.n	8004c5c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8004c5a:	2302      	movs	r3, #2
  }
}
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	3718      	adds	r7, #24
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bd80      	pop	{r7, pc}

08004c64 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b086      	sub	sp, #24
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	60f8      	str	r0, [r7, #12]
 8004c6c:	60b9      	str	r1, [r7, #8]
 8004c6e:	4613      	mov	r3, r2
 8004c70:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004c78:	b2db      	uxtb	r3, r3
 8004c7a:	2b20      	cmp	r3, #32
 8004c7c:	d166      	bne.n	8004d4c <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d002      	beq.n	8004c8a <HAL_UART_Receive_DMA+0x26>
 8004c84:	88fb      	ldrh	r3, [r7, #6]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d101      	bne.n	8004c8e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e05f      	b.n	8004d4e <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004c94:	2b01      	cmp	r3, #1
 8004c96:	d101      	bne.n	8004c9c <HAL_UART_Receive_DMA+0x38>
 8004c98:	2302      	movs	r3, #2
 8004c9a:	e058      	b.n	8004d4e <HAL_UART_Receive_DMA+0xea>
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8004ca4:	68ba      	ldr	r2, [r7, #8]
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	88fa      	ldrh	r2, [r7, #6]
 8004cae:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2222      	movs	r2, #34	; 0x22
 8004cba:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cc2:	4a25      	ldr	r2, [pc, #148]	; (8004d58 <HAL_UART_Receive_DMA+0xf4>)
 8004cc4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cca:	4a24      	ldr	r2, [pc, #144]	; (8004d5c <HAL_UART_Receive_DMA+0xf8>)
 8004ccc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cd2:	4a23      	ldr	r2, [pc, #140]	; (8004d60 <HAL_UART_Receive_DMA+0xfc>)
 8004cd4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cda:	2200      	movs	r2, #0
 8004cdc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 8004cde:	f107 0308 	add.w	r3, r7, #8
 8004ce2:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	3304      	adds	r3, #4
 8004cee:	4619      	mov	r1, r3
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	681a      	ldr	r2, [r3, #0]
 8004cf4:	88fb      	ldrh	r3, [r7, #6]
 8004cf6:	f7fd fc07 	bl	8002508 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	613b      	str	r3, [r7, #16]
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	613b      	str	r3, [r7, #16]
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	613b      	str	r3, [r7, #16]
 8004d0e:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2200      	movs	r2, #0
 8004d14:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	68da      	ldr	r2, [r3, #12]
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d26:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	695a      	ldr	r2, [r3, #20]
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f042 0201 	orr.w	r2, r2, #1
 8004d36:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	695a      	ldr	r2, [r3, #20]
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d46:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8004d48:	2300      	movs	r3, #0
 8004d4a:	e000      	b.n	8004d4e <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8004d4c:	2302      	movs	r3, #2
  }
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	3718      	adds	r7, #24
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd80      	pop	{r7, pc}
 8004d56:	bf00      	nop
 8004d58:	08004fa1 	.word	0x08004fa1
 8004d5c:	08005009 	.word	0x08005009
 8004d60:	08005025 	.word	0x08005025

08004d64 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b088      	sub	sp, #32
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	68db      	ldr	r3, [r3, #12]
 8004d7a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	695b      	ldr	r3, [r3, #20]
 8004d82:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8004d84:	2300      	movs	r3, #0
 8004d86:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8004d88:	2300      	movs	r3, #0
 8004d8a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004d8c:	69fb      	ldr	r3, [r7, #28]
 8004d8e:	f003 030f 	and.w	r3, r3, #15
 8004d92:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8004d94:	693b      	ldr	r3, [r7, #16]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d10d      	bne.n	8004db6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004d9a:	69fb      	ldr	r3, [r7, #28]
 8004d9c:	f003 0320 	and.w	r3, r3, #32
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d008      	beq.n	8004db6 <HAL_UART_IRQHandler+0x52>
 8004da4:	69bb      	ldr	r3, [r7, #24]
 8004da6:	f003 0320 	and.w	r3, r3, #32
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d003      	beq.n	8004db6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f000 fa82 	bl	80052b8 <UART_Receive_IT>
      return;
 8004db4:	e0d1      	b.n	8004f5a <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004db6:	693b      	ldr	r3, [r7, #16]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	f000 80b0 	beq.w	8004f1e <HAL_UART_IRQHandler+0x1ba>
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	f003 0301 	and.w	r3, r3, #1
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d105      	bne.n	8004dd4 <HAL_UART_IRQHandler+0x70>
 8004dc8:	69bb      	ldr	r3, [r7, #24]
 8004dca:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	f000 80a5 	beq.w	8004f1e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004dd4:	69fb      	ldr	r3, [r7, #28]
 8004dd6:	f003 0301 	and.w	r3, r3, #1
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d00a      	beq.n	8004df4 <HAL_UART_IRQHandler+0x90>
 8004dde:	69bb      	ldr	r3, [r7, #24]
 8004de0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d005      	beq.n	8004df4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dec:	f043 0201 	orr.w	r2, r3, #1
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004df4:	69fb      	ldr	r3, [r7, #28]
 8004df6:	f003 0304 	and.w	r3, r3, #4
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d00a      	beq.n	8004e14 <HAL_UART_IRQHandler+0xb0>
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	f003 0301 	and.w	r3, r3, #1
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d005      	beq.n	8004e14 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e0c:	f043 0202 	orr.w	r2, r3, #2
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004e14:	69fb      	ldr	r3, [r7, #28]
 8004e16:	f003 0302 	and.w	r3, r3, #2
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d00a      	beq.n	8004e34 <HAL_UART_IRQHandler+0xd0>
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	f003 0301 	and.w	r3, r3, #1
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d005      	beq.n	8004e34 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e2c:	f043 0204 	orr.w	r2, r3, #4
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004e34:	69fb      	ldr	r3, [r7, #28]
 8004e36:	f003 0308 	and.w	r3, r3, #8
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d00f      	beq.n	8004e5e <HAL_UART_IRQHandler+0xfa>
 8004e3e:	69bb      	ldr	r3, [r7, #24]
 8004e40:	f003 0320 	and.w	r3, r3, #32
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d104      	bne.n	8004e52 <HAL_UART_IRQHandler+0xee>
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	f003 0301 	and.w	r3, r3, #1
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d005      	beq.n	8004e5e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e56:	f043 0208 	orr.w	r2, r3, #8
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d078      	beq.n	8004f58 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004e66:	69fb      	ldr	r3, [r7, #28]
 8004e68:	f003 0320 	and.w	r3, r3, #32
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d007      	beq.n	8004e80 <HAL_UART_IRQHandler+0x11c>
 8004e70:	69bb      	ldr	r3, [r7, #24]
 8004e72:	f003 0320 	and.w	r3, r3, #32
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d002      	beq.n	8004e80 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8004e7a:	6878      	ldr	r0, [r7, #4]
 8004e7c:	f000 fa1c 	bl	80052b8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	695b      	ldr	r3, [r3, #20]
 8004e86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e8a:	2b40      	cmp	r3, #64	; 0x40
 8004e8c:	bf0c      	ite	eq
 8004e8e:	2301      	moveq	r3, #1
 8004e90:	2300      	movne	r3, #0
 8004e92:	b2db      	uxtb	r3, r3
 8004e94:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e9a:	f003 0308 	and.w	r3, r3, #8
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d102      	bne.n	8004ea8 <HAL_UART_IRQHandler+0x144>
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d031      	beq.n	8004f0c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004ea8:	6878      	ldr	r0, [r7, #4]
 8004eaa:	f000 f965 	bl	8005178 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	695b      	ldr	r3, [r3, #20]
 8004eb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eb8:	2b40      	cmp	r3, #64	; 0x40
 8004eba:	d123      	bne.n	8004f04 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	695a      	ldr	r2, [r3, #20]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004eca:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d013      	beq.n	8004efc <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ed8:	4a21      	ldr	r2, [pc, #132]	; (8004f60 <HAL_UART_IRQHandler+0x1fc>)
 8004eda:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	f7fd fb69 	bl	80025b8 <HAL_DMA_Abort_IT>
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d016      	beq.n	8004f1a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ef0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ef2:	687a      	ldr	r2, [r7, #4]
 8004ef4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004ef6:	4610      	mov	r0, r2
 8004ef8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004efa:	e00e      	b.n	8004f1a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004efc:	6878      	ldr	r0, [r7, #4]
 8004efe:	f000 f845 	bl	8004f8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f02:	e00a      	b.n	8004f1a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004f04:	6878      	ldr	r0, [r7, #4]
 8004f06:	f000 f841 	bl	8004f8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f0a:	e006      	b.n	8004f1a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004f0c:	6878      	ldr	r0, [r7, #4]
 8004f0e:	f000 f83d 	bl	8004f8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2200      	movs	r2, #0
 8004f16:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8004f18:	e01e      	b.n	8004f58 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f1a:	bf00      	nop
    return;
 8004f1c:	e01c      	b.n	8004f58 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004f1e:	69fb      	ldr	r3, [r7, #28]
 8004f20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d008      	beq.n	8004f3a <HAL_UART_IRQHandler+0x1d6>
 8004f28:	69bb      	ldr	r3, [r7, #24]
 8004f2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d003      	beq.n	8004f3a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8004f32:	6878      	ldr	r0, [r7, #4]
 8004f34:	f000 f952 	bl	80051dc <UART_Transmit_IT>
    return;
 8004f38:	e00f      	b.n	8004f5a <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004f3a:	69fb      	ldr	r3, [r7, #28]
 8004f3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d00a      	beq.n	8004f5a <HAL_UART_IRQHandler+0x1f6>
 8004f44:	69bb      	ldr	r3, [r7, #24]
 8004f46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d005      	beq.n	8004f5a <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8004f4e:	6878      	ldr	r0, [r7, #4]
 8004f50:	f000 f99a 	bl	8005288 <UART_EndTransmit_IT>
    return;
 8004f54:	bf00      	nop
 8004f56:	e000      	b.n	8004f5a <HAL_UART_IRQHandler+0x1f6>
    return;
 8004f58:	bf00      	nop
  }
}
 8004f5a:	3720      	adds	r7, #32
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bd80      	pop	{r7, pc}
 8004f60:	080051b5 	.word	0x080051b5

08004f64 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004f64:	b480      	push	{r7}
 8004f66:	b083      	sub	sp, #12
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004f6c:	bf00      	nop
 8004f6e:	370c      	adds	r7, #12
 8004f70:	46bd      	mov	sp, r7
 8004f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f76:	4770      	bx	lr

08004f78 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004f78:	b480      	push	{r7}
 8004f7a:	b083      	sub	sp, #12
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004f80:	bf00      	nop
 8004f82:	370c      	adds	r7, #12
 8004f84:	46bd      	mov	sp, r7
 8004f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8a:	4770      	bx	lr

08004f8c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	b083      	sub	sp, #12
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004f94:	bf00      	nop
 8004f96:	370c      	adds	r7, #12
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9e:	4770      	bx	lr

08004fa0 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b084      	sub	sp, #16
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fac:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d11e      	bne.n	8004ffa <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	68da      	ldr	r2, [r3, #12]
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004fd0:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	695a      	ldr	r2, [r3, #20]
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f022 0201 	bic.w	r2, r2, #1
 8004fe0:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	695a      	ldr	r2, [r3, #20]
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ff0:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	2220      	movs	r2, #32
 8004ff6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8004ffa:	68f8      	ldr	r0, [r7, #12]
 8004ffc:	f7fc fa50 	bl	80014a0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005000:	bf00      	nop
 8005002:	3710      	adds	r7, #16
 8005004:	46bd      	mov	sp, r7
 8005006:	bd80      	pop	{r7, pc}

08005008 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b084      	sub	sp, #16
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005014:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8005016:	68f8      	ldr	r0, [r7, #12]
 8005018:	f7ff ffae 	bl	8004f78 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800501c:	bf00      	nop
 800501e:	3710      	adds	r7, #16
 8005020:	46bd      	mov	sp, r7
 8005022:	bd80      	pop	{r7, pc}

08005024 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b084      	sub	sp, #16
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800502c:	2300      	movs	r3, #0
 800502e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005034:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	695b      	ldr	r3, [r3, #20]
 800503c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005040:	2b80      	cmp	r3, #128	; 0x80
 8005042:	bf0c      	ite	eq
 8005044:	2301      	moveq	r3, #1
 8005046:	2300      	movne	r3, #0
 8005048:	b2db      	uxtb	r3, r3
 800504a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005052:	b2db      	uxtb	r3, r3
 8005054:	2b21      	cmp	r3, #33	; 0x21
 8005056:	d108      	bne.n	800506a <UART_DMAError+0x46>
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d005      	beq.n	800506a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	2200      	movs	r2, #0
 8005062:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005064:	68b8      	ldr	r0, [r7, #8]
 8005066:	f000 f871 	bl	800514c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	695b      	ldr	r3, [r3, #20]
 8005070:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005074:	2b40      	cmp	r3, #64	; 0x40
 8005076:	bf0c      	ite	eq
 8005078:	2301      	moveq	r3, #1
 800507a:	2300      	movne	r3, #0
 800507c:	b2db      	uxtb	r3, r3
 800507e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005086:	b2db      	uxtb	r3, r3
 8005088:	2b22      	cmp	r3, #34	; 0x22
 800508a:	d108      	bne.n	800509e <UART_DMAError+0x7a>
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d005      	beq.n	800509e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	2200      	movs	r2, #0
 8005096:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005098:	68b8      	ldr	r0, [r7, #8]
 800509a:	f000 f86d 	bl	8005178 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050a2:	f043 0210 	orr.w	r2, r3, #16
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80050aa:	68b8      	ldr	r0, [r7, #8]
 80050ac:	f7ff ff6e 	bl	8004f8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80050b0:	bf00      	nop
 80050b2:	3710      	adds	r7, #16
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bd80      	pop	{r7, pc}

080050b8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b084      	sub	sp, #16
 80050bc:	af00      	add	r7, sp, #0
 80050be:	60f8      	str	r0, [r7, #12]
 80050c0:	60b9      	str	r1, [r7, #8]
 80050c2:	603b      	str	r3, [r7, #0]
 80050c4:	4613      	mov	r3, r2
 80050c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050c8:	e02c      	b.n	8005124 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050ca:	69bb      	ldr	r3, [r7, #24]
 80050cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050d0:	d028      	beq.n	8005124 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80050d2:	69bb      	ldr	r3, [r7, #24]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d007      	beq.n	80050e8 <UART_WaitOnFlagUntilTimeout+0x30>
 80050d8:	f7fd f858 	bl	800218c <HAL_GetTick>
 80050dc:	4602      	mov	r2, r0
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	1ad3      	subs	r3, r2, r3
 80050e2:	69ba      	ldr	r2, [r7, #24]
 80050e4:	429a      	cmp	r2, r3
 80050e6:	d21d      	bcs.n	8005124 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	68da      	ldr	r2, [r3, #12]
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80050f6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	695a      	ldr	r2, [r3, #20]
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f022 0201 	bic.w	r2, r2, #1
 8005106:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	2220      	movs	r2, #32
 800510c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	2220      	movs	r2, #32
 8005114:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	2200      	movs	r2, #0
 800511c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8005120:	2303      	movs	r3, #3
 8005122:	e00f      	b.n	8005144 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	681a      	ldr	r2, [r3, #0]
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	4013      	ands	r3, r2
 800512e:	68ba      	ldr	r2, [r7, #8]
 8005130:	429a      	cmp	r2, r3
 8005132:	bf0c      	ite	eq
 8005134:	2301      	moveq	r3, #1
 8005136:	2300      	movne	r3, #0
 8005138:	b2db      	uxtb	r3, r3
 800513a:	461a      	mov	r2, r3
 800513c:	79fb      	ldrb	r3, [r7, #7]
 800513e:	429a      	cmp	r2, r3
 8005140:	d0c3      	beq.n	80050ca <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005142:	2300      	movs	r3, #0
}
 8005144:	4618      	mov	r0, r3
 8005146:	3710      	adds	r7, #16
 8005148:	46bd      	mov	sp, r7
 800514a:	bd80      	pop	{r7, pc}

0800514c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800514c:	b480      	push	{r7}
 800514e:	b083      	sub	sp, #12
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	68da      	ldr	r2, [r3, #12]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8005162:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2220      	movs	r2, #32
 8005168:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 800516c:	bf00      	nop
 800516e:	370c      	adds	r7, #12
 8005170:	46bd      	mov	sp, r7
 8005172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005176:	4770      	bx	lr

08005178 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005178:	b480      	push	{r7}
 800517a:	b083      	sub	sp, #12
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	68da      	ldr	r2, [r3, #12]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800518e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	695a      	ldr	r2, [r3, #20]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f022 0201 	bic.w	r2, r2, #1
 800519e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2220      	movs	r2, #32
 80051a4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80051a8:	bf00      	nop
 80051aa:	370c      	adds	r7, #12
 80051ac:	46bd      	mov	sp, r7
 80051ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b2:	4770      	bx	lr

080051b4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b084      	sub	sp, #16
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051c0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	2200      	movs	r2, #0
 80051c6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	2200      	movs	r2, #0
 80051cc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80051ce:	68f8      	ldr	r0, [r7, #12]
 80051d0:	f7ff fedc 	bl	8004f8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80051d4:	bf00      	nop
 80051d6:	3710      	adds	r7, #16
 80051d8:	46bd      	mov	sp, r7
 80051da:	bd80      	pop	{r7, pc}

080051dc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80051dc:	b480      	push	{r7}
 80051de:	b085      	sub	sp, #20
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80051ea:	b2db      	uxtb	r3, r3
 80051ec:	2b21      	cmp	r3, #33	; 0x21
 80051ee:	d144      	bne.n	800527a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	689b      	ldr	r3, [r3, #8]
 80051f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051f8:	d11a      	bne.n	8005230 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6a1b      	ldr	r3, [r3, #32]
 80051fe:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	881b      	ldrh	r3, [r3, #0]
 8005204:	461a      	mov	r2, r3
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800520e:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	691b      	ldr	r3, [r3, #16]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d105      	bne.n	8005224 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6a1b      	ldr	r3, [r3, #32]
 800521c:	1c9a      	adds	r2, r3, #2
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	621a      	str	r2, [r3, #32]
 8005222:	e00e      	b.n	8005242 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6a1b      	ldr	r3, [r3, #32]
 8005228:	1c5a      	adds	r2, r3, #1
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	621a      	str	r2, [r3, #32]
 800522e:	e008      	b.n	8005242 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6a1b      	ldr	r3, [r3, #32]
 8005234:	1c59      	adds	r1, r3, #1
 8005236:	687a      	ldr	r2, [r7, #4]
 8005238:	6211      	str	r1, [r2, #32]
 800523a:	781a      	ldrb	r2, [r3, #0]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005246:	b29b      	uxth	r3, r3
 8005248:	3b01      	subs	r3, #1
 800524a:	b29b      	uxth	r3, r3
 800524c:	687a      	ldr	r2, [r7, #4]
 800524e:	4619      	mov	r1, r3
 8005250:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005252:	2b00      	cmp	r3, #0
 8005254:	d10f      	bne.n	8005276 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	68da      	ldr	r2, [r3, #12]
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005264:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	68da      	ldr	r2, [r3, #12]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005274:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005276:	2300      	movs	r3, #0
 8005278:	e000      	b.n	800527c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800527a:	2302      	movs	r3, #2
  }
}
 800527c:	4618      	mov	r0, r3
 800527e:	3714      	adds	r7, #20
 8005280:	46bd      	mov	sp, r7
 8005282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005286:	4770      	bx	lr

08005288 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b082      	sub	sp, #8
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	68da      	ldr	r2, [r3, #12]
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800529e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2220      	movs	r2, #32
 80052a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80052a8:	6878      	ldr	r0, [r7, #4]
 80052aa:	f7ff fe5b 	bl	8004f64 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80052ae:	2300      	movs	r3, #0
}
 80052b0:	4618      	mov	r0, r3
 80052b2:	3708      	adds	r7, #8
 80052b4:	46bd      	mov	sp, r7
 80052b6:	bd80      	pop	{r7, pc}

080052b8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b084      	sub	sp, #16
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80052c6:	b2db      	uxtb	r3, r3
 80052c8:	2b22      	cmp	r3, #34	; 0x22
 80052ca:	d171      	bne.n	80053b0 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	689b      	ldr	r3, [r3, #8]
 80052d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052d4:	d123      	bne.n	800531e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052da:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	691b      	ldr	r3, [r3, #16]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d10e      	bne.n	8005302 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	685b      	ldr	r3, [r3, #4]
 80052ea:	b29b      	uxth	r3, r3
 80052ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052f0:	b29a      	uxth	r2, r3
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052fa:	1c9a      	adds	r2, r3, #2
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	629a      	str	r2, [r3, #40]	; 0x28
 8005300:	e029      	b.n	8005356 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	b29b      	uxth	r3, r3
 800530a:	b2db      	uxtb	r3, r3
 800530c:	b29a      	uxth	r2, r3
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005316:	1c5a      	adds	r2, r3, #1
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	629a      	str	r2, [r3, #40]	; 0x28
 800531c:	e01b      	b.n	8005356 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	691b      	ldr	r3, [r3, #16]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d10a      	bne.n	800533c <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	6858      	ldr	r0, [r3, #4]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005330:	1c59      	adds	r1, r3, #1
 8005332:	687a      	ldr	r2, [r7, #4]
 8005334:	6291      	str	r1, [r2, #40]	; 0x28
 8005336:	b2c2      	uxtb	r2, r0
 8005338:	701a      	strb	r2, [r3, #0]
 800533a:	e00c      	b.n	8005356 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	b2da      	uxtb	r2, r3
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005348:	1c58      	adds	r0, r3, #1
 800534a:	6879      	ldr	r1, [r7, #4]
 800534c:	6288      	str	r0, [r1, #40]	; 0x28
 800534e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005352:	b2d2      	uxtb	r2, r2
 8005354:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800535a:	b29b      	uxth	r3, r3
 800535c:	3b01      	subs	r3, #1
 800535e:	b29b      	uxth	r3, r3
 8005360:	687a      	ldr	r2, [r7, #4]
 8005362:	4619      	mov	r1, r3
 8005364:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005366:	2b00      	cmp	r3, #0
 8005368:	d120      	bne.n	80053ac <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	68da      	ldr	r2, [r3, #12]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f022 0220 	bic.w	r2, r2, #32
 8005378:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	68da      	ldr	r2, [r3, #12]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005388:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	695a      	ldr	r2, [r3, #20]
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f022 0201 	bic.w	r2, r2, #1
 8005398:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2220      	movs	r2, #32
 800539e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80053a2:	6878      	ldr	r0, [r7, #4]
 80053a4:	f7fc f87c 	bl	80014a0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80053a8:	2300      	movs	r3, #0
 80053aa:	e002      	b.n	80053b2 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80053ac:	2300      	movs	r3, #0
 80053ae:	e000      	b.n	80053b2 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80053b0:	2302      	movs	r3, #2
  }
}
 80053b2:	4618      	mov	r0, r3
 80053b4:	3710      	adds	r7, #16
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bd80      	pop	{r7, pc}
	...

080053bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80053bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053c0:	b085      	sub	sp, #20
 80053c2:	af00      	add	r7, sp, #0
 80053c4:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	691b      	ldr	r3, [r3, #16]
 80053cc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	68da      	ldr	r2, [r3, #12]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	430a      	orrs	r2, r1
 80053da:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	689a      	ldr	r2, [r3, #8]
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	691b      	ldr	r3, [r3, #16]
 80053e4:	431a      	orrs	r2, r3
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	695b      	ldr	r3, [r3, #20]
 80053ea:	431a      	orrs	r2, r3
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	69db      	ldr	r3, [r3, #28]
 80053f0:	4313      	orrs	r3, r2
 80053f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	68db      	ldr	r3, [r3, #12]
 80053fa:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80053fe:	f023 030c 	bic.w	r3, r3, #12
 8005402:	687a      	ldr	r2, [r7, #4]
 8005404:	6812      	ldr	r2, [r2, #0]
 8005406:	68f9      	ldr	r1, [r7, #12]
 8005408:	430b      	orrs	r3, r1
 800540a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	695b      	ldr	r3, [r3, #20]
 8005412:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	699a      	ldr	r2, [r3, #24]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	430a      	orrs	r2, r1
 8005420:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	69db      	ldr	r3, [r3, #28]
 8005426:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800542a:	f040 818b 	bne.w	8005744 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4ac1      	ldr	r2, [pc, #772]	; (8005738 <UART_SetConfig+0x37c>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d005      	beq.n	8005444 <UART_SetConfig+0x88>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4abf      	ldr	r2, [pc, #764]	; (800573c <UART_SetConfig+0x380>)
 800543e:	4293      	cmp	r3, r2
 8005440:	f040 80bd 	bne.w	80055be <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005444:	f7ff f8a4 	bl	8004590 <HAL_RCC_GetPCLK2Freq>
 8005448:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	461d      	mov	r5, r3
 800544e:	f04f 0600 	mov.w	r6, #0
 8005452:	46a8      	mov	r8, r5
 8005454:	46b1      	mov	r9, r6
 8005456:	eb18 0308 	adds.w	r3, r8, r8
 800545a:	eb49 0409 	adc.w	r4, r9, r9
 800545e:	4698      	mov	r8, r3
 8005460:	46a1      	mov	r9, r4
 8005462:	eb18 0805 	adds.w	r8, r8, r5
 8005466:	eb49 0906 	adc.w	r9, r9, r6
 800546a:	f04f 0100 	mov.w	r1, #0
 800546e:	f04f 0200 	mov.w	r2, #0
 8005472:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005476:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800547a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800547e:	4688      	mov	r8, r1
 8005480:	4691      	mov	r9, r2
 8005482:	eb18 0005 	adds.w	r0, r8, r5
 8005486:	eb49 0106 	adc.w	r1, r9, r6
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	461d      	mov	r5, r3
 8005490:	f04f 0600 	mov.w	r6, #0
 8005494:	196b      	adds	r3, r5, r5
 8005496:	eb46 0406 	adc.w	r4, r6, r6
 800549a:	461a      	mov	r2, r3
 800549c:	4623      	mov	r3, r4
 800549e:	f7fb fb23 	bl	8000ae8 <__aeabi_uldivmod>
 80054a2:	4603      	mov	r3, r0
 80054a4:	460c      	mov	r4, r1
 80054a6:	461a      	mov	r2, r3
 80054a8:	4ba5      	ldr	r3, [pc, #660]	; (8005740 <UART_SetConfig+0x384>)
 80054aa:	fba3 2302 	umull	r2, r3, r3, r2
 80054ae:	095b      	lsrs	r3, r3, #5
 80054b0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	461d      	mov	r5, r3
 80054b8:	f04f 0600 	mov.w	r6, #0
 80054bc:	46a9      	mov	r9, r5
 80054be:	46b2      	mov	sl, r6
 80054c0:	eb19 0309 	adds.w	r3, r9, r9
 80054c4:	eb4a 040a 	adc.w	r4, sl, sl
 80054c8:	4699      	mov	r9, r3
 80054ca:	46a2      	mov	sl, r4
 80054cc:	eb19 0905 	adds.w	r9, r9, r5
 80054d0:	eb4a 0a06 	adc.w	sl, sl, r6
 80054d4:	f04f 0100 	mov.w	r1, #0
 80054d8:	f04f 0200 	mov.w	r2, #0
 80054dc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80054e0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80054e4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80054e8:	4689      	mov	r9, r1
 80054ea:	4692      	mov	sl, r2
 80054ec:	eb19 0005 	adds.w	r0, r9, r5
 80054f0:	eb4a 0106 	adc.w	r1, sl, r6
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	461d      	mov	r5, r3
 80054fa:	f04f 0600 	mov.w	r6, #0
 80054fe:	196b      	adds	r3, r5, r5
 8005500:	eb46 0406 	adc.w	r4, r6, r6
 8005504:	461a      	mov	r2, r3
 8005506:	4623      	mov	r3, r4
 8005508:	f7fb faee 	bl	8000ae8 <__aeabi_uldivmod>
 800550c:	4603      	mov	r3, r0
 800550e:	460c      	mov	r4, r1
 8005510:	461a      	mov	r2, r3
 8005512:	4b8b      	ldr	r3, [pc, #556]	; (8005740 <UART_SetConfig+0x384>)
 8005514:	fba3 1302 	umull	r1, r3, r3, r2
 8005518:	095b      	lsrs	r3, r3, #5
 800551a:	2164      	movs	r1, #100	; 0x64
 800551c:	fb01 f303 	mul.w	r3, r1, r3
 8005520:	1ad3      	subs	r3, r2, r3
 8005522:	00db      	lsls	r3, r3, #3
 8005524:	3332      	adds	r3, #50	; 0x32
 8005526:	4a86      	ldr	r2, [pc, #536]	; (8005740 <UART_SetConfig+0x384>)
 8005528:	fba2 2303 	umull	r2, r3, r2, r3
 800552c:	095b      	lsrs	r3, r3, #5
 800552e:	005b      	lsls	r3, r3, #1
 8005530:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005534:	4498      	add	r8, r3
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	461d      	mov	r5, r3
 800553a:	f04f 0600 	mov.w	r6, #0
 800553e:	46a9      	mov	r9, r5
 8005540:	46b2      	mov	sl, r6
 8005542:	eb19 0309 	adds.w	r3, r9, r9
 8005546:	eb4a 040a 	adc.w	r4, sl, sl
 800554a:	4699      	mov	r9, r3
 800554c:	46a2      	mov	sl, r4
 800554e:	eb19 0905 	adds.w	r9, r9, r5
 8005552:	eb4a 0a06 	adc.w	sl, sl, r6
 8005556:	f04f 0100 	mov.w	r1, #0
 800555a:	f04f 0200 	mov.w	r2, #0
 800555e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005562:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005566:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800556a:	4689      	mov	r9, r1
 800556c:	4692      	mov	sl, r2
 800556e:	eb19 0005 	adds.w	r0, r9, r5
 8005572:	eb4a 0106 	adc.w	r1, sl, r6
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	685b      	ldr	r3, [r3, #4]
 800557a:	461d      	mov	r5, r3
 800557c:	f04f 0600 	mov.w	r6, #0
 8005580:	196b      	adds	r3, r5, r5
 8005582:	eb46 0406 	adc.w	r4, r6, r6
 8005586:	461a      	mov	r2, r3
 8005588:	4623      	mov	r3, r4
 800558a:	f7fb faad 	bl	8000ae8 <__aeabi_uldivmod>
 800558e:	4603      	mov	r3, r0
 8005590:	460c      	mov	r4, r1
 8005592:	461a      	mov	r2, r3
 8005594:	4b6a      	ldr	r3, [pc, #424]	; (8005740 <UART_SetConfig+0x384>)
 8005596:	fba3 1302 	umull	r1, r3, r3, r2
 800559a:	095b      	lsrs	r3, r3, #5
 800559c:	2164      	movs	r1, #100	; 0x64
 800559e:	fb01 f303 	mul.w	r3, r1, r3
 80055a2:	1ad3      	subs	r3, r2, r3
 80055a4:	00db      	lsls	r3, r3, #3
 80055a6:	3332      	adds	r3, #50	; 0x32
 80055a8:	4a65      	ldr	r2, [pc, #404]	; (8005740 <UART_SetConfig+0x384>)
 80055aa:	fba2 2303 	umull	r2, r3, r2, r3
 80055ae:	095b      	lsrs	r3, r3, #5
 80055b0:	f003 0207 	and.w	r2, r3, #7
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4442      	add	r2, r8
 80055ba:	609a      	str	r2, [r3, #8]
 80055bc:	e26f      	b.n	8005a9e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80055be:	f7fe ffd3 	bl	8004568 <HAL_RCC_GetPCLK1Freq>
 80055c2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	461d      	mov	r5, r3
 80055c8:	f04f 0600 	mov.w	r6, #0
 80055cc:	46a8      	mov	r8, r5
 80055ce:	46b1      	mov	r9, r6
 80055d0:	eb18 0308 	adds.w	r3, r8, r8
 80055d4:	eb49 0409 	adc.w	r4, r9, r9
 80055d8:	4698      	mov	r8, r3
 80055da:	46a1      	mov	r9, r4
 80055dc:	eb18 0805 	adds.w	r8, r8, r5
 80055e0:	eb49 0906 	adc.w	r9, r9, r6
 80055e4:	f04f 0100 	mov.w	r1, #0
 80055e8:	f04f 0200 	mov.w	r2, #0
 80055ec:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80055f0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80055f4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80055f8:	4688      	mov	r8, r1
 80055fa:	4691      	mov	r9, r2
 80055fc:	eb18 0005 	adds.w	r0, r8, r5
 8005600:	eb49 0106 	adc.w	r1, r9, r6
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	685b      	ldr	r3, [r3, #4]
 8005608:	461d      	mov	r5, r3
 800560a:	f04f 0600 	mov.w	r6, #0
 800560e:	196b      	adds	r3, r5, r5
 8005610:	eb46 0406 	adc.w	r4, r6, r6
 8005614:	461a      	mov	r2, r3
 8005616:	4623      	mov	r3, r4
 8005618:	f7fb fa66 	bl	8000ae8 <__aeabi_uldivmod>
 800561c:	4603      	mov	r3, r0
 800561e:	460c      	mov	r4, r1
 8005620:	461a      	mov	r2, r3
 8005622:	4b47      	ldr	r3, [pc, #284]	; (8005740 <UART_SetConfig+0x384>)
 8005624:	fba3 2302 	umull	r2, r3, r3, r2
 8005628:	095b      	lsrs	r3, r3, #5
 800562a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	461d      	mov	r5, r3
 8005632:	f04f 0600 	mov.w	r6, #0
 8005636:	46a9      	mov	r9, r5
 8005638:	46b2      	mov	sl, r6
 800563a:	eb19 0309 	adds.w	r3, r9, r9
 800563e:	eb4a 040a 	adc.w	r4, sl, sl
 8005642:	4699      	mov	r9, r3
 8005644:	46a2      	mov	sl, r4
 8005646:	eb19 0905 	adds.w	r9, r9, r5
 800564a:	eb4a 0a06 	adc.w	sl, sl, r6
 800564e:	f04f 0100 	mov.w	r1, #0
 8005652:	f04f 0200 	mov.w	r2, #0
 8005656:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800565a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800565e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005662:	4689      	mov	r9, r1
 8005664:	4692      	mov	sl, r2
 8005666:	eb19 0005 	adds.w	r0, r9, r5
 800566a:	eb4a 0106 	adc.w	r1, sl, r6
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	685b      	ldr	r3, [r3, #4]
 8005672:	461d      	mov	r5, r3
 8005674:	f04f 0600 	mov.w	r6, #0
 8005678:	196b      	adds	r3, r5, r5
 800567a:	eb46 0406 	adc.w	r4, r6, r6
 800567e:	461a      	mov	r2, r3
 8005680:	4623      	mov	r3, r4
 8005682:	f7fb fa31 	bl	8000ae8 <__aeabi_uldivmod>
 8005686:	4603      	mov	r3, r0
 8005688:	460c      	mov	r4, r1
 800568a:	461a      	mov	r2, r3
 800568c:	4b2c      	ldr	r3, [pc, #176]	; (8005740 <UART_SetConfig+0x384>)
 800568e:	fba3 1302 	umull	r1, r3, r3, r2
 8005692:	095b      	lsrs	r3, r3, #5
 8005694:	2164      	movs	r1, #100	; 0x64
 8005696:	fb01 f303 	mul.w	r3, r1, r3
 800569a:	1ad3      	subs	r3, r2, r3
 800569c:	00db      	lsls	r3, r3, #3
 800569e:	3332      	adds	r3, #50	; 0x32
 80056a0:	4a27      	ldr	r2, [pc, #156]	; (8005740 <UART_SetConfig+0x384>)
 80056a2:	fba2 2303 	umull	r2, r3, r2, r3
 80056a6:	095b      	lsrs	r3, r3, #5
 80056a8:	005b      	lsls	r3, r3, #1
 80056aa:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80056ae:	4498      	add	r8, r3
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	461d      	mov	r5, r3
 80056b4:	f04f 0600 	mov.w	r6, #0
 80056b8:	46a9      	mov	r9, r5
 80056ba:	46b2      	mov	sl, r6
 80056bc:	eb19 0309 	adds.w	r3, r9, r9
 80056c0:	eb4a 040a 	adc.w	r4, sl, sl
 80056c4:	4699      	mov	r9, r3
 80056c6:	46a2      	mov	sl, r4
 80056c8:	eb19 0905 	adds.w	r9, r9, r5
 80056cc:	eb4a 0a06 	adc.w	sl, sl, r6
 80056d0:	f04f 0100 	mov.w	r1, #0
 80056d4:	f04f 0200 	mov.w	r2, #0
 80056d8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80056dc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80056e0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80056e4:	4689      	mov	r9, r1
 80056e6:	4692      	mov	sl, r2
 80056e8:	eb19 0005 	adds.w	r0, r9, r5
 80056ec:	eb4a 0106 	adc.w	r1, sl, r6
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	461d      	mov	r5, r3
 80056f6:	f04f 0600 	mov.w	r6, #0
 80056fa:	196b      	adds	r3, r5, r5
 80056fc:	eb46 0406 	adc.w	r4, r6, r6
 8005700:	461a      	mov	r2, r3
 8005702:	4623      	mov	r3, r4
 8005704:	f7fb f9f0 	bl	8000ae8 <__aeabi_uldivmod>
 8005708:	4603      	mov	r3, r0
 800570a:	460c      	mov	r4, r1
 800570c:	461a      	mov	r2, r3
 800570e:	4b0c      	ldr	r3, [pc, #48]	; (8005740 <UART_SetConfig+0x384>)
 8005710:	fba3 1302 	umull	r1, r3, r3, r2
 8005714:	095b      	lsrs	r3, r3, #5
 8005716:	2164      	movs	r1, #100	; 0x64
 8005718:	fb01 f303 	mul.w	r3, r1, r3
 800571c:	1ad3      	subs	r3, r2, r3
 800571e:	00db      	lsls	r3, r3, #3
 8005720:	3332      	adds	r3, #50	; 0x32
 8005722:	4a07      	ldr	r2, [pc, #28]	; (8005740 <UART_SetConfig+0x384>)
 8005724:	fba2 2303 	umull	r2, r3, r2, r3
 8005728:	095b      	lsrs	r3, r3, #5
 800572a:	f003 0207 	and.w	r2, r3, #7
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4442      	add	r2, r8
 8005734:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8005736:	e1b2      	b.n	8005a9e <UART_SetConfig+0x6e2>
 8005738:	40011000 	.word	0x40011000
 800573c:	40011400 	.word	0x40011400
 8005740:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4ad7      	ldr	r2, [pc, #860]	; (8005aa8 <UART_SetConfig+0x6ec>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d005      	beq.n	800575a <UART_SetConfig+0x39e>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4ad6      	ldr	r2, [pc, #856]	; (8005aac <UART_SetConfig+0x6f0>)
 8005754:	4293      	cmp	r3, r2
 8005756:	f040 80d1 	bne.w	80058fc <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800575a:	f7fe ff19 	bl	8004590 <HAL_RCC_GetPCLK2Freq>
 800575e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	469a      	mov	sl, r3
 8005764:	f04f 0b00 	mov.w	fp, #0
 8005768:	46d0      	mov	r8, sl
 800576a:	46d9      	mov	r9, fp
 800576c:	eb18 0308 	adds.w	r3, r8, r8
 8005770:	eb49 0409 	adc.w	r4, r9, r9
 8005774:	4698      	mov	r8, r3
 8005776:	46a1      	mov	r9, r4
 8005778:	eb18 080a 	adds.w	r8, r8, sl
 800577c:	eb49 090b 	adc.w	r9, r9, fp
 8005780:	f04f 0100 	mov.w	r1, #0
 8005784:	f04f 0200 	mov.w	r2, #0
 8005788:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800578c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005790:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005794:	4688      	mov	r8, r1
 8005796:	4691      	mov	r9, r2
 8005798:	eb1a 0508 	adds.w	r5, sl, r8
 800579c:	eb4b 0609 	adc.w	r6, fp, r9
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	4619      	mov	r1, r3
 80057a6:	f04f 0200 	mov.w	r2, #0
 80057aa:	f04f 0300 	mov.w	r3, #0
 80057ae:	f04f 0400 	mov.w	r4, #0
 80057b2:	0094      	lsls	r4, r2, #2
 80057b4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80057b8:	008b      	lsls	r3, r1, #2
 80057ba:	461a      	mov	r2, r3
 80057bc:	4623      	mov	r3, r4
 80057be:	4628      	mov	r0, r5
 80057c0:	4631      	mov	r1, r6
 80057c2:	f7fb f991 	bl	8000ae8 <__aeabi_uldivmod>
 80057c6:	4603      	mov	r3, r0
 80057c8:	460c      	mov	r4, r1
 80057ca:	461a      	mov	r2, r3
 80057cc:	4bb8      	ldr	r3, [pc, #736]	; (8005ab0 <UART_SetConfig+0x6f4>)
 80057ce:	fba3 2302 	umull	r2, r3, r3, r2
 80057d2:	095b      	lsrs	r3, r3, #5
 80057d4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	469b      	mov	fp, r3
 80057dc:	f04f 0c00 	mov.w	ip, #0
 80057e0:	46d9      	mov	r9, fp
 80057e2:	46e2      	mov	sl, ip
 80057e4:	eb19 0309 	adds.w	r3, r9, r9
 80057e8:	eb4a 040a 	adc.w	r4, sl, sl
 80057ec:	4699      	mov	r9, r3
 80057ee:	46a2      	mov	sl, r4
 80057f0:	eb19 090b 	adds.w	r9, r9, fp
 80057f4:	eb4a 0a0c 	adc.w	sl, sl, ip
 80057f8:	f04f 0100 	mov.w	r1, #0
 80057fc:	f04f 0200 	mov.w	r2, #0
 8005800:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005804:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005808:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800580c:	4689      	mov	r9, r1
 800580e:	4692      	mov	sl, r2
 8005810:	eb1b 0509 	adds.w	r5, fp, r9
 8005814:	eb4c 060a 	adc.w	r6, ip, sl
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	685b      	ldr	r3, [r3, #4]
 800581c:	4619      	mov	r1, r3
 800581e:	f04f 0200 	mov.w	r2, #0
 8005822:	f04f 0300 	mov.w	r3, #0
 8005826:	f04f 0400 	mov.w	r4, #0
 800582a:	0094      	lsls	r4, r2, #2
 800582c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005830:	008b      	lsls	r3, r1, #2
 8005832:	461a      	mov	r2, r3
 8005834:	4623      	mov	r3, r4
 8005836:	4628      	mov	r0, r5
 8005838:	4631      	mov	r1, r6
 800583a:	f7fb f955 	bl	8000ae8 <__aeabi_uldivmod>
 800583e:	4603      	mov	r3, r0
 8005840:	460c      	mov	r4, r1
 8005842:	461a      	mov	r2, r3
 8005844:	4b9a      	ldr	r3, [pc, #616]	; (8005ab0 <UART_SetConfig+0x6f4>)
 8005846:	fba3 1302 	umull	r1, r3, r3, r2
 800584a:	095b      	lsrs	r3, r3, #5
 800584c:	2164      	movs	r1, #100	; 0x64
 800584e:	fb01 f303 	mul.w	r3, r1, r3
 8005852:	1ad3      	subs	r3, r2, r3
 8005854:	011b      	lsls	r3, r3, #4
 8005856:	3332      	adds	r3, #50	; 0x32
 8005858:	4a95      	ldr	r2, [pc, #596]	; (8005ab0 <UART_SetConfig+0x6f4>)
 800585a:	fba2 2303 	umull	r2, r3, r2, r3
 800585e:	095b      	lsrs	r3, r3, #5
 8005860:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005864:	4498      	add	r8, r3
 8005866:	68bb      	ldr	r3, [r7, #8]
 8005868:	469b      	mov	fp, r3
 800586a:	f04f 0c00 	mov.w	ip, #0
 800586e:	46d9      	mov	r9, fp
 8005870:	46e2      	mov	sl, ip
 8005872:	eb19 0309 	adds.w	r3, r9, r9
 8005876:	eb4a 040a 	adc.w	r4, sl, sl
 800587a:	4699      	mov	r9, r3
 800587c:	46a2      	mov	sl, r4
 800587e:	eb19 090b 	adds.w	r9, r9, fp
 8005882:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005886:	f04f 0100 	mov.w	r1, #0
 800588a:	f04f 0200 	mov.w	r2, #0
 800588e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005892:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005896:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800589a:	4689      	mov	r9, r1
 800589c:	4692      	mov	sl, r2
 800589e:	eb1b 0509 	adds.w	r5, fp, r9
 80058a2:	eb4c 060a 	adc.w	r6, ip, sl
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	4619      	mov	r1, r3
 80058ac:	f04f 0200 	mov.w	r2, #0
 80058b0:	f04f 0300 	mov.w	r3, #0
 80058b4:	f04f 0400 	mov.w	r4, #0
 80058b8:	0094      	lsls	r4, r2, #2
 80058ba:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80058be:	008b      	lsls	r3, r1, #2
 80058c0:	461a      	mov	r2, r3
 80058c2:	4623      	mov	r3, r4
 80058c4:	4628      	mov	r0, r5
 80058c6:	4631      	mov	r1, r6
 80058c8:	f7fb f90e 	bl	8000ae8 <__aeabi_uldivmod>
 80058cc:	4603      	mov	r3, r0
 80058ce:	460c      	mov	r4, r1
 80058d0:	461a      	mov	r2, r3
 80058d2:	4b77      	ldr	r3, [pc, #476]	; (8005ab0 <UART_SetConfig+0x6f4>)
 80058d4:	fba3 1302 	umull	r1, r3, r3, r2
 80058d8:	095b      	lsrs	r3, r3, #5
 80058da:	2164      	movs	r1, #100	; 0x64
 80058dc:	fb01 f303 	mul.w	r3, r1, r3
 80058e0:	1ad3      	subs	r3, r2, r3
 80058e2:	011b      	lsls	r3, r3, #4
 80058e4:	3332      	adds	r3, #50	; 0x32
 80058e6:	4a72      	ldr	r2, [pc, #456]	; (8005ab0 <UART_SetConfig+0x6f4>)
 80058e8:	fba2 2303 	umull	r2, r3, r2, r3
 80058ec:	095b      	lsrs	r3, r3, #5
 80058ee:	f003 020f 	and.w	r2, r3, #15
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4442      	add	r2, r8
 80058f8:	609a      	str	r2, [r3, #8]
 80058fa:	e0d0      	b.n	8005a9e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80058fc:	f7fe fe34 	bl	8004568 <HAL_RCC_GetPCLK1Freq>
 8005900:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	469a      	mov	sl, r3
 8005906:	f04f 0b00 	mov.w	fp, #0
 800590a:	46d0      	mov	r8, sl
 800590c:	46d9      	mov	r9, fp
 800590e:	eb18 0308 	adds.w	r3, r8, r8
 8005912:	eb49 0409 	adc.w	r4, r9, r9
 8005916:	4698      	mov	r8, r3
 8005918:	46a1      	mov	r9, r4
 800591a:	eb18 080a 	adds.w	r8, r8, sl
 800591e:	eb49 090b 	adc.w	r9, r9, fp
 8005922:	f04f 0100 	mov.w	r1, #0
 8005926:	f04f 0200 	mov.w	r2, #0
 800592a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800592e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005932:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005936:	4688      	mov	r8, r1
 8005938:	4691      	mov	r9, r2
 800593a:	eb1a 0508 	adds.w	r5, sl, r8
 800593e:	eb4b 0609 	adc.w	r6, fp, r9
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	685b      	ldr	r3, [r3, #4]
 8005946:	4619      	mov	r1, r3
 8005948:	f04f 0200 	mov.w	r2, #0
 800594c:	f04f 0300 	mov.w	r3, #0
 8005950:	f04f 0400 	mov.w	r4, #0
 8005954:	0094      	lsls	r4, r2, #2
 8005956:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800595a:	008b      	lsls	r3, r1, #2
 800595c:	461a      	mov	r2, r3
 800595e:	4623      	mov	r3, r4
 8005960:	4628      	mov	r0, r5
 8005962:	4631      	mov	r1, r6
 8005964:	f7fb f8c0 	bl	8000ae8 <__aeabi_uldivmod>
 8005968:	4603      	mov	r3, r0
 800596a:	460c      	mov	r4, r1
 800596c:	461a      	mov	r2, r3
 800596e:	4b50      	ldr	r3, [pc, #320]	; (8005ab0 <UART_SetConfig+0x6f4>)
 8005970:	fba3 2302 	umull	r2, r3, r3, r2
 8005974:	095b      	lsrs	r3, r3, #5
 8005976:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	469b      	mov	fp, r3
 800597e:	f04f 0c00 	mov.w	ip, #0
 8005982:	46d9      	mov	r9, fp
 8005984:	46e2      	mov	sl, ip
 8005986:	eb19 0309 	adds.w	r3, r9, r9
 800598a:	eb4a 040a 	adc.w	r4, sl, sl
 800598e:	4699      	mov	r9, r3
 8005990:	46a2      	mov	sl, r4
 8005992:	eb19 090b 	adds.w	r9, r9, fp
 8005996:	eb4a 0a0c 	adc.w	sl, sl, ip
 800599a:	f04f 0100 	mov.w	r1, #0
 800599e:	f04f 0200 	mov.w	r2, #0
 80059a2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80059a6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80059aa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80059ae:	4689      	mov	r9, r1
 80059b0:	4692      	mov	sl, r2
 80059b2:	eb1b 0509 	adds.w	r5, fp, r9
 80059b6:	eb4c 060a 	adc.w	r6, ip, sl
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	685b      	ldr	r3, [r3, #4]
 80059be:	4619      	mov	r1, r3
 80059c0:	f04f 0200 	mov.w	r2, #0
 80059c4:	f04f 0300 	mov.w	r3, #0
 80059c8:	f04f 0400 	mov.w	r4, #0
 80059cc:	0094      	lsls	r4, r2, #2
 80059ce:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80059d2:	008b      	lsls	r3, r1, #2
 80059d4:	461a      	mov	r2, r3
 80059d6:	4623      	mov	r3, r4
 80059d8:	4628      	mov	r0, r5
 80059da:	4631      	mov	r1, r6
 80059dc:	f7fb f884 	bl	8000ae8 <__aeabi_uldivmod>
 80059e0:	4603      	mov	r3, r0
 80059e2:	460c      	mov	r4, r1
 80059e4:	461a      	mov	r2, r3
 80059e6:	4b32      	ldr	r3, [pc, #200]	; (8005ab0 <UART_SetConfig+0x6f4>)
 80059e8:	fba3 1302 	umull	r1, r3, r3, r2
 80059ec:	095b      	lsrs	r3, r3, #5
 80059ee:	2164      	movs	r1, #100	; 0x64
 80059f0:	fb01 f303 	mul.w	r3, r1, r3
 80059f4:	1ad3      	subs	r3, r2, r3
 80059f6:	011b      	lsls	r3, r3, #4
 80059f8:	3332      	adds	r3, #50	; 0x32
 80059fa:	4a2d      	ldr	r2, [pc, #180]	; (8005ab0 <UART_SetConfig+0x6f4>)
 80059fc:	fba2 2303 	umull	r2, r3, r2, r3
 8005a00:	095b      	lsrs	r3, r3, #5
 8005a02:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a06:	4498      	add	r8, r3
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	469b      	mov	fp, r3
 8005a0c:	f04f 0c00 	mov.w	ip, #0
 8005a10:	46d9      	mov	r9, fp
 8005a12:	46e2      	mov	sl, ip
 8005a14:	eb19 0309 	adds.w	r3, r9, r9
 8005a18:	eb4a 040a 	adc.w	r4, sl, sl
 8005a1c:	4699      	mov	r9, r3
 8005a1e:	46a2      	mov	sl, r4
 8005a20:	eb19 090b 	adds.w	r9, r9, fp
 8005a24:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005a28:	f04f 0100 	mov.w	r1, #0
 8005a2c:	f04f 0200 	mov.w	r2, #0
 8005a30:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005a34:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005a38:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005a3c:	4689      	mov	r9, r1
 8005a3e:	4692      	mov	sl, r2
 8005a40:	eb1b 0509 	adds.w	r5, fp, r9
 8005a44:	eb4c 060a 	adc.w	r6, ip, sl
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	4619      	mov	r1, r3
 8005a4e:	f04f 0200 	mov.w	r2, #0
 8005a52:	f04f 0300 	mov.w	r3, #0
 8005a56:	f04f 0400 	mov.w	r4, #0
 8005a5a:	0094      	lsls	r4, r2, #2
 8005a5c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005a60:	008b      	lsls	r3, r1, #2
 8005a62:	461a      	mov	r2, r3
 8005a64:	4623      	mov	r3, r4
 8005a66:	4628      	mov	r0, r5
 8005a68:	4631      	mov	r1, r6
 8005a6a:	f7fb f83d 	bl	8000ae8 <__aeabi_uldivmod>
 8005a6e:	4603      	mov	r3, r0
 8005a70:	460c      	mov	r4, r1
 8005a72:	461a      	mov	r2, r3
 8005a74:	4b0e      	ldr	r3, [pc, #56]	; (8005ab0 <UART_SetConfig+0x6f4>)
 8005a76:	fba3 1302 	umull	r1, r3, r3, r2
 8005a7a:	095b      	lsrs	r3, r3, #5
 8005a7c:	2164      	movs	r1, #100	; 0x64
 8005a7e:	fb01 f303 	mul.w	r3, r1, r3
 8005a82:	1ad3      	subs	r3, r2, r3
 8005a84:	011b      	lsls	r3, r3, #4
 8005a86:	3332      	adds	r3, #50	; 0x32
 8005a88:	4a09      	ldr	r2, [pc, #36]	; (8005ab0 <UART_SetConfig+0x6f4>)
 8005a8a:	fba2 2303 	umull	r2, r3, r2, r3
 8005a8e:	095b      	lsrs	r3, r3, #5
 8005a90:	f003 020f 	and.w	r2, r3, #15
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4442      	add	r2, r8
 8005a9a:	609a      	str	r2, [r3, #8]
}
 8005a9c:	e7ff      	b.n	8005a9e <UART_SetConfig+0x6e2>
 8005a9e:	bf00      	nop
 8005aa0:	3714      	adds	r7, #20
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005aa8:	40011000 	.word	0x40011000
 8005aac:	40011400 	.word	0x40011400
 8005ab0:	51eb851f 	.word	0x51eb851f

08005ab4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	b085      	sub	sp, #20
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	4603      	mov	r3, r0
 8005abc:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005abe:	2300      	movs	r3, #0
 8005ac0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005ac2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005ac6:	2b84      	cmp	r3, #132	; 0x84
 8005ac8:	d005      	beq.n	8005ad6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005aca:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	4413      	add	r3, r2
 8005ad2:	3303      	adds	r3, #3
 8005ad4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
}
 8005ad8:	4618      	mov	r0, r3
 8005ada:	3714      	adds	r7, #20
 8005adc:	46bd      	mov	sp, r7
 8005ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae2:	4770      	bx	lr

08005ae4 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b083      	sub	sp, #12
 8005ae8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005aea:	f3ef 8305 	mrs	r3, IPSR
 8005aee:	607b      	str	r3, [r7, #4]
  return(result);
 8005af0:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	bf14      	ite	ne
 8005af6:	2301      	movne	r3, #1
 8005af8:	2300      	moveq	r3, #0
 8005afa:	b2db      	uxtb	r3, r3
}
 8005afc:	4618      	mov	r0, r3
 8005afe:	370c      	adds	r7, #12
 8005b00:	46bd      	mov	sp, r7
 8005b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b06:	4770      	bx	lr

08005b08 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005b0c:	f001 f8e8 	bl	8006ce0 <vTaskStartScheduler>
  
  return osOK;
 8005b10:	2300      	movs	r3, #0
}
 8005b12:	4618      	mov	r0, r3
 8005b14:	bd80      	pop	{r7, pc}

08005b16 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005b16:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b18:	b089      	sub	sp, #36	; 0x24
 8005b1a:	af04      	add	r7, sp, #16
 8005b1c:	6078      	str	r0, [r7, #4]
 8005b1e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	695b      	ldr	r3, [r3, #20]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d020      	beq.n	8005b6a <osThreadCreate+0x54>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	699b      	ldr	r3, [r3, #24]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d01c      	beq.n	8005b6a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	685c      	ldr	r4, [r3, #4]
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681d      	ldr	r5, [r3, #0]
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	691e      	ldr	r6, [r3, #16]
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005b42:	4618      	mov	r0, r3
 8005b44:	f7ff ffb6 	bl	8005ab4 <makeFreeRtosPriority>
 8005b48:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	695b      	ldr	r3, [r3, #20]
 8005b4e:	687a      	ldr	r2, [r7, #4]
 8005b50:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005b52:	9202      	str	r2, [sp, #8]
 8005b54:	9301      	str	r3, [sp, #4]
 8005b56:	9100      	str	r1, [sp, #0]
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	4632      	mov	r2, r6
 8005b5c:	4629      	mov	r1, r5
 8005b5e:	4620      	mov	r0, r4
 8005b60:	f000 fefb 	bl	800695a <xTaskCreateStatic>
 8005b64:	4603      	mov	r3, r0
 8005b66:	60fb      	str	r3, [r7, #12]
 8005b68:	e01c      	b.n	8005ba4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	685c      	ldr	r4, [r3, #4]
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005b76:	b29e      	uxth	r6, r3
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005b7e:	4618      	mov	r0, r3
 8005b80:	f7ff ff98 	bl	8005ab4 <makeFreeRtosPriority>
 8005b84:	4602      	mov	r2, r0
 8005b86:	f107 030c 	add.w	r3, r7, #12
 8005b8a:	9301      	str	r3, [sp, #4]
 8005b8c:	9200      	str	r2, [sp, #0]
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	4632      	mov	r2, r6
 8005b92:	4629      	mov	r1, r5
 8005b94:	4620      	mov	r0, r4
 8005b96:	f000 ff3a 	bl	8006a0e <xTaskCreate>
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	2b01      	cmp	r3, #1
 8005b9e:	d001      	beq.n	8005ba4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	e000      	b.n	8005ba6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	3714      	adds	r7, #20
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005bae <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005bae:	b580      	push	{r7, lr}
 8005bb0:	b084      	sub	sp, #16
 8005bb2:	af00      	add	r7, sp, #0
 8005bb4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d001      	beq.n	8005bc4 <osDelay+0x16>
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	e000      	b.n	8005bc6 <osDelay+0x18>
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	f001 f856 	bl	8006c78 <vTaskDelay>
  
  return osOK;
 8005bcc:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005bce:	4618      	mov	r0, r3
 8005bd0:	3710      	adds	r7, #16
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bd80      	pop	{r7, pc}

08005bd6 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8005bd6:	b590      	push	{r4, r7, lr}
 8005bd8:	b085      	sub	sp, #20
 8005bda:	af02      	add	r7, sp, #8
 8005bdc:	6078      	str	r0, [r7, #4]
 8005bde:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	689b      	ldr	r3, [r3, #8]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d012      	beq.n	8005c0e <osMessageCreate+0x38>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	68db      	ldr	r3, [r3, #12]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d00e      	beq.n	8005c0e <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6818      	ldr	r0, [r3, #0]
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6859      	ldr	r1, [r3, #4]
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	689a      	ldr	r2, [r3, #8]
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	68dc      	ldr	r4, [r3, #12]
 8005c00:	2300      	movs	r3, #0
 8005c02:	9300      	str	r3, [sp, #0]
 8005c04:	4623      	mov	r3, r4
 8005c06:	f000 f9df 	bl	8005fc8 <xQueueGenericCreateStatic>
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	e008      	b.n	8005c20 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6818      	ldr	r0, [r3, #0]
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	2200      	movs	r2, #0
 8005c18:	4619      	mov	r1, r3
 8005c1a:	f000 fa48 	bl	80060ae <xQueueGenericCreate>
 8005c1e:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	370c      	adds	r7, #12
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bd90      	pop	{r4, r7, pc}

08005c28 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b086      	sub	sp, #24
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	60f8      	str	r0, [r7, #12]
 8005c30:	60b9      	str	r1, [r7, #8]
 8005c32:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8005c34:	2300      	movs	r3, #0
 8005c36:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8005c3c:	697b      	ldr	r3, [r7, #20]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d101      	bne.n	8005c46 <osMessagePut+0x1e>
    ticks = 1;
 8005c42:	2301      	movs	r3, #1
 8005c44:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8005c46:	f7ff ff4d 	bl	8005ae4 <inHandlerMode>
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d018      	beq.n	8005c82 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8005c50:	f107 0210 	add.w	r2, r7, #16
 8005c54:	f107 0108 	add.w	r1, r7, #8
 8005c58:	2300      	movs	r3, #0
 8005c5a:	68f8      	ldr	r0, [r7, #12]
 8005c5c:	f000 fb80 	bl	8006360 <xQueueGenericSendFromISR>
 8005c60:	4603      	mov	r3, r0
 8005c62:	2b01      	cmp	r3, #1
 8005c64:	d001      	beq.n	8005c6a <osMessagePut+0x42>
      return osErrorOS;
 8005c66:	23ff      	movs	r3, #255	; 0xff
 8005c68:	e018      	b.n	8005c9c <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005c6a:	693b      	ldr	r3, [r7, #16]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d014      	beq.n	8005c9a <osMessagePut+0x72>
 8005c70:	4b0c      	ldr	r3, [pc, #48]	; (8005ca4 <osMessagePut+0x7c>)
 8005c72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c76:	601a      	str	r2, [r3, #0]
 8005c78:	f3bf 8f4f 	dsb	sy
 8005c7c:	f3bf 8f6f 	isb	sy
 8005c80:	e00b      	b.n	8005c9a <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8005c82:	f107 0108 	add.w	r1, r7, #8
 8005c86:	2300      	movs	r3, #0
 8005c88:	697a      	ldr	r2, [r7, #20]
 8005c8a:	68f8      	ldr	r0, [r7, #12]
 8005c8c:	f000 fa6e 	bl	800616c <xQueueGenericSend>
 8005c90:	4603      	mov	r3, r0
 8005c92:	2b01      	cmp	r3, #1
 8005c94:	d001      	beq.n	8005c9a <osMessagePut+0x72>
      return osErrorOS;
 8005c96:	23ff      	movs	r3, #255	; 0xff
 8005c98:	e000      	b.n	8005c9c <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8005c9a:	2300      	movs	r3, #0
}
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	3718      	adds	r7, #24
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	bd80      	pop	{r7, pc}
 8005ca4:	e000ed04 	.word	0xe000ed04

08005ca8 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8005ca8:	b590      	push	{r4, r7, lr}
 8005caa:	b08b      	sub	sp, #44	; 0x2c
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	60f8      	str	r0, [r7, #12]
 8005cb0:	60b9      	str	r1, [r7, #8]
 8005cb2:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8005cb8:	2300      	movs	r3, #0
 8005cba:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d10a      	bne.n	8005cd8 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8005cc2:	2380      	movs	r3, #128	; 0x80
 8005cc4:	617b      	str	r3, [r7, #20]
    return event;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	461c      	mov	r4, r3
 8005cca:	f107 0314 	add.w	r3, r7, #20
 8005cce:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005cd2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005cd6:	e054      	b.n	8005d82 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8005cd8:	2300      	movs	r3, #0
 8005cda:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8005cdc:	2300      	movs	r3, #0
 8005cde:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ce6:	d103      	bne.n	8005cf0 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8005ce8:	f04f 33ff 	mov.w	r3, #4294967295
 8005cec:	627b      	str	r3, [r7, #36]	; 0x24
 8005cee:	e009      	b.n	8005d04 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d006      	beq.n	8005d04 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8005cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d101      	bne.n	8005d04 <osMessageGet+0x5c>
      ticks = 1;
 8005d00:	2301      	movs	r3, #1
 8005d02:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8005d04:	f7ff feee 	bl	8005ae4 <inHandlerMode>
 8005d08:	4603      	mov	r3, r0
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d01c      	beq.n	8005d48 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8005d0e:	f107 0220 	add.w	r2, r7, #32
 8005d12:	f107 0314 	add.w	r3, r7, #20
 8005d16:	3304      	adds	r3, #4
 8005d18:	4619      	mov	r1, r3
 8005d1a:	68b8      	ldr	r0, [r7, #8]
 8005d1c:	f000 fc90 	bl	8006640 <xQueueReceiveFromISR>
 8005d20:	4603      	mov	r3, r0
 8005d22:	2b01      	cmp	r3, #1
 8005d24:	d102      	bne.n	8005d2c <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8005d26:	2310      	movs	r3, #16
 8005d28:	617b      	str	r3, [r7, #20]
 8005d2a:	e001      	b.n	8005d30 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005d30:	6a3b      	ldr	r3, [r7, #32]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d01d      	beq.n	8005d72 <osMessageGet+0xca>
 8005d36:	4b15      	ldr	r3, [pc, #84]	; (8005d8c <osMessageGet+0xe4>)
 8005d38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d3c:	601a      	str	r2, [r3, #0]
 8005d3e:	f3bf 8f4f 	dsb	sy
 8005d42:	f3bf 8f6f 	isb	sy
 8005d46:	e014      	b.n	8005d72 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8005d48:	f107 0314 	add.w	r3, r7, #20
 8005d4c:	3304      	adds	r3, #4
 8005d4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d50:	4619      	mov	r1, r3
 8005d52:	68b8      	ldr	r0, [r7, #8]
 8005d54:	f000 fb98 	bl	8006488 <xQueueReceive>
 8005d58:	4603      	mov	r3, r0
 8005d5a:	2b01      	cmp	r3, #1
 8005d5c:	d102      	bne.n	8005d64 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8005d5e:	2310      	movs	r3, #16
 8005d60:	617b      	str	r3, [r7, #20]
 8005d62:	e006      	b.n	8005d72 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8005d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d101      	bne.n	8005d6e <osMessageGet+0xc6>
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	e000      	b.n	8005d70 <osMessageGet+0xc8>
 8005d6e:	2340      	movs	r3, #64	; 0x40
 8005d70:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	461c      	mov	r4, r3
 8005d76:	f107 0314 	add.w	r3, r7, #20
 8005d7a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005d7e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8005d82:	68f8      	ldr	r0, [r7, #12]
 8005d84:	372c      	adds	r7, #44	; 0x2c
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bd90      	pop	{r4, r7, pc}
 8005d8a:	bf00      	nop
 8005d8c:	e000ed04 	.word	0xe000ed04

08005d90 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005d90:	b480      	push	{r7}
 8005d92:	b083      	sub	sp, #12
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	f103 0208 	add.w	r2, r3, #8
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	f04f 32ff 	mov.w	r2, #4294967295
 8005da8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	f103 0208 	add.w	r2, r3, #8
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	f103 0208 	add.w	r2, r3, #8
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005dc4:	bf00      	nop
 8005dc6:	370c      	adds	r7, #12
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dce:	4770      	bx	lr

08005dd0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b083      	sub	sp, #12
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2200      	movs	r2, #0
 8005ddc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005dde:	bf00      	nop
 8005de0:	370c      	adds	r7, #12
 8005de2:	46bd      	mov	sp, r7
 8005de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de8:	4770      	bx	lr

08005dea <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005dea:	b480      	push	{r7}
 8005dec:	b085      	sub	sp, #20
 8005dee:	af00      	add	r7, sp, #0
 8005df0:	6078      	str	r0, [r7, #4]
 8005df2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	685b      	ldr	r3, [r3, #4]
 8005df8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	68fa      	ldr	r2, [r7, #12]
 8005dfe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	689a      	ldr	r2, [r3, #8]
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	689b      	ldr	r3, [r3, #8]
 8005e0c:	683a      	ldr	r2, [r7, #0]
 8005e0e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	683a      	ldr	r2, [r7, #0]
 8005e14:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	687a      	ldr	r2, [r7, #4]
 8005e1a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	1c5a      	adds	r2, r3, #1
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	601a      	str	r2, [r3, #0]
}
 8005e26:	bf00      	nop
 8005e28:	3714      	adds	r7, #20
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e30:	4770      	bx	lr

08005e32 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005e32:	b480      	push	{r7}
 8005e34:	b085      	sub	sp, #20
 8005e36:	af00      	add	r7, sp, #0
 8005e38:	6078      	str	r0, [r7, #4]
 8005e3a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e48:	d103      	bne.n	8005e52 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	691b      	ldr	r3, [r3, #16]
 8005e4e:	60fb      	str	r3, [r7, #12]
 8005e50:	e00c      	b.n	8005e6c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	3308      	adds	r3, #8
 8005e56:	60fb      	str	r3, [r7, #12]
 8005e58:	e002      	b.n	8005e60 <vListInsert+0x2e>
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	685b      	ldr	r3, [r3, #4]
 8005e5e:	60fb      	str	r3, [r7, #12]
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	685b      	ldr	r3, [r3, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	68ba      	ldr	r2, [r7, #8]
 8005e68:	429a      	cmp	r2, r3
 8005e6a:	d2f6      	bcs.n	8005e5a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	685a      	ldr	r2, [r3, #4]
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	685b      	ldr	r3, [r3, #4]
 8005e78:	683a      	ldr	r2, [r7, #0]
 8005e7a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	68fa      	ldr	r2, [r7, #12]
 8005e80:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	683a      	ldr	r2, [r7, #0]
 8005e86:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	687a      	ldr	r2, [r7, #4]
 8005e8c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	1c5a      	adds	r2, r3, #1
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	601a      	str	r2, [r3, #0]
}
 8005e98:	bf00      	nop
 8005e9a:	3714      	adds	r7, #20
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea2:	4770      	bx	lr

08005ea4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b085      	sub	sp, #20
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	691b      	ldr	r3, [r3, #16]
 8005eb0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	685b      	ldr	r3, [r3, #4]
 8005eb6:	687a      	ldr	r2, [r7, #4]
 8005eb8:	6892      	ldr	r2, [r2, #8]
 8005eba:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	689b      	ldr	r3, [r3, #8]
 8005ec0:	687a      	ldr	r2, [r7, #4]
 8005ec2:	6852      	ldr	r2, [r2, #4]
 8005ec4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	685b      	ldr	r3, [r3, #4]
 8005eca:	687a      	ldr	r2, [r7, #4]
 8005ecc:	429a      	cmp	r2, r3
 8005ece:	d103      	bne.n	8005ed8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	689a      	ldr	r2, [r3, #8]
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2200      	movs	r2, #0
 8005edc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	1e5a      	subs	r2, r3, #1
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
}
 8005eec:	4618      	mov	r0, r3
 8005eee:	3714      	adds	r7, #20
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef6:	4770      	bx	lr

08005ef8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b084      	sub	sp, #16
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
 8005f00:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d109      	bne.n	8005f20 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f10:	f383 8811 	msr	BASEPRI, r3
 8005f14:	f3bf 8f6f 	isb	sy
 8005f18:	f3bf 8f4f 	dsb	sy
 8005f1c:	60bb      	str	r3, [r7, #8]
 8005f1e:	e7fe      	b.n	8005f1e <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8005f20:	f001 fd04 	bl	800792c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681a      	ldr	r2, [r3, #0]
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f2c:	68f9      	ldr	r1, [r7, #12]
 8005f2e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005f30:	fb01 f303 	mul.w	r3, r1, r3
 8005f34:	441a      	add	r2, r3
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681a      	ldr	r2, [r3, #0]
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681a      	ldr	r2, [r3, #0]
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f50:	3b01      	subs	r3, #1
 8005f52:	68f9      	ldr	r1, [r7, #12]
 8005f54:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005f56:	fb01 f303 	mul.w	r3, r1, r3
 8005f5a:	441a      	add	r2, r3
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	22ff      	movs	r2, #255	; 0xff
 8005f64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	22ff      	movs	r2, #255	; 0xff
 8005f6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d114      	bne.n	8005fa0 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	691b      	ldr	r3, [r3, #16]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d01a      	beq.n	8005fb4 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	3310      	adds	r3, #16
 8005f82:	4618      	mov	r0, r3
 8005f84:	f001 f8ea 	bl	800715c <xTaskRemoveFromEventList>
 8005f88:	4603      	mov	r3, r0
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d012      	beq.n	8005fb4 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005f8e:	4b0d      	ldr	r3, [pc, #52]	; (8005fc4 <xQueueGenericReset+0xcc>)
 8005f90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f94:	601a      	str	r2, [r3, #0]
 8005f96:	f3bf 8f4f 	dsb	sy
 8005f9a:	f3bf 8f6f 	isb	sy
 8005f9e:	e009      	b.n	8005fb4 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	3310      	adds	r3, #16
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	f7ff fef3 	bl	8005d90 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	3324      	adds	r3, #36	; 0x24
 8005fae:	4618      	mov	r0, r3
 8005fb0:	f7ff feee 	bl	8005d90 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005fb4:	f001 fce8 	bl	8007988 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005fb8:	2301      	movs	r3, #1
}
 8005fba:	4618      	mov	r0, r3
 8005fbc:	3710      	adds	r7, #16
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bd80      	pop	{r7, pc}
 8005fc2:	bf00      	nop
 8005fc4:	e000ed04 	.word	0xe000ed04

08005fc8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b08e      	sub	sp, #56	; 0x38
 8005fcc:	af02      	add	r7, sp, #8
 8005fce:	60f8      	str	r0, [r7, #12]
 8005fd0:	60b9      	str	r1, [r7, #8]
 8005fd2:	607a      	str	r2, [r7, #4]
 8005fd4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d109      	bne.n	8005ff0 <xQueueGenericCreateStatic+0x28>
 8005fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fe0:	f383 8811 	msr	BASEPRI, r3
 8005fe4:	f3bf 8f6f 	isb	sy
 8005fe8:	f3bf 8f4f 	dsb	sy
 8005fec:	62bb      	str	r3, [r7, #40]	; 0x28
 8005fee:	e7fe      	b.n	8005fee <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d109      	bne.n	800600a <xQueueGenericCreateStatic+0x42>
 8005ff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ffa:	f383 8811 	msr	BASEPRI, r3
 8005ffe:	f3bf 8f6f 	isb	sy
 8006002:	f3bf 8f4f 	dsb	sy
 8006006:	627b      	str	r3, [r7, #36]	; 0x24
 8006008:	e7fe      	b.n	8006008 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d002      	beq.n	8006016 <xQueueGenericCreateStatic+0x4e>
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d001      	beq.n	800601a <xQueueGenericCreateStatic+0x52>
 8006016:	2301      	movs	r3, #1
 8006018:	e000      	b.n	800601c <xQueueGenericCreateStatic+0x54>
 800601a:	2300      	movs	r3, #0
 800601c:	2b00      	cmp	r3, #0
 800601e:	d109      	bne.n	8006034 <xQueueGenericCreateStatic+0x6c>
 8006020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006024:	f383 8811 	msr	BASEPRI, r3
 8006028:	f3bf 8f6f 	isb	sy
 800602c:	f3bf 8f4f 	dsb	sy
 8006030:	623b      	str	r3, [r7, #32]
 8006032:	e7fe      	b.n	8006032 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d102      	bne.n	8006040 <xQueueGenericCreateStatic+0x78>
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d101      	bne.n	8006044 <xQueueGenericCreateStatic+0x7c>
 8006040:	2301      	movs	r3, #1
 8006042:	e000      	b.n	8006046 <xQueueGenericCreateStatic+0x7e>
 8006044:	2300      	movs	r3, #0
 8006046:	2b00      	cmp	r3, #0
 8006048:	d109      	bne.n	800605e <xQueueGenericCreateStatic+0x96>
 800604a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800604e:	f383 8811 	msr	BASEPRI, r3
 8006052:	f3bf 8f6f 	isb	sy
 8006056:	f3bf 8f4f 	dsb	sy
 800605a:	61fb      	str	r3, [r7, #28]
 800605c:	e7fe      	b.n	800605c <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800605e:	2348      	movs	r3, #72	; 0x48
 8006060:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006062:	697b      	ldr	r3, [r7, #20]
 8006064:	2b48      	cmp	r3, #72	; 0x48
 8006066:	d009      	beq.n	800607c <xQueueGenericCreateStatic+0xb4>
 8006068:	f04f 0350 	mov.w	r3, #80	; 0x50
 800606c:	f383 8811 	msr	BASEPRI, r3
 8006070:	f3bf 8f6f 	isb	sy
 8006074:	f3bf 8f4f 	dsb	sy
 8006078:	61bb      	str	r3, [r7, #24]
 800607a:	e7fe      	b.n	800607a <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800607c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006084:	2b00      	cmp	r3, #0
 8006086:	d00d      	beq.n	80060a4 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800608a:	2201      	movs	r2, #1
 800608c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006090:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006096:	9300      	str	r3, [sp, #0]
 8006098:	4613      	mov	r3, r2
 800609a:	687a      	ldr	r2, [r7, #4]
 800609c:	68b9      	ldr	r1, [r7, #8]
 800609e:	68f8      	ldr	r0, [r7, #12]
 80060a0:	f000 f844 	bl	800612c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80060a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80060a6:	4618      	mov	r0, r3
 80060a8:	3730      	adds	r7, #48	; 0x30
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bd80      	pop	{r7, pc}

080060ae <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80060ae:	b580      	push	{r7, lr}
 80060b0:	b08a      	sub	sp, #40	; 0x28
 80060b2:	af02      	add	r7, sp, #8
 80060b4:	60f8      	str	r0, [r7, #12]
 80060b6:	60b9      	str	r1, [r7, #8]
 80060b8:	4613      	mov	r3, r2
 80060ba:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d109      	bne.n	80060d6 <xQueueGenericCreate+0x28>
 80060c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060c6:	f383 8811 	msr	BASEPRI, r3
 80060ca:	f3bf 8f6f 	isb	sy
 80060ce:	f3bf 8f4f 	dsb	sy
 80060d2:	613b      	str	r3, [r7, #16]
 80060d4:	e7fe      	b.n	80060d4 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80060d6:	68bb      	ldr	r3, [r7, #8]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d102      	bne.n	80060e2 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80060dc:	2300      	movs	r3, #0
 80060de:	61fb      	str	r3, [r7, #28]
 80060e0:	e004      	b.n	80060ec <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	68ba      	ldr	r2, [r7, #8]
 80060e6:	fb02 f303 	mul.w	r3, r2, r3
 80060ea:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80060ec:	69fb      	ldr	r3, [r7, #28]
 80060ee:	3348      	adds	r3, #72	; 0x48
 80060f0:	4618      	mov	r0, r3
 80060f2:	f001 fd35 	bl	8007b60 <pvPortMalloc>
 80060f6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80060f8:	69bb      	ldr	r3, [r7, #24]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d011      	beq.n	8006122 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80060fe:	69bb      	ldr	r3, [r7, #24]
 8006100:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006102:	697b      	ldr	r3, [r7, #20]
 8006104:	3348      	adds	r3, #72	; 0x48
 8006106:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006108:	69bb      	ldr	r3, [r7, #24]
 800610a:	2200      	movs	r2, #0
 800610c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006110:	79fa      	ldrb	r2, [r7, #7]
 8006112:	69bb      	ldr	r3, [r7, #24]
 8006114:	9300      	str	r3, [sp, #0]
 8006116:	4613      	mov	r3, r2
 8006118:	697a      	ldr	r2, [r7, #20]
 800611a:	68b9      	ldr	r1, [r7, #8]
 800611c:	68f8      	ldr	r0, [r7, #12]
 800611e:	f000 f805 	bl	800612c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006122:	69bb      	ldr	r3, [r7, #24]
	}
 8006124:	4618      	mov	r0, r3
 8006126:	3720      	adds	r7, #32
 8006128:	46bd      	mov	sp, r7
 800612a:	bd80      	pop	{r7, pc}

0800612c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b084      	sub	sp, #16
 8006130:	af00      	add	r7, sp, #0
 8006132:	60f8      	str	r0, [r7, #12]
 8006134:	60b9      	str	r1, [r7, #8]
 8006136:	607a      	str	r2, [r7, #4]
 8006138:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800613a:	68bb      	ldr	r3, [r7, #8]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d103      	bne.n	8006148 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006140:	69bb      	ldr	r3, [r7, #24]
 8006142:	69ba      	ldr	r2, [r7, #24]
 8006144:	601a      	str	r2, [r3, #0]
 8006146:	e002      	b.n	800614e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006148:	69bb      	ldr	r3, [r7, #24]
 800614a:	687a      	ldr	r2, [r7, #4]
 800614c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800614e:	69bb      	ldr	r3, [r7, #24]
 8006150:	68fa      	ldr	r2, [r7, #12]
 8006152:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006154:	69bb      	ldr	r3, [r7, #24]
 8006156:	68ba      	ldr	r2, [r7, #8]
 8006158:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800615a:	2101      	movs	r1, #1
 800615c:	69b8      	ldr	r0, [r7, #24]
 800615e:	f7ff fecb 	bl	8005ef8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006162:	bf00      	nop
 8006164:	3710      	adds	r7, #16
 8006166:	46bd      	mov	sp, r7
 8006168:	bd80      	pop	{r7, pc}
	...

0800616c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b08e      	sub	sp, #56	; 0x38
 8006170:	af00      	add	r7, sp, #0
 8006172:	60f8      	str	r0, [r7, #12]
 8006174:	60b9      	str	r1, [r7, #8]
 8006176:	607a      	str	r2, [r7, #4]
 8006178:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800617a:	2300      	movs	r3, #0
 800617c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006184:	2b00      	cmp	r3, #0
 8006186:	d109      	bne.n	800619c <xQueueGenericSend+0x30>
 8006188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800618c:	f383 8811 	msr	BASEPRI, r3
 8006190:	f3bf 8f6f 	isb	sy
 8006194:	f3bf 8f4f 	dsb	sy
 8006198:	62bb      	str	r3, [r7, #40]	; 0x28
 800619a:	e7fe      	b.n	800619a <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d103      	bne.n	80061aa <xQueueGenericSend+0x3e>
 80061a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d101      	bne.n	80061ae <xQueueGenericSend+0x42>
 80061aa:	2301      	movs	r3, #1
 80061ac:	e000      	b.n	80061b0 <xQueueGenericSend+0x44>
 80061ae:	2300      	movs	r3, #0
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d109      	bne.n	80061c8 <xQueueGenericSend+0x5c>
 80061b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061b8:	f383 8811 	msr	BASEPRI, r3
 80061bc:	f3bf 8f6f 	isb	sy
 80061c0:	f3bf 8f4f 	dsb	sy
 80061c4:	627b      	str	r3, [r7, #36]	; 0x24
 80061c6:	e7fe      	b.n	80061c6 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	2b02      	cmp	r3, #2
 80061cc:	d103      	bne.n	80061d6 <xQueueGenericSend+0x6a>
 80061ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061d2:	2b01      	cmp	r3, #1
 80061d4:	d101      	bne.n	80061da <xQueueGenericSend+0x6e>
 80061d6:	2301      	movs	r3, #1
 80061d8:	e000      	b.n	80061dc <xQueueGenericSend+0x70>
 80061da:	2300      	movs	r3, #0
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d109      	bne.n	80061f4 <xQueueGenericSend+0x88>
 80061e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061e4:	f383 8811 	msr	BASEPRI, r3
 80061e8:	f3bf 8f6f 	isb	sy
 80061ec:	f3bf 8f4f 	dsb	sy
 80061f0:	623b      	str	r3, [r7, #32]
 80061f2:	e7fe      	b.n	80061f2 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80061f4:	f001 f968 	bl	80074c8 <xTaskGetSchedulerState>
 80061f8:	4603      	mov	r3, r0
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d102      	bne.n	8006204 <xQueueGenericSend+0x98>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d101      	bne.n	8006208 <xQueueGenericSend+0x9c>
 8006204:	2301      	movs	r3, #1
 8006206:	e000      	b.n	800620a <xQueueGenericSend+0x9e>
 8006208:	2300      	movs	r3, #0
 800620a:	2b00      	cmp	r3, #0
 800620c:	d109      	bne.n	8006222 <xQueueGenericSend+0xb6>
 800620e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006212:	f383 8811 	msr	BASEPRI, r3
 8006216:	f3bf 8f6f 	isb	sy
 800621a:	f3bf 8f4f 	dsb	sy
 800621e:	61fb      	str	r3, [r7, #28]
 8006220:	e7fe      	b.n	8006220 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006222:	f001 fb83 	bl	800792c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006228:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800622a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800622c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800622e:	429a      	cmp	r2, r3
 8006230:	d302      	bcc.n	8006238 <xQueueGenericSend+0xcc>
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	2b02      	cmp	r3, #2
 8006236:	d129      	bne.n	800628c <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006238:	683a      	ldr	r2, [r7, #0]
 800623a:	68b9      	ldr	r1, [r7, #8]
 800623c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800623e:	f000 fa7c 	bl	800673a <prvCopyDataToQueue>
 8006242:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006248:	2b00      	cmp	r3, #0
 800624a:	d010      	beq.n	800626e <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800624c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800624e:	3324      	adds	r3, #36	; 0x24
 8006250:	4618      	mov	r0, r3
 8006252:	f000 ff83 	bl	800715c <xTaskRemoveFromEventList>
 8006256:	4603      	mov	r3, r0
 8006258:	2b00      	cmp	r3, #0
 800625a:	d013      	beq.n	8006284 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800625c:	4b3f      	ldr	r3, [pc, #252]	; (800635c <xQueueGenericSend+0x1f0>)
 800625e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006262:	601a      	str	r2, [r3, #0]
 8006264:	f3bf 8f4f 	dsb	sy
 8006268:	f3bf 8f6f 	isb	sy
 800626c:	e00a      	b.n	8006284 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800626e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006270:	2b00      	cmp	r3, #0
 8006272:	d007      	beq.n	8006284 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006274:	4b39      	ldr	r3, [pc, #228]	; (800635c <xQueueGenericSend+0x1f0>)
 8006276:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800627a:	601a      	str	r2, [r3, #0]
 800627c:	f3bf 8f4f 	dsb	sy
 8006280:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006284:	f001 fb80 	bl	8007988 <vPortExitCritical>
				return pdPASS;
 8006288:	2301      	movs	r3, #1
 800628a:	e063      	b.n	8006354 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d103      	bne.n	800629a <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006292:	f001 fb79 	bl	8007988 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006296:	2300      	movs	r3, #0
 8006298:	e05c      	b.n	8006354 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800629a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800629c:	2b00      	cmp	r3, #0
 800629e:	d106      	bne.n	80062ae <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80062a0:	f107 0314 	add.w	r3, r7, #20
 80062a4:	4618      	mov	r0, r3
 80062a6:	f000 ffbb 	bl	8007220 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80062aa:	2301      	movs	r3, #1
 80062ac:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80062ae:	f001 fb6b 	bl	8007988 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80062b2:	f000 fd73 	bl	8006d9c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80062b6:	f001 fb39 	bl	800792c <vPortEnterCritical>
 80062ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80062c0:	b25b      	sxtb	r3, r3
 80062c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062c6:	d103      	bne.n	80062d0 <xQueueGenericSend+0x164>
 80062c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ca:	2200      	movs	r2, #0
 80062cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80062d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80062d6:	b25b      	sxtb	r3, r3
 80062d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062dc:	d103      	bne.n	80062e6 <xQueueGenericSend+0x17a>
 80062de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062e0:	2200      	movs	r2, #0
 80062e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80062e6:	f001 fb4f 	bl	8007988 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80062ea:	1d3a      	adds	r2, r7, #4
 80062ec:	f107 0314 	add.w	r3, r7, #20
 80062f0:	4611      	mov	r1, r2
 80062f2:	4618      	mov	r0, r3
 80062f4:	f000 ffaa 	bl	800724c <xTaskCheckForTimeOut>
 80062f8:	4603      	mov	r3, r0
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d124      	bne.n	8006348 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80062fe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006300:	f000 fb13 	bl	800692a <prvIsQueueFull>
 8006304:	4603      	mov	r3, r0
 8006306:	2b00      	cmp	r3, #0
 8006308:	d018      	beq.n	800633c <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800630a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800630c:	3310      	adds	r3, #16
 800630e:	687a      	ldr	r2, [r7, #4]
 8006310:	4611      	mov	r1, r2
 8006312:	4618      	mov	r0, r3
 8006314:	f000 fefe 	bl	8007114 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006318:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800631a:	f000 fa9e 	bl	800685a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800631e:	f000 fd4b 	bl	8006db8 <xTaskResumeAll>
 8006322:	4603      	mov	r3, r0
 8006324:	2b00      	cmp	r3, #0
 8006326:	f47f af7c 	bne.w	8006222 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800632a:	4b0c      	ldr	r3, [pc, #48]	; (800635c <xQueueGenericSend+0x1f0>)
 800632c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006330:	601a      	str	r2, [r3, #0]
 8006332:	f3bf 8f4f 	dsb	sy
 8006336:	f3bf 8f6f 	isb	sy
 800633a:	e772      	b.n	8006222 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800633c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800633e:	f000 fa8c 	bl	800685a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006342:	f000 fd39 	bl	8006db8 <xTaskResumeAll>
 8006346:	e76c      	b.n	8006222 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006348:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800634a:	f000 fa86 	bl	800685a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800634e:	f000 fd33 	bl	8006db8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006352:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006354:	4618      	mov	r0, r3
 8006356:	3738      	adds	r7, #56	; 0x38
 8006358:	46bd      	mov	sp, r7
 800635a:	bd80      	pop	{r7, pc}
 800635c:	e000ed04 	.word	0xe000ed04

08006360 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b08e      	sub	sp, #56	; 0x38
 8006364:	af00      	add	r7, sp, #0
 8006366:	60f8      	str	r0, [r7, #12]
 8006368:	60b9      	str	r1, [r7, #8]
 800636a:	607a      	str	r2, [r7, #4]
 800636c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006374:	2b00      	cmp	r3, #0
 8006376:	d109      	bne.n	800638c <xQueueGenericSendFromISR+0x2c>
 8006378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800637c:	f383 8811 	msr	BASEPRI, r3
 8006380:	f3bf 8f6f 	isb	sy
 8006384:	f3bf 8f4f 	dsb	sy
 8006388:	627b      	str	r3, [r7, #36]	; 0x24
 800638a:	e7fe      	b.n	800638a <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800638c:	68bb      	ldr	r3, [r7, #8]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d103      	bne.n	800639a <xQueueGenericSendFromISR+0x3a>
 8006392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006396:	2b00      	cmp	r3, #0
 8006398:	d101      	bne.n	800639e <xQueueGenericSendFromISR+0x3e>
 800639a:	2301      	movs	r3, #1
 800639c:	e000      	b.n	80063a0 <xQueueGenericSendFromISR+0x40>
 800639e:	2300      	movs	r3, #0
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d109      	bne.n	80063b8 <xQueueGenericSendFromISR+0x58>
 80063a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063a8:	f383 8811 	msr	BASEPRI, r3
 80063ac:	f3bf 8f6f 	isb	sy
 80063b0:	f3bf 8f4f 	dsb	sy
 80063b4:	623b      	str	r3, [r7, #32]
 80063b6:	e7fe      	b.n	80063b6 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	2b02      	cmp	r3, #2
 80063bc:	d103      	bne.n	80063c6 <xQueueGenericSendFromISR+0x66>
 80063be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063c2:	2b01      	cmp	r3, #1
 80063c4:	d101      	bne.n	80063ca <xQueueGenericSendFromISR+0x6a>
 80063c6:	2301      	movs	r3, #1
 80063c8:	e000      	b.n	80063cc <xQueueGenericSendFromISR+0x6c>
 80063ca:	2300      	movs	r3, #0
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d109      	bne.n	80063e4 <xQueueGenericSendFromISR+0x84>
 80063d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063d4:	f383 8811 	msr	BASEPRI, r3
 80063d8:	f3bf 8f6f 	isb	sy
 80063dc:	f3bf 8f4f 	dsb	sy
 80063e0:	61fb      	str	r3, [r7, #28]
 80063e2:	e7fe      	b.n	80063e2 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80063e4:	f001 fb7e 	bl	8007ae4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80063e8:	f3ef 8211 	mrs	r2, BASEPRI
 80063ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063f0:	f383 8811 	msr	BASEPRI, r3
 80063f4:	f3bf 8f6f 	isb	sy
 80063f8:	f3bf 8f4f 	dsb	sy
 80063fc:	61ba      	str	r2, [r7, #24]
 80063fe:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006400:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006402:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006406:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800640a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800640c:	429a      	cmp	r2, r3
 800640e:	d302      	bcc.n	8006416 <xQueueGenericSendFromISR+0xb6>
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	2b02      	cmp	r3, #2
 8006414:	d12c      	bne.n	8006470 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006418:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800641c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006420:	683a      	ldr	r2, [r7, #0]
 8006422:	68b9      	ldr	r1, [r7, #8]
 8006424:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006426:	f000 f988 	bl	800673a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800642a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800642e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006432:	d112      	bne.n	800645a <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006438:	2b00      	cmp	r3, #0
 800643a:	d016      	beq.n	800646a <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800643c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800643e:	3324      	adds	r3, #36	; 0x24
 8006440:	4618      	mov	r0, r3
 8006442:	f000 fe8b 	bl	800715c <xTaskRemoveFromEventList>
 8006446:	4603      	mov	r3, r0
 8006448:	2b00      	cmp	r3, #0
 800644a:	d00e      	beq.n	800646a <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d00b      	beq.n	800646a <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2201      	movs	r2, #1
 8006456:	601a      	str	r2, [r3, #0]
 8006458:	e007      	b.n	800646a <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800645a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800645e:	3301      	adds	r3, #1
 8006460:	b2db      	uxtb	r3, r3
 8006462:	b25a      	sxtb	r2, r3
 8006464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006466:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800646a:	2301      	movs	r3, #1
 800646c:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800646e:	e001      	b.n	8006474 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006470:	2300      	movs	r3, #0
 8006472:	637b      	str	r3, [r7, #52]	; 0x34
 8006474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006476:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006478:	693b      	ldr	r3, [r7, #16]
 800647a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800647e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006480:	4618      	mov	r0, r3
 8006482:	3738      	adds	r7, #56	; 0x38
 8006484:	46bd      	mov	sp, r7
 8006486:	bd80      	pop	{r7, pc}

08006488 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b08c      	sub	sp, #48	; 0x30
 800648c:	af00      	add	r7, sp, #0
 800648e:	60f8      	str	r0, [r7, #12]
 8006490:	60b9      	str	r1, [r7, #8]
 8006492:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006494:	2300      	movs	r3, #0
 8006496:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800649c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d109      	bne.n	80064b6 <xQueueReceive+0x2e>
	__asm volatile
 80064a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064a6:	f383 8811 	msr	BASEPRI, r3
 80064aa:	f3bf 8f6f 	isb	sy
 80064ae:	f3bf 8f4f 	dsb	sy
 80064b2:	623b      	str	r3, [r7, #32]
 80064b4:	e7fe      	b.n	80064b4 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d103      	bne.n	80064c4 <xQueueReceive+0x3c>
 80064bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d101      	bne.n	80064c8 <xQueueReceive+0x40>
 80064c4:	2301      	movs	r3, #1
 80064c6:	e000      	b.n	80064ca <xQueueReceive+0x42>
 80064c8:	2300      	movs	r3, #0
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d109      	bne.n	80064e2 <xQueueReceive+0x5a>
 80064ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064d2:	f383 8811 	msr	BASEPRI, r3
 80064d6:	f3bf 8f6f 	isb	sy
 80064da:	f3bf 8f4f 	dsb	sy
 80064de:	61fb      	str	r3, [r7, #28]
 80064e0:	e7fe      	b.n	80064e0 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80064e2:	f000 fff1 	bl	80074c8 <xTaskGetSchedulerState>
 80064e6:	4603      	mov	r3, r0
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d102      	bne.n	80064f2 <xQueueReceive+0x6a>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d101      	bne.n	80064f6 <xQueueReceive+0x6e>
 80064f2:	2301      	movs	r3, #1
 80064f4:	e000      	b.n	80064f8 <xQueueReceive+0x70>
 80064f6:	2300      	movs	r3, #0
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d109      	bne.n	8006510 <xQueueReceive+0x88>
 80064fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006500:	f383 8811 	msr	BASEPRI, r3
 8006504:	f3bf 8f6f 	isb	sy
 8006508:	f3bf 8f4f 	dsb	sy
 800650c:	61bb      	str	r3, [r7, #24]
 800650e:	e7fe      	b.n	800650e <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006510:	f001 fa0c 	bl	800792c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006518:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800651a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800651c:	2b00      	cmp	r3, #0
 800651e:	d01f      	beq.n	8006560 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006520:	68b9      	ldr	r1, [r7, #8]
 8006522:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006524:	f000 f973 	bl	800680e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800652a:	1e5a      	subs	r2, r3, #1
 800652c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800652e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006532:	691b      	ldr	r3, [r3, #16]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d00f      	beq.n	8006558 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800653a:	3310      	adds	r3, #16
 800653c:	4618      	mov	r0, r3
 800653e:	f000 fe0d 	bl	800715c <xTaskRemoveFromEventList>
 8006542:	4603      	mov	r3, r0
 8006544:	2b00      	cmp	r3, #0
 8006546:	d007      	beq.n	8006558 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006548:	4b3c      	ldr	r3, [pc, #240]	; (800663c <xQueueReceive+0x1b4>)
 800654a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800654e:	601a      	str	r2, [r3, #0]
 8006550:	f3bf 8f4f 	dsb	sy
 8006554:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006558:	f001 fa16 	bl	8007988 <vPortExitCritical>
				return pdPASS;
 800655c:	2301      	movs	r3, #1
 800655e:	e069      	b.n	8006634 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d103      	bne.n	800656e <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006566:	f001 fa0f 	bl	8007988 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800656a:	2300      	movs	r3, #0
 800656c:	e062      	b.n	8006634 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800656e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006570:	2b00      	cmp	r3, #0
 8006572:	d106      	bne.n	8006582 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006574:	f107 0310 	add.w	r3, r7, #16
 8006578:	4618      	mov	r0, r3
 800657a:	f000 fe51 	bl	8007220 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800657e:	2301      	movs	r3, #1
 8006580:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006582:	f001 fa01 	bl	8007988 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006586:	f000 fc09 	bl	8006d9c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800658a:	f001 f9cf 	bl	800792c <vPortEnterCritical>
 800658e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006590:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006594:	b25b      	sxtb	r3, r3
 8006596:	f1b3 3fff 	cmp.w	r3, #4294967295
 800659a:	d103      	bne.n	80065a4 <xQueueReceive+0x11c>
 800659c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800659e:	2200      	movs	r2, #0
 80065a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80065a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80065aa:	b25b      	sxtb	r3, r3
 80065ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065b0:	d103      	bne.n	80065ba <xQueueReceive+0x132>
 80065b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065b4:	2200      	movs	r2, #0
 80065b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80065ba:	f001 f9e5 	bl	8007988 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80065be:	1d3a      	adds	r2, r7, #4
 80065c0:	f107 0310 	add.w	r3, r7, #16
 80065c4:	4611      	mov	r1, r2
 80065c6:	4618      	mov	r0, r3
 80065c8:	f000 fe40 	bl	800724c <xTaskCheckForTimeOut>
 80065cc:	4603      	mov	r3, r0
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d123      	bne.n	800661a <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80065d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80065d4:	f000 f993 	bl	80068fe <prvIsQueueEmpty>
 80065d8:	4603      	mov	r3, r0
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d017      	beq.n	800660e <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80065de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065e0:	3324      	adds	r3, #36	; 0x24
 80065e2:	687a      	ldr	r2, [r7, #4]
 80065e4:	4611      	mov	r1, r2
 80065e6:	4618      	mov	r0, r3
 80065e8:	f000 fd94 	bl	8007114 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80065ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80065ee:	f000 f934 	bl	800685a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80065f2:	f000 fbe1 	bl	8006db8 <xTaskResumeAll>
 80065f6:	4603      	mov	r3, r0
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d189      	bne.n	8006510 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 80065fc:	4b0f      	ldr	r3, [pc, #60]	; (800663c <xQueueReceive+0x1b4>)
 80065fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006602:	601a      	str	r2, [r3, #0]
 8006604:	f3bf 8f4f 	dsb	sy
 8006608:	f3bf 8f6f 	isb	sy
 800660c:	e780      	b.n	8006510 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800660e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006610:	f000 f923 	bl	800685a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006614:	f000 fbd0 	bl	8006db8 <xTaskResumeAll>
 8006618:	e77a      	b.n	8006510 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800661a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800661c:	f000 f91d 	bl	800685a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006620:	f000 fbca 	bl	8006db8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006624:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006626:	f000 f96a 	bl	80068fe <prvIsQueueEmpty>
 800662a:	4603      	mov	r3, r0
 800662c:	2b00      	cmp	r3, #0
 800662e:	f43f af6f 	beq.w	8006510 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006632:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006634:	4618      	mov	r0, r3
 8006636:	3730      	adds	r7, #48	; 0x30
 8006638:	46bd      	mov	sp, r7
 800663a:	bd80      	pop	{r7, pc}
 800663c:	e000ed04 	.word	0xe000ed04

08006640 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b08e      	sub	sp, #56	; 0x38
 8006644:	af00      	add	r7, sp, #0
 8006646:	60f8      	str	r0, [r7, #12]
 8006648:	60b9      	str	r1, [r7, #8]
 800664a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006652:	2b00      	cmp	r3, #0
 8006654:	d109      	bne.n	800666a <xQueueReceiveFromISR+0x2a>
 8006656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800665a:	f383 8811 	msr	BASEPRI, r3
 800665e:	f3bf 8f6f 	isb	sy
 8006662:	f3bf 8f4f 	dsb	sy
 8006666:	623b      	str	r3, [r7, #32]
 8006668:	e7fe      	b.n	8006668 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800666a:	68bb      	ldr	r3, [r7, #8]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d103      	bne.n	8006678 <xQueueReceiveFromISR+0x38>
 8006670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006674:	2b00      	cmp	r3, #0
 8006676:	d101      	bne.n	800667c <xQueueReceiveFromISR+0x3c>
 8006678:	2301      	movs	r3, #1
 800667a:	e000      	b.n	800667e <xQueueReceiveFromISR+0x3e>
 800667c:	2300      	movs	r3, #0
 800667e:	2b00      	cmp	r3, #0
 8006680:	d109      	bne.n	8006696 <xQueueReceiveFromISR+0x56>
 8006682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006686:	f383 8811 	msr	BASEPRI, r3
 800668a:	f3bf 8f6f 	isb	sy
 800668e:	f3bf 8f4f 	dsb	sy
 8006692:	61fb      	str	r3, [r7, #28]
 8006694:	e7fe      	b.n	8006694 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006696:	f001 fa25 	bl	8007ae4 <vPortValidateInterruptPriority>
	__asm volatile
 800669a:	f3ef 8211 	mrs	r2, BASEPRI
 800669e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066a2:	f383 8811 	msr	BASEPRI, r3
 80066a6:	f3bf 8f6f 	isb	sy
 80066aa:	f3bf 8f4f 	dsb	sy
 80066ae:	61ba      	str	r2, [r7, #24]
 80066b0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80066b2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80066b4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80066b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066ba:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80066bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d02f      	beq.n	8006722 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80066c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80066c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80066cc:	68b9      	ldr	r1, [r7, #8]
 80066ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80066d0:	f000 f89d 	bl	800680e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80066d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066d6:	1e5a      	subs	r2, r3, #1
 80066d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066da:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80066dc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80066e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066e4:	d112      	bne.n	800670c <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80066e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066e8:	691b      	ldr	r3, [r3, #16]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d016      	beq.n	800671c <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80066ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066f0:	3310      	adds	r3, #16
 80066f2:	4618      	mov	r0, r3
 80066f4:	f000 fd32 	bl	800715c <xTaskRemoveFromEventList>
 80066f8:	4603      	mov	r3, r0
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d00e      	beq.n	800671c <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d00b      	beq.n	800671c <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2201      	movs	r2, #1
 8006708:	601a      	str	r2, [r3, #0]
 800670a:	e007      	b.n	800671c <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800670c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006710:	3301      	adds	r3, #1
 8006712:	b2db      	uxtb	r3, r3
 8006714:	b25a      	sxtb	r2, r3
 8006716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006718:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800671c:	2301      	movs	r3, #1
 800671e:	637b      	str	r3, [r7, #52]	; 0x34
 8006720:	e001      	b.n	8006726 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8006722:	2300      	movs	r3, #0
 8006724:	637b      	str	r3, [r7, #52]	; 0x34
 8006726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006728:	613b      	str	r3, [r7, #16]
	__asm volatile
 800672a:	693b      	ldr	r3, [r7, #16]
 800672c:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006730:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006732:	4618      	mov	r0, r3
 8006734:	3738      	adds	r7, #56	; 0x38
 8006736:	46bd      	mov	sp, r7
 8006738:	bd80      	pop	{r7, pc}

0800673a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800673a:	b580      	push	{r7, lr}
 800673c:	b086      	sub	sp, #24
 800673e:	af00      	add	r7, sp, #0
 8006740:	60f8      	str	r0, [r7, #12]
 8006742:	60b9      	str	r1, [r7, #8]
 8006744:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006746:	2300      	movs	r3, #0
 8006748:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800674e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006754:	2b00      	cmp	r3, #0
 8006756:	d10d      	bne.n	8006774 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d14d      	bne.n	80067fc <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	689b      	ldr	r3, [r3, #8]
 8006764:	4618      	mov	r0, r3
 8006766:	f000 fecd 	bl	8007504 <xTaskPriorityDisinherit>
 800676a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	2200      	movs	r2, #0
 8006770:	609a      	str	r2, [r3, #8]
 8006772:	e043      	b.n	80067fc <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d119      	bne.n	80067ae <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	6858      	ldr	r0, [r3, #4]
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006782:	461a      	mov	r2, r3
 8006784:	68b9      	ldr	r1, [r7, #8]
 8006786:	f001 fbeb 	bl	8007f60 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	685a      	ldr	r2, [r3, #4]
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006792:	441a      	add	r2, r3
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	685a      	ldr	r2, [r3, #4]
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	689b      	ldr	r3, [r3, #8]
 80067a0:	429a      	cmp	r2, r3
 80067a2:	d32b      	bcc.n	80067fc <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681a      	ldr	r2, [r3, #0]
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	605a      	str	r2, [r3, #4]
 80067ac:	e026      	b.n	80067fc <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	68d8      	ldr	r0, [r3, #12]
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067b6:	461a      	mov	r2, r3
 80067b8:	68b9      	ldr	r1, [r7, #8]
 80067ba:	f001 fbd1 	bl	8007f60 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	68da      	ldr	r2, [r3, #12]
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067c6:	425b      	negs	r3, r3
 80067c8:	441a      	add	r2, r3
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	68da      	ldr	r2, [r3, #12]
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	429a      	cmp	r2, r3
 80067d8:	d207      	bcs.n	80067ea <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	689a      	ldr	r2, [r3, #8]
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067e2:	425b      	negs	r3, r3
 80067e4:	441a      	add	r2, r3
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2b02      	cmp	r3, #2
 80067ee:	d105      	bne.n	80067fc <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80067f0:	693b      	ldr	r3, [r7, #16]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d002      	beq.n	80067fc <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80067f6:	693b      	ldr	r3, [r7, #16]
 80067f8:	3b01      	subs	r3, #1
 80067fa:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80067fc:	693b      	ldr	r3, [r7, #16]
 80067fe:	1c5a      	adds	r2, r3, #1
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006804:	697b      	ldr	r3, [r7, #20]
}
 8006806:	4618      	mov	r0, r3
 8006808:	3718      	adds	r7, #24
 800680a:	46bd      	mov	sp, r7
 800680c:	bd80      	pop	{r7, pc}

0800680e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800680e:	b580      	push	{r7, lr}
 8006810:	b082      	sub	sp, #8
 8006812:	af00      	add	r7, sp, #0
 8006814:	6078      	str	r0, [r7, #4]
 8006816:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800681c:	2b00      	cmp	r3, #0
 800681e:	d018      	beq.n	8006852 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	68da      	ldr	r2, [r3, #12]
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006828:	441a      	add	r2, r3
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	68da      	ldr	r2, [r3, #12]
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	689b      	ldr	r3, [r3, #8]
 8006836:	429a      	cmp	r2, r3
 8006838:	d303      	bcc.n	8006842 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681a      	ldr	r2, [r3, #0]
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	68d9      	ldr	r1, [r3, #12]
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800684a:	461a      	mov	r2, r3
 800684c:	6838      	ldr	r0, [r7, #0]
 800684e:	f001 fb87 	bl	8007f60 <memcpy>
	}
}
 8006852:	bf00      	nop
 8006854:	3708      	adds	r7, #8
 8006856:	46bd      	mov	sp, r7
 8006858:	bd80      	pop	{r7, pc}

0800685a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800685a:	b580      	push	{r7, lr}
 800685c:	b084      	sub	sp, #16
 800685e:	af00      	add	r7, sp, #0
 8006860:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006862:	f001 f863 	bl	800792c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800686c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800686e:	e011      	b.n	8006894 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006874:	2b00      	cmp	r3, #0
 8006876:	d012      	beq.n	800689e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	3324      	adds	r3, #36	; 0x24
 800687c:	4618      	mov	r0, r3
 800687e:	f000 fc6d 	bl	800715c <xTaskRemoveFromEventList>
 8006882:	4603      	mov	r3, r0
 8006884:	2b00      	cmp	r3, #0
 8006886:	d001      	beq.n	800688c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006888:	f000 fd40 	bl	800730c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800688c:	7bfb      	ldrb	r3, [r7, #15]
 800688e:	3b01      	subs	r3, #1
 8006890:	b2db      	uxtb	r3, r3
 8006892:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006894:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006898:	2b00      	cmp	r3, #0
 800689a:	dce9      	bgt.n	8006870 <prvUnlockQueue+0x16>
 800689c:	e000      	b.n	80068a0 <prvUnlockQueue+0x46>
					break;
 800689e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	22ff      	movs	r2, #255	; 0xff
 80068a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80068a8:	f001 f86e 	bl	8007988 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80068ac:	f001 f83e 	bl	800792c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80068b6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80068b8:	e011      	b.n	80068de <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	691b      	ldr	r3, [r3, #16]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d012      	beq.n	80068e8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	3310      	adds	r3, #16
 80068c6:	4618      	mov	r0, r3
 80068c8:	f000 fc48 	bl	800715c <xTaskRemoveFromEventList>
 80068cc:	4603      	mov	r3, r0
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d001      	beq.n	80068d6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80068d2:	f000 fd1b 	bl	800730c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80068d6:	7bbb      	ldrb	r3, [r7, #14]
 80068d8:	3b01      	subs	r3, #1
 80068da:	b2db      	uxtb	r3, r3
 80068dc:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80068de:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	dce9      	bgt.n	80068ba <prvUnlockQueue+0x60>
 80068e6:	e000      	b.n	80068ea <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80068e8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	22ff      	movs	r2, #255	; 0xff
 80068ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80068f2:	f001 f849 	bl	8007988 <vPortExitCritical>
}
 80068f6:	bf00      	nop
 80068f8:	3710      	adds	r7, #16
 80068fa:	46bd      	mov	sp, r7
 80068fc:	bd80      	pop	{r7, pc}

080068fe <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80068fe:	b580      	push	{r7, lr}
 8006900:	b084      	sub	sp, #16
 8006902:	af00      	add	r7, sp, #0
 8006904:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006906:	f001 f811 	bl	800792c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800690e:	2b00      	cmp	r3, #0
 8006910:	d102      	bne.n	8006918 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006912:	2301      	movs	r3, #1
 8006914:	60fb      	str	r3, [r7, #12]
 8006916:	e001      	b.n	800691c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006918:	2300      	movs	r3, #0
 800691a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800691c:	f001 f834 	bl	8007988 <vPortExitCritical>

	return xReturn;
 8006920:	68fb      	ldr	r3, [r7, #12]
}
 8006922:	4618      	mov	r0, r3
 8006924:	3710      	adds	r7, #16
 8006926:	46bd      	mov	sp, r7
 8006928:	bd80      	pop	{r7, pc}

0800692a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800692a:	b580      	push	{r7, lr}
 800692c:	b084      	sub	sp, #16
 800692e:	af00      	add	r7, sp, #0
 8006930:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006932:	f000 fffb 	bl	800792c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800693e:	429a      	cmp	r2, r3
 8006940:	d102      	bne.n	8006948 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006942:	2301      	movs	r3, #1
 8006944:	60fb      	str	r3, [r7, #12]
 8006946:	e001      	b.n	800694c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006948:	2300      	movs	r3, #0
 800694a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800694c:	f001 f81c 	bl	8007988 <vPortExitCritical>

	return xReturn;
 8006950:	68fb      	ldr	r3, [r7, #12]
}
 8006952:	4618      	mov	r0, r3
 8006954:	3710      	adds	r7, #16
 8006956:	46bd      	mov	sp, r7
 8006958:	bd80      	pop	{r7, pc}

0800695a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800695a:	b580      	push	{r7, lr}
 800695c:	b08e      	sub	sp, #56	; 0x38
 800695e:	af04      	add	r7, sp, #16
 8006960:	60f8      	str	r0, [r7, #12]
 8006962:	60b9      	str	r1, [r7, #8]
 8006964:	607a      	str	r2, [r7, #4]
 8006966:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006968:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800696a:	2b00      	cmp	r3, #0
 800696c:	d109      	bne.n	8006982 <xTaskCreateStatic+0x28>
	__asm volatile
 800696e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006972:	f383 8811 	msr	BASEPRI, r3
 8006976:	f3bf 8f6f 	isb	sy
 800697a:	f3bf 8f4f 	dsb	sy
 800697e:	623b      	str	r3, [r7, #32]
 8006980:	e7fe      	b.n	8006980 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8006982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006984:	2b00      	cmp	r3, #0
 8006986:	d109      	bne.n	800699c <xTaskCreateStatic+0x42>
 8006988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800698c:	f383 8811 	msr	BASEPRI, r3
 8006990:	f3bf 8f6f 	isb	sy
 8006994:	f3bf 8f4f 	dsb	sy
 8006998:	61fb      	str	r3, [r7, #28]
 800699a:	e7fe      	b.n	800699a <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800699c:	2354      	movs	r3, #84	; 0x54
 800699e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80069a0:	693b      	ldr	r3, [r7, #16]
 80069a2:	2b54      	cmp	r3, #84	; 0x54
 80069a4:	d009      	beq.n	80069ba <xTaskCreateStatic+0x60>
 80069a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069aa:	f383 8811 	msr	BASEPRI, r3
 80069ae:	f3bf 8f6f 	isb	sy
 80069b2:	f3bf 8f4f 	dsb	sy
 80069b6:	61bb      	str	r3, [r7, #24]
 80069b8:	e7fe      	b.n	80069b8 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80069ba:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80069bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d01e      	beq.n	8006a00 <xTaskCreateStatic+0xa6>
 80069c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d01b      	beq.n	8006a00 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80069c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069ca:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80069cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80069d0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80069d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069d4:	2202      	movs	r2, #2
 80069d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80069da:	2300      	movs	r3, #0
 80069dc:	9303      	str	r3, [sp, #12]
 80069de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e0:	9302      	str	r3, [sp, #8]
 80069e2:	f107 0314 	add.w	r3, r7, #20
 80069e6:	9301      	str	r3, [sp, #4]
 80069e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ea:	9300      	str	r3, [sp, #0]
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	687a      	ldr	r2, [r7, #4]
 80069f0:	68b9      	ldr	r1, [r7, #8]
 80069f2:	68f8      	ldr	r0, [r7, #12]
 80069f4:	f000 f850 	bl	8006a98 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80069f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80069fa:	f000 f8d3 	bl	8006ba4 <prvAddNewTaskToReadyList>
 80069fe:	e001      	b.n	8006a04 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8006a00:	2300      	movs	r3, #0
 8006a02:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006a04:	697b      	ldr	r3, [r7, #20]
	}
 8006a06:	4618      	mov	r0, r3
 8006a08:	3728      	adds	r7, #40	; 0x28
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	bd80      	pop	{r7, pc}

08006a0e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006a0e:	b580      	push	{r7, lr}
 8006a10:	b08c      	sub	sp, #48	; 0x30
 8006a12:	af04      	add	r7, sp, #16
 8006a14:	60f8      	str	r0, [r7, #12]
 8006a16:	60b9      	str	r1, [r7, #8]
 8006a18:	603b      	str	r3, [r7, #0]
 8006a1a:	4613      	mov	r3, r2
 8006a1c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006a1e:	88fb      	ldrh	r3, [r7, #6]
 8006a20:	009b      	lsls	r3, r3, #2
 8006a22:	4618      	mov	r0, r3
 8006a24:	f001 f89c 	bl	8007b60 <pvPortMalloc>
 8006a28:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006a2a:	697b      	ldr	r3, [r7, #20]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d00e      	beq.n	8006a4e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006a30:	2054      	movs	r0, #84	; 0x54
 8006a32:	f001 f895 	bl	8007b60 <pvPortMalloc>
 8006a36:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006a38:	69fb      	ldr	r3, [r7, #28]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d003      	beq.n	8006a46 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006a3e:	69fb      	ldr	r3, [r7, #28]
 8006a40:	697a      	ldr	r2, [r7, #20]
 8006a42:	631a      	str	r2, [r3, #48]	; 0x30
 8006a44:	e005      	b.n	8006a52 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006a46:	6978      	ldr	r0, [r7, #20]
 8006a48:	f001 f94c 	bl	8007ce4 <vPortFree>
 8006a4c:	e001      	b.n	8006a52 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006a4e:	2300      	movs	r3, #0
 8006a50:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006a52:	69fb      	ldr	r3, [r7, #28]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d017      	beq.n	8006a88 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006a58:	69fb      	ldr	r3, [r7, #28]
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006a60:	88fa      	ldrh	r2, [r7, #6]
 8006a62:	2300      	movs	r3, #0
 8006a64:	9303      	str	r3, [sp, #12]
 8006a66:	69fb      	ldr	r3, [r7, #28]
 8006a68:	9302      	str	r3, [sp, #8]
 8006a6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a6c:	9301      	str	r3, [sp, #4]
 8006a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a70:	9300      	str	r3, [sp, #0]
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	68b9      	ldr	r1, [r7, #8]
 8006a76:	68f8      	ldr	r0, [r7, #12]
 8006a78:	f000 f80e 	bl	8006a98 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006a7c:	69f8      	ldr	r0, [r7, #28]
 8006a7e:	f000 f891 	bl	8006ba4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006a82:	2301      	movs	r3, #1
 8006a84:	61bb      	str	r3, [r7, #24]
 8006a86:	e002      	b.n	8006a8e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006a88:	f04f 33ff 	mov.w	r3, #4294967295
 8006a8c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006a8e:	69bb      	ldr	r3, [r7, #24]
	}
 8006a90:	4618      	mov	r0, r3
 8006a92:	3720      	adds	r7, #32
 8006a94:	46bd      	mov	sp, r7
 8006a96:	bd80      	pop	{r7, pc}

08006a98 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b088      	sub	sp, #32
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	60f8      	str	r0, [r7, #12]
 8006aa0:	60b9      	str	r1, [r7, #8]
 8006aa2:	607a      	str	r2, [r7, #4]
 8006aa4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aa8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006ab0:	3b01      	subs	r3, #1
 8006ab2:	009b      	lsls	r3, r3, #2
 8006ab4:	4413      	add	r3, r2
 8006ab6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006ab8:	69bb      	ldr	r3, [r7, #24]
 8006aba:	f023 0307 	bic.w	r3, r3, #7
 8006abe:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006ac0:	69bb      	ldr	r3, [r7, #24]
 8006ac2:	f003 0307 	and.w	r3, r3, #7
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d009      	beq.n	8006ade <prvInitialiseNewTask+0x46>
 8006aca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ace:	f383 8811 	msr	BASEPRI, r3
 8006ad2:	f3bf 8f6f 	isb	sy
 8006ad6:	f3bf 8f4f 	dsb	sy
 8006ada:	617b      	str	r3, [r7, #20]
 8006adc:	e7fe      	b.n	8006adc <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006ade:	68bb      	ldr	r3, [r7, #8]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d01f      	beq.n	8006b24 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	61fb      	str	r3, [r7, #28]
 8006ae8:	e012      	b.n	8006b10 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006aea:	68ba      	ldr	r2, [r7, #8]
 8006aec:	69fb      	ldr	r3, [r7, #28]
 8006aee:	4413      	add	r3, r2
 8006af0:	7819      	ldrb	r1, [r3, #0]
 8006af2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006af4:	69fb      	ldr	r3, [r7, #28]
 8006af6:	4413      	add	r3, r2
 8006af8:	3334      	adds	r3, #52	; 0x34
 8006afa:	460a      	mov	r2, r1
 8006afc:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006afe:	68ba      	ldr	r2, [r7, #8]
 8006b00:	69fb      	ldr	r3, [r7, #28]
 8006b02:	4413      	add	r3, r2
 8006b04:	781b      	ldrb	r3, [r3, #0]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d006      	beq.n	8006b18 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006b0a:	69fb      	ldr	r3, [r7, #28]
 8006b0c:	3301      	adds	r3, #1
 8006b0e:	61fb      	str	r3, [r7, #28]
 8006b10:	69fb      	ldr	r3, [r7, #28]
 8006b12:	2b0f      	cmp	r3, #15
 8006b14:	d9e9      	bls.n	8006aea <prvInitialiseNewTask+0x52>
 8006b16:	e000      	b.n	8006b1a <prvInitialiseNewTask+0x82>
			{
				break;
 8006b18:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006b22:	e003      	b.n	8006b2c <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b26:	2200      	movs	r2, #0
 8006b28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b2e:	2b06      	cmp	r3, #6
 8006b30:	d901      	bls.n	8006b36 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006b32:	2306      	movs	r3, #6
 8006b34:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b3a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b40:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b44:	2200      	movs	r2, #0
 8006b46:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006b48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b4a:	3304      	adds	r3, #4
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	f7ff f93f 	bl	8005dd0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b54:	3318      	adds	r3, #24
 8006b56:	4618      	mov	r0, r3
 8006b58:	f7ff f93a 	bl	8005dd0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b60:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b64:	f1c3 0207 	rsb	r2, r3, #7
 8006b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b6a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b70:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b74:	2200      	movs	r2, #0
 8006b76:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006b80:	683a      	ldr	r2, [r7, #0]
 8006b82:	68f9      	ldr	r1, [r7, #12]
 8006b84:	69b8      	ldr	r0, [r7, #24]
 8006b86:	f000 fda7 	bl	80076d8 <pxPortInitialiseStack>
 8006b8a:	4602      	mov	r2, r0
 8006b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b8e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006b90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d002      	beq.n	8006b9c <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b9a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006b9c:	bf00      	nop
 8006b9e:	3720      	adds	r7, #32
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	bd80      	pop	{r7, pc}

08006ba4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b082      	sub	sp, #8
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006bac:	f000 febe 	bl	800792c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006bb0:	4b2a      	ldr	r3, [pc, #168]	; (8006c5c <prvAddNewTaskToReadyList+0xb8>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	3301      	adds	r3, #1
 8006bb6:	4a29      	ldr	r2, [pc, #164]	; (8006c5c <prvAddNewTaskToReadyList+0xb8>)
 8006bb8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006bba:	4b29      	ldr	r3, [pc, #164]	; (8006c60 <prvAddNewTaskToReadyList+0xbc>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d109      	bne.n	8006bd6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006bc2:	4a27      	ldr	r2, [pc, #156]	; (8006c60 <prvAddNewTaskToReadyList+0xbc>)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006bc8:	4b24      	ldr	r3, [pc, #144]	; (8006c5c <prvAddNewTaskToReadyList+0xb8>)
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	2b01      	cmp	r3, #1
 8006bce:	d110      	bne.n	8006bf2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006bd0:	f000 fbc0 	bl	8007354 <prvInitialiseTaskLists>
 8006bd4:	e00d      	b.n	8006bf2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006bd6:	4b23      	ldr	r3, [pc, #140]	; (8006c64 <prvAddNewTaskToReadyList+0xc0>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d109      	bne.n	8006bf2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006bde:	4b20      	ldr	r3, [pc, #128]	; (8006c60 <prvAddNewTaskToReadyList+0xbc>)
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006be8:	429a      	cmp	r2, r3
 8006bea:	d802      	bhi.n	8006bf2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006bec:	4a1c      	ldr	r2, [pc, #112]	; (8006c60 <prvAddNewTaskToReadyList+0xbc>)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006bf2:	4b1d      	ldr	r3, [pc, #116]	; (8006c68 <prvAddNewTaskToReadyList+0xc4>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	3301      	adds	r3, #1
 8006bf8:	4a1b      	ldr	r2, [pc, #108]	; (8006c68 <prvAddNewTaskToReadyList+0xc4>)
 8006bfa:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c00:	2201      	movs	r2, #1
 8006c02:	409a      	lsls	r2, r3
 8006c04:	4b19      	ldr	r3, [pc, #100]	; (8006c6c <prvAddNewTaskToReadyList+0xc8>)
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	4313      	orrs	r3, r2
 8006c0a:	4a18      	ldr	r2, [pc, #96]	; (8006c6c <prvAddNewTaskToReadyList+0xc8>)
 8006c0c:	6013      	str	r3, [r2, #0]
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c12:	4613      	mov	r3, r2
 8006c14:	009b      	lsls	r3, r3, #2
 8006c16:	4413      	add	r3, r2
 8006c18:	009b      	lsls	r3, r3, #2
 8006c1a:	4a15      	ldr	r2, [pc, #84]	; (8006c70 <prvAddNewTaskToReadyList+0xcc>)
 8006c1c:	441a      	add	r2, r3
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	3304      	adds	r3, #4
 8006c22:	4619      	mov	r1, r3
 8006c24:	4610      	mov	r0, r2
 8006c26:	f7ff f8e0 	bl	8005dea <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006c2a:	f000 fead 	bl	8007988 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006c2e:	4b0d      	ldr	r3, [pc, #52]	; (8006c64 <prvAddNewTaskToReadyList+0xc0>)
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d00e      	beq.n	8006c54 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006c36:	4b0a      	ldr	r3, [pc, #40]	; (8006c60 <prvAddNewTaskToReadyList+0xbc>)
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c40:	429a      	cmp	r2, r3
 8006c42:	d207      	bcs.n	8006c54 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006c44:	4b0b      	ldr	r3, [pc, #44]	; (8006c74 <prvAddNewTaskToReadyList+0xd0>)
 8006c46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c4a:	601a      	str	r2, [r3, #0]
 8006c4c:	f3bf 8f4f 	dsb	sy
 8006c50:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006c54:	bf00      	nop
 8006c56:	3708      	adds	r7, #8
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	bd80      	pop	{r7, pc}
 8006c5c:	200003f0 	.word	0x200003f0
 8006c60:	200002f0 	.word	0x200002f0
 8006c64:	200003fc 	.word	0x200003fc
 8006c68:	2000040c 	.word	0x2000040c
 8006c6c:	200003f8 	.word	0x200003f8
 8006c70:	200002f4 	.word	0x200002f4
 8006c74:	e000ed04 	.word	0xe000ed04

08006c78 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b084      	sub	sp, #16
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006c80:	2300      	movs	r3, #0
 8006c82:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d016      	beq.n	8006cb8 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006c8a:	4b13      	ldr	r3, [pc, #76]	; (8006cd8 <vTaskDelay+0x60>)
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d009      	beq.n	8006ca6 <vTaskDelay+0x2e>
 8006c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c96:	f383 8811 	msr	BASEPRI, r3
 8006c9a:	f3bf 8f6f 	isb	sy
 8006c9e:	f3bf 8f4f 	dsb	sy
 8006ca2:	60bb      	str	r3, [r7, #8]
 8006ca4:	e7fe      	b.n	8006ca4 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8006ca6:	f000 f879 	bl	8006d9c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006caa:	2100      	movs	r1, #0
 8006cac:	6878      	ldr	r0, [r7, #4]
 8006cae:	f000 fcad 	bl	800760c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006cb2:	f000 f881 	bl	8006db8 <xTaskResumeAll>
 8006cb6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d107      	bne.n	8006cce <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8006cbe:	4b07      	ldr	r3, [pc, #28]	; (8006cdc <vTaskDelay+0x64>)
 8006cc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cc4:	601a      	str	r2, [r3, #0]
 8006cc6:	f3bf 8f4f 	dsb	sy
 8006cca:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006cce:	bf00      	nop
 8006cd0:	3710      	adds	r7, #16
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	bd80      	pop	{r7, pc}
 8006cd6:	bf00      	nop
 8006cd8:	20000418 	.word	0x20000418
 8006cdc:	e000ed04 	.word	0xe000ed04

08006ce0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b08a      	sub	sp, #40	; 0x28
 8006ce4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006cea:	2300      	movs	r3, #0
 8006cec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006cee:	463a      	mov	r2, r7
 8006cf0:	1d39      	adds	r1, r7, #4
 8006cf2:	f107 0308 	add.w	r3, r7, #8
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	f7fa f97c 	bl	8000ff4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006cfc:	6839      	ldr	r1, [r7, #0]
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	68ba      	ldr	r2, [r7, #8]
 8006d02:	9202      	str	r2, [sp, #8]
 8006d04:	9301      	str	r3, [sp, #4]
 8006d06:	2300      	movs	r3, #0
 8006d08:	9300      	str	r3, [sp, #0]
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	460a      	mov	r2, r1
 8006d0e:	491d      	ldr	r1, [pc, #116]	; (8006d84 <vTaskStartScheduler+0xa4>)
 8006d10:	481d      	ldr	r0, [pc, #116]	; (8006d88 <vTaskStartScheduler+0xa8>)
 8006d12:	f7ff fe22 	bl	800695a <xTaskCreateStatic>
 8006d16:	4602      	mov	r2, r0
 8006d18:	4b1c      	ldr	r3, [pc, #112]	; (8006d8c <vTaskStartScheduler+0xac>)
 8006d1a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006d1c:	4b1b      	ldr	r3, [pc, #108]	; (8006d8c <vTaskStartScheduler+0xac>)
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d002      	beq.n	8006d2a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006d24:	2301      	movs	r3, #1
 8006d26:	617b      	str	r3, [r7, #20]
 8006d28:	e001      	b.n	8006d2e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006d2e:	697b      	ldr	r3, [r7, #20]
 8006d30:	2b01      	cmp	r3, #1
 8006d32:	d115      	bne.n	8006d60 <vTaskStartScheduler+0x80>
 8006d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d38:	f383 8811 	msr	BASEPRI, r3
 8006d3c:	f3bf 8f6f 	isb	sy
 8006d40:	f3bf 8f4f 	dsb	sy
 8006d44:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006d46:	4b12      	ldr	r3, [pc, #72]	; (8006d90 <vTaskStartScheduler+0xb0>)
 8006d48:	f04f 32ff 	mov.w	r2, #4294967295
 8006d4c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006d4e:	4b11      	ldr	r3, [pc, #68]	; (8006d94 <vTaskStartScheduler+0xb4>)
 8006d50:	2201      	movs	r2, #1
 8006d52:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006d54:	4b10      	ldr	r3, [pc, #64]	; (8006d98 <vTaskStartScheduler+0xb8>)
 8006d56:	2200      	movs	r2, #0
 8006d58:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006d5a:	f000 fd49 	bl	80077f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006d5e:	e00d      	b.n	8006d7c <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006d60:	697b      	ldr	r3, [r7, #20]
 8006d62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d66:	d109      	bne.n	8006d7c <vTaskStartScheduler+0x9c>
 8006d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d6c:	f383 8811 	msr	BASEPRI, r3
 8006d70:	f3bf 8f6f 	isb	sy
 8006d74:	f3bf 8f4f 	dsb	sy
 8006d78:	60fb      	str	r3, [r7, #12]
 8006d7a:	e7fe      	b.n	8006d7a <vTaskStartScheduler+0x9a>
}
 8006d7c:	bf00      	nop
 8006d7e:	3718      	adds	r7, #24
 8006d80:	46bd      	mov	sp, r7
 8006d82:	bd80      	pop	{r7, pc}
 8006d84:	08009108 	.word	0x08009108
 8006d88:	08007325 	.word	0x08007325
 8006d8c:	20000414 	.word	0x20000414
 8006d90:	20000410 	.word	0x20000410
 8006d94:	200003fc 	.word	0x200003fc
 8006d98:	200003f4 	.word	0x200003f4

08006d9c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006da0:	4b04      	ldr	r3, [pc, #16]	; (8006db4 <vTaskSuspendAll+0x18>)
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	3301      	adds	r3, #1
 8006da6:	4a03      	ldr	r2, [pc, #12]	; (8006db4 <vTaskSuspendAll+0x18>)
 8006da8:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8006daa:	bf00      	nop
 8006dac:	46bd      	mov	sp, r7
 8006dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db2:	4770      	bx	lr
 8006db4:	20000418 	.word	0x20000418

08006db8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b084      	sub	sp, #16
 8006dbc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006dc6:	4b41      	ldr	r3, [pc, #260]	; (8006ecc <xTaskResumeAll+0x114>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d109      	bne.n	8006de2 <xTaskResumeAll+0x2a>
 8006dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dd2:	f383 8811 	msr	BASEPRI, r3
 8006dd6:	f3bf 8f6f 	isb	sy
 8006dda:	f3bf 8f4f 	dsb	sy
 8006dde:	603b      	str	r3, [r7, #0]
 8006de0:	e7fe      	b.n	8006de0 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006de2:	f000 fda3 	bl	800792c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006de6:	4b39      	ldr	r3, [pc, #228]	; (8006ecc <xTaskResumeAll+0x114>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	3b01      	subs	r3, #1
 8006dec:	4a37      	ldr	r2, [pc, #220]	; (8006ecc <xTaskResumeAll+0x114>)
 8006dee:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006df0:	4b36      	ldr	r3, [pc, #216]	; (8006ecc <xTaskResumeAll+0x114>)
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d161      	bne.n	8006ebc <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006df8:	4b35      	ldr	r3, [pc, #212]	; (8006ed0 <xTaskResumeAll+0x118>)
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d05d      	beq.n	8006ebc <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006e00:	e02e      	b.n	8006e60 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e02:	4b34      	ldr	r3, [pc, #208]	; (8006ed4 <xTaskResumeAll+0x11c>)
 8006e04:	68db      	ldr	r3, [r3, #12]
 8006e06:	68db      	ldr	r3, [r3, #12]
 8006e08:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	3318      	adds	r3, #24
 8006e0e:	4618      	mov	r0, r3
 8006e10:	f7ff f848 	bl	8005ea4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	3304      	adds	r3, #4
 8006e18:	4618      	mov	r0, r3
 8006e1a:	f7ff f843 	bl	8005ea4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e22:	2201      	movs	r2, #1
 8006e24:	409a      	lsls	r2, r3
 8006e26:	4b2c      	ldr	r3, [pc, #176]	; (8006ed8 <xTaskResumeAll+0x120>)
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	4313      	orrs	r3, r2
 8006e2c:	4a2a      	ldr	r2, [pc, #168]	; (8006ed8 <xTaskResumeAll+0x120>)
 8006e2e:	6013      	str	r3, [r2, #0]
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e34:	4613      	mov	r3, r2
 8006e36:	009b      	lsls	r3, r3, #2
 8006e38:	4413      	add	r3, r2
 8006e3a:	009b      	lsls	r3, r3, #2
 8006e3c:	4a27      	ldr	r2, [pc, #156]	; (8006edc <xTaskResumeAll+0x124>)
 8006e3e:	441a      	add	r2, r3
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	3304      	adds	r3, #4
 8006e44:	4619      	mov	r1, r3
 8006e46:	4610      	mov	r0, r2
 8006e48:	f7fe ffcf 	bl	8005dea <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e50:	4b23      	ldr	r3, [pc, #140]	; (8006ee0 <xTaskResumeAll+0x128>)
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e56:	429a      	cmp	r2, r3
 8006e58:	d302      	bcc.n	8006e60 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8006e5a:	4b22      	ldr	r3, [pc, #136]	; (8006ee4 <xTaskResumeAll+0x12c>)
 8006e5c:	2201      	movs	r2, #1
 8006e5e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006e60:	4b1c      	ldr	r3, [pc, #112]	; (8006ed4 <xTaskResumeAll+0x11c>)
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d1cc      	bne.n	8006e02 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d001      	beq.n	8006e72 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006e6e:	f000 fb0b 	bl	8007488 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006e72:	4b1d      	ldr	r3, [pc, #116]	; (8006ee8 <xTaskResumeAll+0x130>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d010      	beq.n	8006ea0 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006e7e:	f000 f837 	bl	8006ef0 <xTaskIncrementTick>
 8006e82:	4603      	mov	r3, r0
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d002      	beq.n	8006e8e <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8006e88:	4b16      	ldr	r3, [pc, #88]	; (8006ee4 <xTaskResumeAll+0x12c>)
 8006e8a:	2201      	movs	r2, #1
 8006e8c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	3b01      	subs	r3, #1
 8006e92:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d1f1      	bne.n	8006e7e <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8006e9a:	4b13      	ldr	r3, [pc, #76]	; (8006ee8 <xTaskResumeAll+0x130>)
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006ea0:	4b10      	ldr	r3, [pc, #64]	; (8006ee4 <xTaskResumeAll+0x12c>)
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d009      	beq.n	8006ebc <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006ea8:	2301      	movs	r3, #1
 8006eaa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006eac:	4b0f      	ldr	r3, [pc, #60]	; (8006eec <xTaskResumeAll+0x134>)
 8006eae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006eb2:	601a      	str	r2, [r3, #0]
 8006eb4:	f3bf 8f4f 	dsb	sy
 8006eb8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006ebc:	f000 fd64 	bl	8007988 <vPortExitCritical>

	return xAlreadyYielded;
 8006ec0:	68bb      	ldr	r3, [r7, #8]
}
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	3710      	adds	r7, #16
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	bd80      	pop	{r7, pc}
 8006eca:	bf00      	nop
 8006ecc:	20000418 	.word	0x20000418
 8006ed0:	200003f0 	.word	0x200003f0
 8006ed4:	200003b0 	.word	0x200003b0
 8006ed8:	200003f8 	.word	0x200003f8
 8006edc:	200002f4 	.word	0x200002f4
 8006ee0:	200002f0 	.word	0x200002f0
 8006ee4:	20000404 	.word	0x20000404
 8006ee8:	20000400 	.word	0x20000400
 8006eec:	e000ed04 	.word	0xe000ed04

08006ef0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b086      	sub	sp, #24
 8006ef4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006efa:	4b4e      	ldr	r3, [pc, #312]	; (8007034 <xTaskIncrementTick+0x144>)
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	f040 8087 	bne.w	8007012 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006f04:	4b4c      	ldr	r3, [pc, #304]	; (8007038 <xTaskIncrementTick+0x148>)
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	3301      	adds	r3, #1
 8006f0a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006f0c:	4a4a      	ldr	r2, [pc, #296]	; (8007038 <xTaskIncrementTick+0x148>)
 8006f0e:	693b      	ldr	r3, [r7, #16]
 8006f10:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006f12:	693b      	ldr	r3, [r7, #16]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d11f      	bne.n	8006f58 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8006f18:	4b48      	ldr	r3, [pc, #288]	; (800703c <xTaskIncrementTick+0x14c>)
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d009      	beq.n	8006f36 <xTaskIncrementTick+0x46>
 8006f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f26:	f383 8811 	msr	BASEPRI, r3
 8006f2a:	f3bf 8f6f 	isb	sy
 8006f2e:	f3bf 8f4f 	dsb	sy
 8006f32:	603b      	str	r3, [r7, #0]
 8006f34:	e7fe      	b.n	8006f34 <xTaskIncrementTick+0x44>
 8006f36:	4b41      	ldr	r3, [pc, #260]	; (800703c <xTaskIncrementTick+0x14c>)
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	60fb      	str	r3, [r7, #12]
 8006f3c:	4b40      	ldr	r3, [pc, #256]	; (8007040 <xTaskIncrementTick+0x150>)
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	4a3e      	ldr	r2, [pc, #248]	; (800703c <xTaskIncrementTick+0x14c>)
 8006f42:	6013      	str	r3, [r2, #0]
 8006f44:	4a3e      	ldr	r2, [pc, #248]	; (8007040 <xTaskIncrementTick+0x150>)
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	6013      	str	r3, [r2, #0]
 8006f4a:	4b3e      	ldr	r3, [pc, #248]	; (8007044 <xTaskIncrementTick+0x154>)
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	3301      	adds	r3, #1
 8006f50:	4a3c      	ldr	r2, [pc, #240]	; (8007044 <xTaskIncrementTick+0x154>)
 8006f52:	6013      	str	r3, [r2, #0]
 8006f54:	f000 fa98 	bl	8007488 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006f58:	4b3b      	ldr	r3, [pc, #236]	; (8007048 <xTaskIncrementTick+0x158>)
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	693a      	ldr	r2, [r7, #16]
 8006f5e:	429a      	cmp	r2, r3
 8006f60:	d348      	bcc.n	8006ff4 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006f62:	4b36      	ldr	r3, [pc, #216]	; (800703c <xTaskIncrementTick+0x14c>)
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d104      	bne.n	8006f76 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f6c:	4b36      	ldr	r3, [pc, #216]	; (8007048 <xTaskIncrementTick+0x158>)
 8006f6e:	f04f 32ff 	mov.w	r2, #4294967295
 8006f72:	601a      	str	r2, [r3, #0]
					break;
 8006f74:	e03e      	b.n	8006ff4 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f76:	4b31      	ldr	r3, [pc, #196]	; (800703c <xTaskIncrementTick+0x14c>)
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	68db      	ldr	r3, [r3, #12]
 8006f7c:	68db      	ldr	r3, [r3, #12]
 8006f7e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	685b      	ldr	r3, [r3, #4]
 8006f84:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006f86:	693a      	ldr	r2, [r7, #16]
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	429a      	cmp	r2, r3
 8006f8c:	d203      	bcs.n	8006f96 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006f8e:	4a2e      	ldr	r2, [pc, #184]	; (8007048 <xTaskIncrementTick+0x158>)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006f94:	e02e      	b.n	8006ff4 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006f96:	68bb      	ldr	r3, [r7, #8]
 8006f98:	3304      	adds	r3, #4
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	f7fe ff82 	bl	8005ea4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006fa0:	68bb      	ldr	r3, [r7, #8]
 8006fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d004      	beq.n	8006fb2 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006fa8:	68bb      	ldr	r3, [r7, #8]
 8006faa:	3318      	adds	r3, #24
 8006fac:	4618      	mov	r0, r3
 8006fae:	f7fe ff79 	bl	8005ea4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006fb2:	68bb      	ldr	r3, [r7, #8]
 8006fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fb6:	2201      	movs	r2, #1
 8006fb8:	409a      	lsls	r2, r3
 8006fba:	4b24      	ldr	r3, [pc, #144]	; (800704c <xTaskIncrementTick+0x15c>)
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	4313      	orrs	r3, r2
 8006fc0:	4a22      	ldr	r2, [pc, #136]	; (800704c <xTaskIncrementTick+0x15c>)
 8006fc2:	6013      	str	r3, [r2, #0]
 8006fc4:	68bb      	ldr	r3, [r7, #8]
 8006fc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fc8:	4613      	mov	r3, r2
 8006fca:	009b      	lsls	r3, r3, #2
 8006fcc:	4413      	add	r3, r2
 8006fce:	009b      	lsls	r3, r3, #2
 8006fd0:	4a1f      	ldr	r2, [pc, #124]	; (8007050 <xTaskIncrementTick+0x160>)
 8006fd2:	441a      	add	r2, r3
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	3304      	adds	r3, #4
 8006fd8:	4619      	mov	r1, r3
 8006fda:	4610      	mov	r0, r2
 8006fdc:	f7fe ff05 	bl	8005dea <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006fe0:	68bb      	ldr	r3, [r7, #8]
 8006fe2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fe4:	4b1b      	ldr	r3, [pc, #108]	; (8007054 <xTaskIncrementTick+0x164>)
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fea:	429a      	cmp	r2, r3
 8006fec:	d3b9      	bcc.n	8006f62 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8006fee:	2301      	movs	r3, #1
 8006ff0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006ff2:	e7b6      	b.n	8006f62 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006ff4:	4b17      	ldr	r3, [pc, #92]	; (8007054 <xTaskIncrementTick+0x164>)
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ffa:	4915      	ldr	r1, [pc, #84]	; (8007050 <xTaskIncrementTick+0x160>)
 8006ffc:	4613      	mov	r3, r2
 8006ffe:	009b      	lsls	r3, r3, #2
 8007000:	4413      	add	r3, r2
 8007002:	009b      	lsls	r3, r3, #2
 8007004:	440b      	add	r3, r1
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	2b01      	cmp	r3, #1
 800700a:	d907      	bls.n	800701c <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 800700c:	2301      	movs	r3, #1
 800700e:	617b      	str	r3, [r7, #20]
 8007010:	e004      	b.n	800701c <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007012:	4b11      	ldr	r3, [pc, #68]	; (8007058 <xTaskIncrementTick+0x168>)
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	3301      	adds	r3, #1
 8007018:	4a0f      	ldr	r2, [pc, #60]	; (8007058 <xTaskIncrementTick+0x168>)
 800701a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800701c:	4b0f      	ldr	r3, [pc, #60]	; (800705c <xTaskIncrementTick+0x16c>)
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d001      	beq.n	8007028 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8007024:	2301      	movs	r3, #1
 8007026:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007028:	697b      	ldr	r3, [r7, #20]
}
 800702a:	4618      	mov	r0, r3
 800702c:	3718      	adds	r7, #24
 800702e:	46bd      	mov	sp, r7
 8007030:	bd80      	pop	{r7, pc}
 8007032:	bf00      	nop
 8007034:	20000418 	.word	0x20000418
 8007038:	200003f4 	.word	0x200003f4
 800703c:	200003a8 	.word	0x200003a8
 8007040:	200003ac 	.word	0x200003ac
 8007044:	20000408 	.word	0x20000408
 8007048:	20000410 	.word	0x20000410
 800704c:	200003f8 	.word	0x200003f8
 8007050:	200002f4 	.word	0x200002f4
 8007054:	200002f0 	.word	0x200002f0
 8007058:	20000400 	.word	0x20000400
 800705c:	20000404 	.word	0x20000404

08007060 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007060:	b480      	push	{r7}
 8007062:	b087      	sub	sp, #28
 8007064:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007066:	4b26      	ldr	r3, [pc, #152]	; (8007100 <vTaskSwitchContext+0xa0>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d003      	beq.n	8007076 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800706e:	4b25      	ldr	r3, [pc, #148]	; (8007104 <vTaskSwitchContext+0xa4>)
 8007070:	2201      	movs	r2, #1
 8007072:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007074:	e03e      	b.n	80070f4 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8007076:	4b23      	ldr	r3, [pc, #140]	; (8007104 <vTaskSwitchContext+0xa4>)
 8007078:	2200      	movs	r2, #0
 800707a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800707c:	4b22      	ldr	r3, [pc, #136]	; (8007108 <vTaskSwitchContext+0xa8>)
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	fab3 f383 	clz	r3, r3
 8007088:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800708a:	7afb      	ldrb	r3, [r7, #11]
 800708c:	f1c3 031f 	rsb	r3, r3, #31
 8007090:	617b      	str	r3, [r7, #20]
 8007092:	491e      	ldr	r1, [pc, #120]	; (800710c <vTaskSwitchContext+0xac>)
 8007094:	697a      	ldr	r2, [r7, #20]
 8007096:	4613      	mov	r3, r2
 8007098:	009b      	lsls	r3, r3, #2
 800709a:	4413      	add	r3, r2
 800709c:	009b      	lsls	r3, r3, #2
 800709e:	440b      	add	r3, r1
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d109      	bne.n	80070ba <vTaskSwitchContext+0x5a>
	__asm volatile
 80070a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070aa:	f383 8811 	msr	BASEPRI, r3
 80070ae:	f3bf 8f6f 	isb	sy
 80070b2:	f3bf 8f4f 	dsb	sy
 80070b6:	607b      	str	r3, [r7, #4]
 80070b8:	e7fe      	b.n	80070b8 <vTaskSwitchContext+0x58>
 80070ba:	697a      	ldr	r2, [r7, #20]
 80070bc:	4613      	mov	r3, r2
 80070be:	009b      	lsls	r3, r3, #2
 80070c0:	4413      	add	r3, r2
 80070c2:	009b      	lsls	r3, r3, #2
 80070c4:	4a11      	ldr	r2, [pc, #68]	; (800710c <vTaskSwitchContext+0xac>)
 80070c6:	4413      	add	r3, r2
 80070c8:	613b      	str	r3, [r7, #16]
 80070ca:	693b      	ldr	r3, [r7, #16]
 80070cc:	685b      	ldr	r3, [r3, #4]
 80070ce:	685a      	ldr	r2, [r3, #4]
 80070d0:	693b      	ldr	r3, [r7, #16]
 80070d2:	605a      	str	r2, [r3, #4]
 80070d4:	693b      	ldr	r3, [r7, #16]
 80070d6:	685a      	ldr	r2, [r3, #4]
 80070d8:	693b      	ldr	r3, [r7, #16]
 80070da:	3308      	adds	r3, #8
 80070dc:	429a      	cmp	r2, r3
 80070de:	d104      	bne.n	80070ea <vTaskSwitchContext+0x8a>
 80070e0:	693b      	ldr	r3, [r7, #16]
 80070e2:	685b      	ldr	r3, [r3, #4]
 80070e4:	685a      	ldr	r2, [r3, #4]
 80070e6:	693b      	ldr	r3, [r7, #16]
 80070e8:	605a      	str	r2, [r3, #4]
 80070ea:	693b      	ldr	r3, [r7, #16]
 80070ec:	685b      	ldr	r3, [r3, #4]
 80070ee:	68db      	ldr	r3, [r3, #12]
 80070f0:	4a07      	ldr	r2, [pc, #28]	; (8007110 <vTaskSwitchContext+0xb0>)
 80070f2:	6013      	str	r3, [r2, #0]
}
 80070f4:	bf00      	nop
 80070f6:	371c      	adds	r7, #28
 80070f8:	46bd      	mov	sp, r7
 80070fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fe:	4770      	bx	lr
 8007100:	20000418 	.word	0x20000418
 8007104:	20000404 	.word	0x20000404
 8007108:	200003f8 	.word	0x200003f8
 800710c:	200002f4 	.word	0x200002f4
 8007110:	200002f0 	.word	0x200002f0

08007114 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b084      	sub	sp, #16
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
 800711c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d109      	bne.n	8007138 <vTaskPlaceOnEventList+0x24>
 8007124:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007128:	f383 8811 	msr	BASEPRI, r3
 800712c:	f3bf 8f6f 	isb	sy
 8007130:	f3bf 8f4f 	dsb	sy
 8007134:	60fb      	str	r3, [r7, #12]
 8007136:	e7fe      	b.n	8007136 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007138:	4b07      	ldr	r3, [pc, #28]	; (8007158 <vTaskPlaceOnEventList+0x44>)
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	3318      	adds	r3, #24
 800713e:	4619      	mov	r1, r3
 8007140:	6878      	ldr	r0, [r7, #4]
 8007142:	f7fe fe76 	bl	8005e32 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007146:	2101      	movs	r1, #1
 8007148:	6838      	ldr	r0, [r7, #0]
 800714a:	f000 fa5f 	bl	800760c <prvAddCurrentTaskToDelayedList>
}
 800714e:	bf00      	nop
 8007150:	3710      	adds	r7, #16
 8007152:	46bd      	mov	sp, r7
 8007154:	bd80      	pop	{r7, pc}
 8007156:	bf00      	nop
 8007158:	200002f0 	.word	0x200002f0

0800715c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b086      	sub	sp, #24
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	68db      	ldr	r3, [r3, #12]
 8007168:	68db      	ldr	r3, [r3, #12]
 800716a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800716c:	693b      	ldr	r3, [r7, #16]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d109      	bne.n	8007186 <xTaskRemoveFromEventList+0x2a>
 8007172:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007176:	f383 8811 	msr	BASEPRI, r3
 800717a:	f3bf 8f6f 	isb	sy
 800717e:	f3bf 8f4f 	dsb	sy
 8007182:	60fb      	str	r3, [r7, #12]
 8007184:	e7fe      	b.n	8007184 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007186:	693b      	ldr	r3, [r7, #16]
 8007188:	3318      	adds	r3, #24
 800718a:	4618      	mov	r0, r3
 800718c:	f7fe fe8a 	bl	8005ea4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007190:	4b1d      	ldr	r3, [pc, #116]	; (8007208 <xTaskRemoveFromEventList+0xac>)
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d11c      	bne.n	80071d2 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007198:	693b      	ldr	r3, [r7, #16]
 800719a:	3304      	adds	r3, #4
 800719c:	4618      	mov	r0, r3
 800719e:	f7fe fe81 	bl	8005ea4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80071a2:	693b      	ldr	r3, [r7, #16]
 80071a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071a6:	2201      	movs	r2, #1
 80071a8:	409a      	lsls	r2, r3
 80071aa:	4b18      	ldr	r3, [pc, #96]	; (800720c <xTaskRemoveFromEventList+0xb0>)
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	4313      	orrs	r3, r2
 80071b0:	4a16      	ldr	r2, [pc, #88]	; (800720c <xTaskRemoveFromEventList+0xb0>)
 80071b2:	6013      	str	r3, [r2, #0]
 80071b4:	693b      	ldr	r3, [r7, #16]
 80071b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071b8:	4613      	mov	r3, r2
 80071ba:	009b      	lsls	r3, r3, #2
 80071bc:	4413      	add	r3, r2
 80071be:	009b      	lsls	r3, r3, #2
 80071c0:	4a13      	ldr	r2, [pc, #76]	; (8007210 <xTaskRemoveFromEventList+0xb4>)
 80071c2:	441a      	add	r2, r3
 80071c4:	693b      	ldr	r3, [r7, #16]
 80071c6:	3304      	adds	r3, #4
 80071c8:	4619      	mov	r1, r3
 80071ca:	4610      	mov	r0, r2
 80071cc:	f7fe fe0d 	bl	8005dea <vListInsertEnd>
 80071d0:	e005      	b.n	80071de <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80071d2:	693b      	ldr	r3, [r7, #16]
 80071d4:	3318      	adds	r3, #24
 80071d6:	4619      	mov	r1, r3
 80071d8:	480e      	ldr	r0, [pc, #56]	; (8007214 <xTaskRemoveFromEventList+0xb8>)
 80071da:	f7fe fe06 	bl	8005dea <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80071de:	693b      	ldr	r3, [r7, #16]
 80071e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071e2:	4b0d      	ldr	r3, [pc, #52]	; (8007218 <xTaskRemoveFromEventList+0xbc>)
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071e8:	429a      	cmp	r2, r3
 80071ea:	d905      	bls.n	80071f8 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80071ec:	2301      	movs	r3, #1
 80071ee:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80071f0:	4b0a      	ldr	r3, [pc, #40]	; (800721c <xTaskRemoveFromEventList+0xc0>)
 80071f2:	2201      	movs	r2, #1
 80071f4:	601a      	str	r2, [r3, #0]
 80071f6:	e001      	b.n	80071fc <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 80071f8:	2300      	movs	r3, #0
 80071fa:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80071fc:	697b      	ldr	r3, [r7, #20]
}
 80071fe:	4618      	mov	r0, r3
 8007200:	3718      	adds	r7, #24
 8007202:	46bd      	mov	sp, r7
 8007204:	bd80      	pop	{r7, pc}
 8007206:	bf00      	nop
 8007208:	20000418 	.word	0x20000418
 800720c:	200003f8 	.word	0x200003f8
 8007210:	200002f4 	.word	0x200002f4
 8007214:	200003b0 	.word	0x200003b0
 8007218:	200002f0 	.word	0x200002f0
 800721c:	20000404 	.word	0x20000404

08007220 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007220:	b480      	push	{r7}
 8007222:	b083      	sub	sp, #12
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007228:	4b06      	ldr	r3, [pc, #24]	; (8007244 <vTaskInternalSetTimeOutState+0x24>)
 800722a:	681a      	ldr	r2, [r3, #0]
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007230:	4b05      	ldr	r3, [pc, #20]	; (8007248 <vTaskInternalSetTimeOutState+0x28>)
 8007232:	681a      	ldr	r2, [r3, #0]
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	605a      	str	r2, [r3, #4]
}
 8007238:	bf00      	nop
 800723a:	370c      	adds	r7, #12
 800723c:	46bd      	mov	sp, r7
 800723e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007242:	4770      	bx	lr
 8007244:	20000408 	.word	0x20000408
 8007248:	200003f4 	.word	0x200003f4

0800724c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800724c:	b580      	push	{r7, lr}
 800724e:	b088      	sub	sp, #32
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
 8007254:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d109      	bne.n	8007270 <xTaskCheckForTimeOut+0x24>
 800725c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007260:	f383 8811 	msr	BASEPRI, r3
 8007264:	f3bf 8f6f 	isb	sy
 8007268:	f3bf 8f4f 	dsb	sy
 800726c:	613b      	str	r3, [r7, #16]
 800726e:	e7fe      	b.n	800726e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d109      	bne.n	800728a <xTaskCheckForTimeOut+0x3e>
 8007276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800727a:	f383 8811 	msr	BASEPRI, r3
 800727e:	f3bf 8f6f 	isb	sy
 8007282:	f3bf 8f4f 	dsb	sy
 8007286:	60fb      	str	r3, [r7, #12]
 8007288:	e7fe      	b.n	8007288 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800728a:	f000 fb4f 	bl	800792c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800728e:	4b1d      	ldr	r3, [pc, #116]	; (8007304 <xTaskCheckForTimeOut+0xb8>)
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	685b      	ldr	r3, [r3, #4]
 8007298:	69ba      	ldr	r2, [r7, #24]
 800729a:	1ad3      	subs	r3, r2, r3
 800729c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072a6:	d102      	bne.n	80072ae <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80072a8:	2300      	movs	r3, #0
 80072aa:	61fb      	str	r3, [r7, #28]
 80072ac:	e023      	b.n	80072f6 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681a      	ldr	r2, [r3, #0]
 80072b2:	4b15      	ldr	r3, [pc, #84]	; (8007308 <xTaskCheckForTimeOut+0xbc>)
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	429a      	cmp	r2, r3
 80072b8:	d007      	beq.n	80072ca <xTaskCheckForTimeOut+0x7e>
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	685b      	ldr	r3, [r3, #4]
 80072be:	69ba      	ldr	r2, [r7, #24]
 80072c0:	429a      	cmp	r2, r3
 80072c2:	d302      	bcc.n	80072ca <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80072c4:	2301      	movs	r3, #1
 80072c6:	61fb      	str	r3, [r7, #28]
 80072c8:	e015      	b.n	80072f6 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	697a      	ldr	r2, [r7, #20]
 80072d0:	429a      	cmp	r2, r3
 80072d2:	d20b      	bcs.n	80072ec <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	681a      	ldr	r2, [r3, #0]
 80072d8:	697b      	ldr	r3, [r7, #20]
 80072da:	1ad2      	subs	r2, r2, r3
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80072e0:	6878      	ldr	r0, [r7, #4]
 80072e2:	f7ff ff9d 	bl	8007220 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80072e6:	2300      	movs	r3, #0
 80072e8:	61fb      	str	r3, [r7, #28]
 80072ea:	e004      	b.n	80072f6 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	2200      	movs	r2, #0
 80072f0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80072f2:	2301      	movs	r3, #1
 80072f4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80072f6:	f000 fb47 	bl	8007988 <vPortExitCritical>

	return xReturn;
 80072fa:	69fb      	ldr	r3, [r7, #28]
}
 80072fc:	4618      	mov	r0, r3
 80072fe:	3720      	adds	r7, #32
 8007300:	46bd      	mov	sp, r7
 8007302:	bd80      	pop	{r7, pc}
 8007304:	200003f4 	.word	0x200003f4
 8007308:	20000408 	.word	0x20000408

0800730c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800730c:	b480      	push	{r7}
 800730e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007310:	4b03      	ldr	r3, [pc, #12]	; (8007320 <vTaskMissedYield+0x14>)
 8007312:	2201      	movs	r2, #1
 8007314:	601a      	str	r2, [r3, #0]
}
 8007316:	bf00      	nop
 8007318:	46bd      	mov	sp, r7
 800731a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731e:	4770      	bx	lr
 8007320:	20000404 	.word	0x20000404

08007324 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007324:	b580      	push	{r7, lr}
 8007326:	b082      	sub	sp, #8
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800732c:	f000 f852 	bl	80073d4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007330:	4b06      	ldr	r3, [pc, #24]	; (800734c <prvIdleTask+0x28>)
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	2b01      	cmp	r3, #1
 8007336:	d9f9      	bls.n	800732c <prvIdleTask+0x8>
			{
				taskYIELD();
 8007338:	4b05      	ldr	r3, [pc, #20]	; (8007350 <prvIdleTask+0x2c>)
 800733a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800733e:	601a      	str	r2, [r3, #0]
 8007340:	f3bf 8f4f 	dsb	sy
 8007344:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007348:	e7f0      	b.n	800732c <prvIdleTask+0x8>
 800734a:	bf00      	nop
 800734c:	200002f4 	.word	0x200002f4
 8007350:	e000ed04 	.word	0xe000ed04

08007354 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b082      	sub	sp, #8
 8007358:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800735a:	2300      	movs	r3, #0
 800735c:	607b      	str	r3, [r7, #4]
 800735e:	e00c      	b.n	800737a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007360:	687a      	ldr	r2, [r7, #4]
 8007362:	4613      	mov	r3, r2
 8007364:	009b      	lsls	r3, r3, #2
 8007366:	4413      	add	r3, r2
 8007368:	009b      	lsls	r3, r3, #2
 800736a:	4a12      	ldr	r2, [pc, #72]	; (80073b4 <prvInitialiseTaskLists+0x60>)
 800736c:	4413      	add	r3, r2
 800736e:	4618      	mov	r0, r3
 8007370:	f7fe fd0e 	bl	8005d90 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	3301      	adds	r3, #1
 8007378:	607b      	str	r3, [r7, #4]
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2b06      	cmp	r3, #6
 800737e:	d9ef      	bls.n	8007360 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007380:	480d      	ldr	r0, [pc, #52]	; (80073b8 <prvInitialiseTaskLists+0x64>)
 8007382:	f7fe fd05 	bl	8005d90 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007386:	480d      	ldr	r0, [pc, #52]	; (80073bc <prvInitialiseTaskLists+0x68>)
 8007388:	f7fe fd02 	bl	8005d90 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800738c:	480c      	ldr	r0, [pc, #48]	; (80073c0 <prvInitialiseTaskLists+0x6c>)
 800738e:	f7fe fcff 	bl	8005d90 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007392:	480c      	ldr	r0, [pc, #48]	; (80073c4 <prvInitialiseTaskLists+0x70>)
 8007394:	f7fe fcfc 	bl	8005d90 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007398:	480b      	ldr	r0, [pc, #44]	; (80073c8 <prvInitialiseTaskLists+0x74>)
 800739a:	f7fe fcf9 	bl	8005d90 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800739e:	4b0b      	ldr	r3, [pc, #44]	; (80073cc <prvInitialiseTaskLists+0x78>)
 80073a0:	4a05      	ldr	r2, [pc, #20]	; (80073b8 <prvInitialiseTaskLists+0x64>)
 80073a2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80073a4:	4b0a      	ldr	r3, [pc, #40]	; (80073d0 <prvInitialiseTaskLists+0x7c>)
 80073a6:	4a05      	ldr	r2, [pc, #20]	; (80073bc <prvInitialiseTaskLists+0x68>)
 80073a8:	601a      	str	r2, [r3, #0]
}
 80073aa:	bf00      	nop
 80073ac:	3708      	adds	r7, #8
 80073ae:	46bd      	mov	sp, r7
 80073b0:	bd80      	pop	{r7, pc}
 80073b2:	bf00      	nop
 80073b4:	200002f4 	.word	0x200002f4
 80073b8:	20000380 	.word	0x20000380
 80073bc:	20000394 	.word	0x20000394
 80073c0:	200003b0 	.word	0x200003b0
 80073c4:	200003c4 	.word	0x200003c4
 80073c8:	200003dc 	.word	0x200003dc
 80073cc:	200003a8 	.word	0x200003a8
 80073d0:	200003ac 	.word	0x200003ac

080073d4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b082      	sub	sp, #8
 80073d8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80073da:	e019      	b.n	8007410 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80073dc:	f000 faa6 	bl	800792c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80073e0:	4b0f      	ldr	r3, [pc, #60]	; (8007420 <prvCheckTasksWaitingTermination+0x4c>)
 80073e2:	68db      	ldr	r3, [r3, #12]
 80073e4:	68db      	ldr	r3, [r3, #12]
 80073e6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	3304      	adds	r3, #4
 80073ec:	4618      	mov	r0, r3
 80073ee:	f7fe fd59 	bl	8005ea4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80073f2:	4b0c      	ldr	r3, [pc, #48]	; (8007424 <prvCheckTasksWaitingTermination+0x50>)
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	3b01      	subs	r3, #1
 80073f8:	4a0a      	ldr	r2, [pc, #40]	; (8007424 <prvCheckTasksWaitingTermination+0x50>)
 80073fa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80073fc:	4b0a      	ldr	r3, [pc, #40]	; (8007428 <prvCheckTasksWaitingTermination+0x54>)
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	3b01      	subs	r3, #1
 8007402:	4a09      	ldr	r2, [pc, #36]	; (8007428 <prvCheckTasksWaitingTermination+0x54>)
 8007404:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007406:	f000 fabf 	bl	8007988 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800740a:	6878      	ldr	r0, [r7, #4]
 800740c:	f000 f80e 	bl	800742c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007410:	4b05      	ldr	r3, [pc, #20]	; (8007428 <prvCheckTasksWaitingTermination+0x54>)
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d1e1      	bne.n	80073dc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007418:	bf00      	nop
 800741a:	3708      	adds	r7, #8
 800741c:	46bd      	mov	sp, r7
 800741e:	bd80      	pop	{r7, pc}
 8007420:	200003c4 	.word	0x200003c4
 8007424:	200003f0 	.word	0x200003f0
 8007428:	200003d8 	.word	0x200003d8

0800742c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800742c:	b580      	push	{r7, lr}
 800742e:	b084      	sub	sp, #16
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800743a:	2b00      	cmp	r3, #0
 800743c:	d108      	bne.n	8007450 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007442:	4618      	mov	r0, r3
 8007444:	f000 fc4e 	bl	8007ce4 <vPortFree>
				vPortFree( pxTCB );
 8007448:	6878      	ldr	r0, [r7, #4]
 800744a:	f000 fc4b 	bl	8007ce4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800744e:	e017      	b.n	8007480 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007456:	2b01      	cmp	r3, #1
 8007458:	d103      	bne.n	8007462 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800745a:	6878      	ldr	r0, [r7, #4]
 800745c:	f000 fc42 	bl	8007ce4 <vPortFree>
	}
 8007460:	e00e      	b.n	8007480 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007468:	2b02      	cmp	r3, #2
 800746a:	d009      	beq.n	8007480 <prvDeleteTCB+0x54>
 800746c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007470:	f383 8811 	msr	BASEPRI, r3
 8007474:	f3bf 8f6f 	isb	sy
 8007478:	f3bf 8f4f 	dsb	sy
 800747c:	60fb      	str	r3, [r7, #12]
 800747e:	e7fe      	b.n	800747e <prvDeleteTCB+0x52>
	}
 8007480:	bf00      	nop
 8007482:	3710      	adds	r7, #16
 8007484:	46bd      	mov	sp, r7
 8007486:	bd80      	pop	{r7, pc}

08007488 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007488:	b480      	push	{r7}
 800748a:	b083      	sub	sp, #12
 800748c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800748e:	4b0c      	ldr	r3, [pc, #48]	; (80074c0 <prvResetNextTaskUnblockTime+0x38>)
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d104      	bne.n	80074a2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007498:	4b0a      	ldr	r3, [pc, #40]	; (80074c4 <prvResetNextTaskUnblockTime+0x3c>)
 800749a:	f04f 32ff 	mov.w	r2, #4294967295
 800749e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80074a0:	e008      	b.n	80074b4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80074a2:	4b07      	ldr	r3, [pc, #28]	; (80074c0 <prvResetNextTaskUnblockTime+0x38>)
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	68db      	ldr	r3, [r3, #12]
 80074a8:	68db      	ldr	r3, [r3, #12]
 80074aa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	685b      	ldr	r3, [r3, #4]
 80074b0:	4a04      	ldr	r2, [pc, #16]	; (80074c4 <prvResetNextTaskUnblockTime+0x3c>)
 80074b2:	6013      	str	r3, [r2, #0]
}
 80074b4:	bf00      	nop
 80074b6:	370c      	adds	r7, #12
 80074b8:	46bd      	mov	sp, r7
 80074ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074be:	4770      	bx	lr
 80074c0:	200003a8 	.word	0x200003a8
 80074c4:	20000410 	.word	0x20000410

080074c8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80074c8:	b480      	push	{r7}
 80074ca:	b083      	sub	sp, #12
 80074cc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80074ce:	4b0b      	ldr	r3, [pc, #44]	; (80074fc <xTaskGetSchedulerState+0x34>)
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d102      	bne.n	80074dc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80074d6:	2301      	movs	r3, #1
 80074d8:	607b      	str	r3, [r7, #4]
 80074da:	e008      	b.n	80074ee <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80074dc:	4b08      	ldr	r3, [pc, #32]	; (8007500 <xTaskGetSchedulerState+0x38>)
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d102      	bne.n	80074ea <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80074e4:	2302      	movs	r3, #2
 80074e6:	607b      	str	r3, [r7, #4]
 80074e8:	e001      	b.n	80074ee <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80074ea:	2300      	movs	r3, #0
 80074ec:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80074ee:	687b      	ldr	r3, [r7, #4]
	}
 80074f0:	4618      	mov	r0, r3
 80074f2:	370c      	adds	r7, #12
 80074f4:	46bd      	mov	sp, r7
 80074f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fa:	4770      	bx	lr
 80074fc:	200003fc 	.word	0x200003fc
 8007500:	20000418 	.word	0x20000418

08007504 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007504:	b580      	push	{r7, lr}
 8007506:	b086      	sub	sp, #24
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007510:	2300      	movs	r3, #0
 8007512:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d06c      	beq.n	80075f4 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800751a:	4b39      	ldr	r3, [pc, #228]	; (8007600 <xTaskPriorityDisinherit+0xfc>)
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	693a      	ldr	r2, [r7, #16]
 8007520:	429a      	cmp	r2, r3
 8007522:	d009      	beq.n	8007538 <xTaskPriorityDisinherit+0x34>
 8007524:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007528:	f383 8811 	msr	BASEPRI, r3
 800752c:	f3bf 8f6f 	isb	sy
 8007530:	f3bf 8f4f 	dsb	sy
 8007534:	60fb      	str	r3, [r7, #12]
 8007536:	e7fe      	b.n	8007536 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8007538:	693b      	ldr	r3, [r7, #16]
 800753a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800753c:	2b00      	cmp	r3, #0
 800753e:	d109      	bne.n	8007554 <xTaskPriorityDisinherit+0x50>
 8007540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007544:	f383 8811 	msr	BASEPRI, r3
 8007548:	f3bf 8f6f 	isb	sy
 800754c:	f3bf 8f4f 	dsb	sy
 8007550:	60bb      	str	r3, [r7, #8]
 8007552:	e7fe      	b.n	8007552 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8007554:	693b      	ldr	r3, [r7, #16]
 8007556:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007558:	1e5a      	subs	r2, r3, #1
 800755a:	693b      	ldr	r3, [r7, #16]
 800755c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800755e:	693b      	ldr	r3, [r7, #16]
 8007560:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007562:	693b      	ldr	r3, [r7, #16]
 8007564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007566:	429a      	cmp	r2, r3
 8007568:	d044      	beq.n	80075f4 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800756a:	693b      	ldr	r3, [r7, #16]
 800756c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800756e:	2b00      	cmp	r3, #0
 8007570:	d140      	bne.n	80075f4 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007572:	693b      	ldr	r3, [r7, #16]
 8007574:	3304      	adds	r3, #4
 8007576:	4618      	mov	r0, r3
 8007578:	f7fe fc94 	bl	8005ea4 <uxListRemove>
 800757c:	4603      	mov	r3, r0
 800757e:	2b00      	cmp	r3, #0
 8007580:	d115      	bne.n	80075ae <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007582:	693b      	ldr	r3, [r7, #16]
 8007584:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007586:	491f      	ldr	r1, [pc, #124]	; (8007604 <xTaskPriorityDisinherit+0x100>)
 8007588:	4613      	mov	r3, r2
 800758a:	009b      	lsls	r3, r3, #2
 800758c:	4413      	add	r3, r2
 800758e:	009b      	lsls	r3, r3, #2
 8007590:	440b      	add	r3, r1
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d10a      	bne.n	80075ae <xTaskPriorityDisinherit+0xaa>
 8007598:	693b      	ldr	r3, [r7, #16]
 800759a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800759c:	2201      	movs	r2, #1
 800759e:	fa02 f303 	lsl.w	r3, r2, r3
 80075a2:	43da      	mvns	r2, r3
 80075a4:	4b18      	ldr	r3, [pc, #96]	; (8007608 <xTaskPriorityDisinherit+0x104>)
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	4013      	ands	r3, r2
 80075aa:	4a17      	ldr	r2, [pc, #92]	; (8007608 <xTaskPriorityDisinherit+0x104>)
 80075ac:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80075ae:	693b      	ldr	r3, [r7, #16]
 80075b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80075b2:	693b      	ldr	r3, [r7, #16]
 80075b4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80075b6:	693b      	ldr	r3, [r7, #16]
 80075b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075ba:	f1c3 0207 	rsb	r2, r3, #7
 80075be:	693b      	ldr	r3, [r7, #16]
 80075c0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80075c2:	693b      	ldr	r3, [r7, #16]
 80075c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075c6:	2201      	movs	r2, #1
 80075c8:	409a      	lsls	r2, r3
 80075ca:	4b0f      	ldr	r3, [pc, #60]	; (8007608 <xTaskPriorityDisinherit+0x104>)
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	4313      	orrs	r3, r2
 80075d0:	4a0d      	ldr	r2, [pc, #52]	; (8007608 <xTaskPriorityDisinherit+0x104>)
 80075d2:	6013      	str	r3, [r2, #0]
 80075d4:	693b      	ldr	r3, [r7, #16]
 80075d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075d8:	4613      	mov	r3, r2
 80075da:	009b      	lsls	r3, r3, #2
 80075dc:	4413      	add	r3, r2
 80075de:	009b      	lsls	r3, r3, #2
 80075e0:	4a08      	ldr	r2, [pc, #32]	; (8007604 <xTaskPriorityDisinherit+0x100>)
 80075e2:	441a      	add	r2, r3
 80075e4:	693b      	ldr	r3, [r7, #16]
 80075e6:	3304      	adds	r3, #4
 80075e8:	4619      	mov	r1, r3
 80075ea:	4610      	mov	r0, r2
 80075ec:	f7fe fbfd 	bl	8005dea <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80075f0:	2301      	movs	r3, #1
 80075f2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80075f4:	697b      	ldr	r3, [r7, #20]
	}
 80075f6:	4618      	mov	r0, r3
 80075f8:	3718      	adds	r7, #24
 80075fa:	46bd      	mov	sp, r7
 80075fc:	bd80      	pop	{r7, pc}
 80075fe:	bf00      	nop
 8007600:	200002f0 	.word	0x200002f0
 8007604:	200002f4 	.word	0x200002f4
 8007608:	200003f8 	.word	0x200003f8

0800760c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800760c:	b580      	push	{r7, lr}
 800760e:	b084      	sub	sp, #16
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
 8007614:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007616:	4b29      	ldr	r3, [pc, #164]	; (80076bc <prvAddCurrentTaskToDelayedList+0xb0>)
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800761c:	4b28      	ldr	r3, [pc, #160]	; (80076c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	3304      	adds	r3, #4
 8007622:	4618      	mov	r0, r3
 8007624:	f7fe fc3e 	bl	8005ea4 <uxListRemove>
 8007628:	4603      	mov	r3, r0
 800762a:	2b00      	cmp	r3, #0
 800762c:	d10b      	bne.n	8007646 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800762e:	4b24      	ldr	r3, [pc, #144]	; (80076c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007634:	2201      	movs	r2, #1
 8007636:	fa02 f303 	lsl.w	r3, r2, r3
 800763a:	43da      	mvns	r2, r3
 800763c:	4b21      	ldr	r3, [pc, #132]	; (80076c4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	4013      	ands	r3, r2
 8007642:	4a20      	ldr	r2, [pc, #128]	; (80076c4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007644:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	f1b3 3fff 	cmp.w	r3, #4294967295
 800764c:	d10a      	bne.n	8007664 <prvAddCurrentTaskToDelayedList+0x58>
 800764e:	683b      	ldr	r3, [r7, #0]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d007      	beq.n	8007664 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007654:	4b1a      	ldr	r3, [pc, #104]	; (80076c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	3304      	adds	r3, #4
 800765a:	4619      	mov	r1, r3
 800765c:	481a      	ldr	r0, [pc, #104]	; (80076c8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800765e:	f7fe fbc4 	bl	8005dea <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007662:	e026      	b.n	80076b2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007664:	68fa      	ldr	r2, [r7, #12]
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	4413      	add	r3, r2
 800766a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800766c:	4b14      	ldr	r3, [pc, #80]	; (80076c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	68ba      	ldr	r2, [r7, #8]
 8007672:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007674:	68ba      	ldr	r2, [r7, #8]
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	429a      	cmp	r2, r3
 800767a:	d209      	bcs.n	8007690 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800767c:	4b13      	ldr	r3, [pc, #76]	; (80076cc <prvAddCurrentTaskToDelayedList+0xc0>)
 800767e:	681a      	ldr	r2, [r3, #0]
 8007680:	4b0f      	ldr	r3, [pc, #60]	; (80076c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	3304      	adds	r3, #4
 8007686:	4619      	mov	r1, r3
 8007688:	4610      	mov	r0, r2
 800768a:	f7fe fbd2 	bl	8005e32 <vListInsert>
}
 800768e:	e010      	b.n	80076b2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007690:	4b0f      	ldr	r3, [pc, #60]	; (80076d0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007692:	681a      	ldr	r2, [r3, #0]
 8007694:	4b0a      	ldr	r3, [pc, #40]	; (80076c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	3304      	adds	r3, #4
 800769a:	4619      	mov	r1, r3
 800769c:	4610      	mov	r0, r2
 800769e:	f7fe fbc8 	bl	8005e32 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80076a2:	4b0c      	ldr	r3, [pc, #48]	; (80076d4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	68ba      	ldr	r2, [r7, #8]
 80076a8:	429a      	cmp	r2, r3
 80076aa:	d202      	bcs.n	80076b2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80076ac:	4a09      	ldr	r2, [pc, #36]	; (80076d4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80076ae:	68bb      	ldr	r3, [r7, #8]
 80076b0:	6013      	str	r3, [r2, #0]
}
 80076b2:	bf00      	nop
 80076b4:	3710      	adds	r7, #16
 80076b6:	46bd      	mov	sp, r7
 80076b8:	bd80      	pop	{r7, pc}
 80076ba:	bf00      	nop
 80076bc:	200003f4 	.word	0x200003f4
 80076c0:	200002f0 	.word	0x200002f0
 80076c4:	200003f8 	.word	0x200003f8
 80076c8:	200003dc 	.word	0x200003dc
 80076cc:	200003ac 	.word	0x200003ac
 80076d0:	200003a8 	.word	0x200003a8
 80076d4:	20000410 	.word	0x20000410

080076d8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80076d8:	b480      	push	{r7}
 80076da:	b085      	sub	sp, #20
 80076dc:	af00      	add	r7, sp, #0
 80076de:	60f8      	str	r0, [r7, #12]
 80076e0:	60b9      	str	r1, [r7, #8]
 80076e2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	3b04      	subs	r3, #4
 80076e8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80076f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	3b04      	subs	r3, #4
 80076f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80076f8:	68bb      	ldr	r3, [r7, #8]
 80076fa:	f023 0201 	bic.w	r2, r3, #1
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	3b04      	subs	r3, #4
 8007706:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007708:	4a0c      	ldr	r2, [pc, #48]	; (800773c <pxPortInitialiseStack+0x64>)
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	3b14      	subs	r3, #20
 8007712:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007714:	687a      	ldr	r2, [r7, #4]
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	3b04      	subs	r3, #4
 800771e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	f06f 0202 	mvn.w	r2, #2
 8007726:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	3b20      	subs	r3, #32
 800772c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800772e:	68fb      	ldr	r3, [r7, #12]
}
 8007730:	4618      	mov	r0, r3
 8007732:	3714      	adds	r7, #20
 8007734:	46bd      	mov	sp, r7
 8007736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773a:	4770      	bx	lr
 800773c:	08007741 	.word	0x08007741

08007740 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007740:	b480      	push	{r7}
 8007742:	b085      	sub	sp, #20
 8007744:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007746:	2300      	movs	r3, #0
 8007748:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800774a:	4b11      	ldr	r3, [pc, #68]	; (8007790 <prvTaskExitError+0x50>)
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007752:	d009      	beq.n	8007768 <prvTaskExitError+0x28>
 8007754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007758:	f383 8811 	msr	BASEPRI, r3
 800775c:	f3bf 8f6f 	isb	sy
 8007760:	f3bf 8f4f 	dsb	sy
 8007764:	60fb      	str	r3, [r7, #12]
 8007766:	e7fe      	b.n	8007766 <prvTaskExitError+0x26>
 8007768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800776c:	f383 8811 	msr	BASEPRI, r3
 8007770:	f3bf 8f6f 	isb	sy
 8007774:	f3bf 8f4f 	dsb	sy
 8007778:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800777a:	bf00      	nop
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d0fc      	beq.n	800777c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007782:	bf00      	nop
 8007784:	3714      	adds	r7, #20
 8007786:	46bd      	mov	sp, r7
 8007788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778c:	4770      	bx	lr
 800778e:	bf00      	nop
 8007790:	2000000c 	.word	0x2000000c
	...

080077a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80077a0:	4b07      	ldr	r3, [pc, #28]	; (80077c0 <pxCurrentTCBConst2>)
 80077a2:	6819      	ldr	r1, [r3, #0]
 80077a4:	6808      	ldr	r0, [r1, #0]
 80077a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077aa:	f380 8809 	msr	PSP, r0
 80077ae:	f3bf 8f6f 	isb	sy
 80077b2:	f04f 0000 	mov.w	r0, #0
 80077b6:	f380 8811 	msr	BASEPRI, r0
 80077ba:	4770      	bx	lr
 80077bc:	f3af 8000 	nop.w

080077c0 <pxCurrentTCBConst2>:
 80077c0:	200002f0 	.word	0x200002f0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80077c4:	bf00      	nop
 80077c6:	bf00      	nop

080077c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80077c8:	4808      	ldr	r0, [pc, #32]	; (80077ec <prvPortStartFirstTask+0x24>)
 80077ca:	6800      	ldr	r0, [r0, #0]
 80077cc:	6800      	ldr	r0, [r0, #0]
 80077ce:	f380 8808 	msr	MSP, r0
 80077d2:	f04f 0000 	mov.w	r0, #0
 80077d6:	f380 8814 	msr	CONTROL, r0
 80077da:	b662      	cpsie	i
 80077dc:	b661      	cpsie	f
 80077de:	f3bf 8f4f 	dsb	sy
 80077e2:	f3bf 8f6f 	isb	sy
 80077e6:	df00      	svc	0
 80077e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80077ea:	bf00      	nop
 80077ec:	e000ed08 	.word	0xe000ed08

080077f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b086      	sub	sp, #24
 80077f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80077f6:	4b44      	ldr	r3, [pc, #272]	; (8007908 <xPortStartScheduler+0x118>)
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	4a44      	ldr	r2, [pc, #272]	; (800790c <xPortStartScheduler+0x11c>)
 80077fc:	4293      	cmp	r3, r2
 80077fe:	d109      	bne.n	8007814 <xPortStartScheduler+0x24>
 8007800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007804:	f383 8811 	msr	BASEPRI, r3
 8007808:	f3bf 8f6f 	isb	sy
 800780c:	f3bf 8f4f 	dsb	sy
 8007810:	613b      	str	r3, [r7, #16]
 8007812:	e7fe      	b.n	8007812 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007814:	4b3c      	ldr	r3, [pc, #240]	; (8007908 <xPortStartScheduler+0x118>)
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	4a3d      	ldr	r2, [pc, #244]	; (8007910 <xPortStartScheduler+0x120>)
 800781a:	4293      	cmp	r3, r2
 800781c:	d109      	bne.n	8007832 <xPortStartScheduler+0x42>
 800781e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007822:	f383 8811 	msr	BASEPRI, r3
 8007826:	f3bf 8f6f 	isb	sy
 800782a:	f3bf 8f4f 	dsb	sy
 800782e:	60fb      	str	r3, [r7, #12]
 8007830:	e7fe      	b.n	8007830 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007832:	4b38      	ldr	r3, [pc, #224]	; (8007914 <xPortStartScheduler+0x124>)
 8007834:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007836:	697b      	ldr	r3, [r7, #20]
 8007838:	781b      	ldrb	r3, [r3, #0]
 800783a:	b2db      	uxtb	r3, r3
 800783c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800783e:	697b      	ldr	r3, [r7, #20]
 8007840:	22ff      	movs	r2, #255	; 0xff
 8007842:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007844:	697b      	ldr	r3, [r7, #20]
 8007846:	781b      	ldrb	r3, [r3, #0]
 8007848:	b2db      	uxtb	r3, r3
 800784a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800784c:	78fb      	ldrb	r3, [r7, #3]
 800784e:	b2db      	uxtb	r3, r3
 8007850:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007854:	b2da      	uxtb	r2, r3
 8007856:	4b30      	ldr	r3, [pc, #192]	; (8007918 <xPortStartScheduler+0x128>)
 8007858:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800785a:	4b30      	ldr	r3, [pc, #192]	; (800791c <xPortStartScheduler+0x12c>)
 800785c:	2207      	movs	r2, #7
 800785e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007860:	e009      	b.n	8007876 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8007862:	4b2e      	ldr	r3, [pc, #184]	; (800791c <xPortStartScheduler+0x12c>)
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	3b01      	subs	r3, #1
 8007868:	4a2c      	ldr	r2, [pc, #176]	; (800791c <xPortStartScheduler+0x12c>)
 800786a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800786c:	78fb      	ldrb	r3, [r7, #3]
 800786e:	b2db      	uxtb	r3, r3
 8007870:	005b      	lsls	r3, r3, #1
 8007872:	b2db      	uxtb	r3, r3
 8007874:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007876:	78fb      	ldrb	r3, [r7, #3]
 8007878:	b2db      	uxtb	r3, r3
 800787a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800787e:	2b80      	cmp	r3, #128	; 0x80
 8007880:	d0ef      	beq.n	8007862 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007882:	4b26      	ldr	r3, [pc, #152]	; (800791c <xPortStartScheduler+0x12c>)
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	f1c3 0307 	rsb	r3, r3, #7
 800788a:	2b04      	cmp	r3, #4
 800788c:	d009      	beq.n	80078a2 <xPortStartScheduler+0xb2>
 800788e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007892:	f383 8811 	msr	BASEPRI, r3
 8007896:	f3bf 8f6f 	isb	sy
 800789a:	f3bf 8f4f 	dsb	sy
 800789e:	60bb      	str	r3, [r7, #8]
 80078a0:	e7fe      	b.n	80078a0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80078a2:	4b1e      	ldr	r3, [pc, #120]	; (800791c <xPortStartScheduler+0x12c>)
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	021b      	lsls	r3, r3, #8
 80078a8:	4a1c      	ldr	r2, [pc, #112]	; (800791c <xPortStartScheduler+0x12c>)
 80078aa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80078ac:	4b1b      	ldr	r3, [pc, #108]	; (800791c <xPortStartScheduler+0x12c>)
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80078b4:	4a19      	ldr	r2, [pc, #100]	; (800791c <xPortStartScheduler+0x12c>)
 80078b6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	b2da      	uxtb	r2, r3
 80078bc:	697b      	ldr	r3, [r7, #20]
 80078be:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80078c0:	4b17      	ldr	r3, [pc, #92]	; (8007920 <xPortStartScheduler+0x130>)
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	4a16      	ldr	r2, [pc, #88]	; (8007920 <xPortStartScheduler+0x130>)
 80078c6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80078ca:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80078cc:	4b14      	ldr	r3, [pc, #80]	; (8007920 <xPortStartScheduler+0x130>)
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	4a13      	ldr	r2, [pc, #76]	; (8007920 <xPortStartScheduler+0x130>)
 80078d2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80078d6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80078d8:	f000 f8d6 	bl	8007a88 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80078dc:	4b11      	ldr	r3, [pc, #68]	; (8007924 <xPortStartScheduler+0x134>)
 80078de:	2200      	movs	r2, #0
 80078e0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80078e2:	f000 f8f5 	bl	8007ad0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80078e6:	4b10      	ldr	r3, [pc, #64]	; (8007928 <xPortStartScheduler+0x138>)
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	4a0f      	ldr	r2, [pc, #60]	; (8007928 <xPortStartScheduler+0x138>)
 80078ec:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80078f0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80078f2:	f7ff ff69 	bl	80077c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80078f6:	f7ff fbb3 	bl	8007060 <vTaskSwitchContext>
	prvTaskExitError();
 80078fa:	f7ff ff21 	bl	8007740 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80078fe:	2300      	movs	r3, #0
}
 8007900:	4618      	mov	r0, r3
 8007902:	3718      	adds	r7, #24
 8007904:	46bd      	mov	sp, r7
 8007906:	bd80      	pop	{r7, pc}
 8007908:	e000ed00 	.word	0xe000ed00
 800790c:	410fc271 	.word	0x410fc271
 8007910:	410fc270 	.word	0x410fc270
 8007914:	e000e400 	.word	0xe000e400
 8007918:	2000041c 	.word	0x2000041c
 800791c:	20000420 	.word	0x20000420
 8007920:	e000ed20 	.word	0xe000ed20
 8007924:	2000000c 	.word	0x2000000c
 8007928:	e000ef34 	.word	0xe000ef34

0800792c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800792c:	b480      	push	{r7}
 800792e:	b083      	sub	sp, #12
 8007930:	af00      	add	r7, sp, #0
 8007932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007936:	f383 8811 	msr	BASEPRI, r3
 800793a:	f3bf 8f6f 	isb	sy
 800793e:	f3bf 8f4f 	dsb	sy
 8007942:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007944:	4b0e      	ldr	r3, [pc, #56]	; (8007980 <vPortEnterCritical+0x54>)
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	3301      	adds	r3, #1
 800794a:	4a0d      	ldr	r2, [pc, #52]	; (8007980 <vPortEnterCritical+0x54>)
 800794c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800794e:	4b0c      	ldr	r3, [pc, #48]	; (8007980 <vPortEnterCritical+0x54>)
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	2b01      	cmp	r3, #1
 8007954:	d10e      	bne.n	8007974 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007956:	4b0b      	ldr	r3, [pc, #44]	; (8007984 <vPortEnterCritical+0x58>)
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	b2db      	uxtb	r3, r3
 800795c:	2b00      	cmp	r3, #0
 800795e:	d009      	beq.n	8007974 <vPortEnterCritical+0x48>
 8007960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007964:	f383 8811 	msr	BASEPRI, r3
 8007968:	f3bf 8f6f 	isb	sy
 800796c:	f3bf 8f4f 	dsb	sy
 8007970:	603b      	str	r3, [r7, #0]
 8007972:	e7fe      	b.n	8007972 <vPortEnterCritical+0x46>
	}
}
 8007974:	bf00      	nop
 8007976:	370c      	adds	r7, #12
 8007978:	46bd      	mov	sp, r7
 800797a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797e:	4770      	bx	lr
 8007980:	2000000c 	.word	0x2000000c
 8007984:	e000ed04 	.word	0xe000ed04

08007988 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007988:	b480      	push	{r7}
 800798a:	b083      	sub	sp, #12
 800798c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800798e:	4b11      	ldr	r3, [pc, #68]	; (80079d4 <vPortExitCritical+0x4c>)
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d109      	bne.n	80079aa <vPortExitCritical+0x22>
 8007996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800799a:	f383 8811 	msr	BASEPRI, r3
 800799e:	f3bf 8f6f 	isb	sy
 80079a2:	f3bf 8f4f 	dsb	sy
 80079a6:	607b      	str	r3, [r7, #4]
 80079a8:	e7fe      	b.n	80079a8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80079aa:	4b0a      	ldr	r3, [pc, #40]	; (80079d4 <vPortExitCritical+0x4c>)
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	3b01      	subs	r3, #1
 80079b0:	4a08      	ldr	r2, [pc, #32]	; (80079d4 <vPortExitCritical+0x4c>)
 80079b2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80079b4:	4b07      	ldr	r3, [pc, #28]	; (80079d4 <vPortExitCritical+0x4c>)
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d104      	bne.n	80079c6 <vPortExitCritical+0x3e>
 80079bc:	2300      	movs	r3, #0
 80079be:	603b      	str	r3, [r7, #0]
	__asm volatile
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80079c6:	bf00      	nop
 80079c8:	370c      	adds	r7, #12
 80079ca:	46bd      	mov	sp, r7
 80079cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d0:	4770      	bx	lr
 80079d2:	bf00      	nop
 80079d4:	2000000c 	.word	0x2000000c
	...

080079e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80079e0:	f3ef 8009 	mrs	r0, PSP
 80079e4:	f3bf 8f6f 	isb	sy
 80079e8:	4b15      	ldr	r3, [pc, #84]	; (8007a40 <pxCurrentTCBConst>)
 80079ea:	681a      	ldr	r2, [r3, #0]
 80079ec:	f01e 0f10 	tst.w	lr, #16
 80079f0:	bf08      	it	eq
 80079f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80079f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079fa:	6010      	str	r0, [r2, #0]
 80079fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007a00:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007a04:	f380 8811 	msr	BASEPRI, r0
 8007a08:	f3bf 8f4f 	dsb	sy
 8007a0c:	f3bf 8f6f 	isb	sy
 8007a10:	f7ff fb26 	bl	8007060 <vTaskSwitchContext>
 8007a14:	f04f 0000 	mov.w	r0, #0
 8007a18:	f380 8811 	msr	BASEPRI, r0
 8007a1c:	bc09      	pop	{r0, r3}
 8007a1e:	6819      	ldr	r1, [r3, #0]
 8007a20:	6808      	ldr	r0, [r1, #0]
 8007a22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a26:	f01e 0f10 	tst.w	lr, #16
 8007a2a:	bf08      	it	eq
 8007a2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007a30:	f380 8809 	msr	PSP, r0
 8007a34:	f3bf 8f6f 	isb	sy
 8007a38:	4770      	bx	lr
 8007a3a:	bf00      	nop
 8007a3c:	f3af 8000 	nop.w

08007a40 <pxCurrentTCBConst>:
 8007a40:	200002f0 	.word	0x200002f0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007a44:	bf00      	nop
 8007a46:	bf00      	nop

08007a48 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b082      	sub	sp, #8
 8007a4c:	af00      	add	r7, sp, #0
	__asm volatile
 8007a4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a52:	f383 8811 	msr	BASEPRI, r3
 8007a56:	f3bf 8f6f 	isb	sy
 8007a5a:	f3bf 8f4f 	dsb	sy
 8007a5e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007a60:	f7ff fa46 	bl	8006ef0 <xTaskIncrementTick>
 8007a64:	4603      	mov	r3, r0
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d003      	beq.n	8007a72 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007a6a:	4b06      	ldr	r3, [pc, #24]	; (8007a84 <SysTick_Handler+0x3c>)
 8007a6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a70:	601a      	str	r2, [r3, #0]
 8007a72:	2300      	movs	r3, #0
 8007a74:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007a76:	683b      	ldr	r3, [r7, #0]
 8007a78:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8007a7c:	bf00      	nop
 8007a7e:	3708      	adds	r7, #8
 8007a80:	46bd      	mov	sp, r7
 8007a82:	bd80      	pop	{r7, pc}
 8007a84:	e000ed04 	.word	0xe000ed04

08007a88 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007a88:	b480      	push	{r7}
 8007a8a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007a8c:	4b0b      	ldr	r3, [pc, #44]	; (8007abc <vPortSetupTimerInterrupt+0x34>)
 8007a8e:	2200      	movs	r2, #0
 8007a90:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007a92:	4b0b      	ldr	r3, [pc, #44]	; (8007ac0 <vPortSetupTimerInterrupt+0x38>)
 8007a94:	2200      	movs	r2, #0
 8007a96:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007a98:	4b0a      	ldr	r3, [pc, #40]	; (8007ac4 <vPortSetupTimerInterrupt+0x3c>)
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	4a0a      	ldr	r2, [pc, #40]	; (8007ac8 <vPortSetupTimerInterrupt+0x40>)
 8007a9e:	fba2 2303 	umull	r2, r3, r2, r3
 8007aa2:	099b      	lsrs	r3, r3, #6
 8007aa4:	4a09      	ldr	r2, [pc, #36]	; (8007acc <vPortSetupTimerInterrupt+0x44>)
 8007aa6:	3b01      	subs	r3, #1
 8007aa8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007aaa:	4b04      	ldr	r3, [pc, #16]	; (8007abc <vPortSetupTimerInterrupt+0x34>)
 8007aac:	2207      	movs	r2, #7
 8007aae:	601a      	str	r2, [r3, #0]
}
 8007ab0:	bf00      	nop
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab8:	4770      	bx	lr
 8007aba:	bf00      	nop
 8007abc:	e000e010 	.word	0xe000e010
 8007ac0:	e000e018 	.word	0xe000e018
 8007ac4:	20000000 	.word	0x20000000
 8007ac8:	10624dd3 	.word	0x10624dd3
 8007acc:	e000e014 	.word	0xe000e014

08007ad0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007ad0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007ae0 <vPortEnableVFP+0x10>
 8007ad4:	6801      	ldr	r1, [r0, #0]
 8007ad6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007ada:	6001      	str	r1, [r0, #0]
 8007adc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007ade:	bf00      	nop
 8007ae0:	e000ed88 	.word	0xe000ed88

08007ae4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007ae4:	b480      	push	{r7}
 8007ae6:	b085      	sub	sp, #20
 8007ae8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007aea:	f3ef 8305 	mrs	r3, IPSR
 8007aee:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	2b0f      	cmp	r3, #15
 8007af4:	d913      	bls.n	8007b1e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007af6:	4a16      	ldr	r2, [pc, #88]	; (8007b50 <vPortValidateInterruptPriority+0x6c>)
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	4413      	add	r3, r2
 8007afc:	781b      	ldrb	r3, [r3, #0]
 8007afe:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007b00:	4b14      	ldr	r3, [pc, #80]	; (8007b54 <vPortValidateInterruptPriority+0x70>)
 8007b02:	781b      	ldrb	r3, [r3, #0]
 8007b04:	7afa      	ldrb	r2, [r7, #11]
 8007b06:	429a      	cmp	r2, r3
 8007b08:	d209      	bcs.n	8007b1e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8007b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b0e:	f383 8811 	msr	BASEPRI, r3
 8007b12:	f3bf 8f6f 	isb	sy
 8007b16:	f3bf 8f4f 	dsb	sy
 8007b1a:	607b      	str	r3, [r7, #4]
 8007b1c:	e7fe      	b.n	8007b1c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007b1e:	4b0e      	ldr	r3, [pc, #56]	; (8007b58 <vPortValidateInterruptPriority+0x74>)
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007b26:	4b0d      	ldr	r3, [pc, #52]	; (8007b5c <vPortValidateInterruptPriority+0x78>)
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	429a      	cmp	r2, r3
 8007b2c:	d909      	bls.n	8007b42 <vPortValidateInterruptPriority+0x5e>
 8007b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b32:	f383 8811 	msr	BASEPRI, r3
 8007b36:	f3bf 8f6f 	isb	sy
 8007b3a:	f3bf 8f4f 	dsb	sy
 8007b3e:	603b      	str	r3, [r7, #0]
 8007b40:	e7fe      	b.n	8007b40 <vPortValidateInterruptPriority+0x5c>
	}
 8007b42:	bf00      	nop
 8007b44:	3714      	adds	r7, #20
 8007b46:	46bd      	mov	sp, r7
 8007b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4c:	4770      	bx	lr
 8007b4e:	bf00      	nop
 8007b50:	e000e3f0 	.word	0xe000e3f0
 8007b54:	2000041c 	.word	0x2000041c
 8007b58:	e000ed0c 	.word	0xe000ed0c
 8007b5c:	20000420 	.word	0x20000420

08007b60 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b08a      	sub	sp, #40	; 0x28
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007b68:	2300      	movs	r3, #0
 8007b6a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007b6c:	f7ff f916 	bl	8006d9c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007b70:	4b57      	ldr	r3, [pc, #348]	; (8007cd0 <pvPortMalloc+0x170>)
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d101      	bne.n	8007b7c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007b78:	f000 f90c 	bl	8007d94 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007b7c:	4b55      	ldr	r3, [pc, #340]	; (8007cd4 <pvPortMalloc+0x174>)
 8007b7e:	681a      	ldr	r2, [r3, #0]
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	4013      	ands	r3, r2
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	f040 808c 	bne.w	8007ca2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d01c      	beq.n	8007bca <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8007b90:	2208      	movs	r2, #8
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	4413      	add	r3, r2
 8007b96:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	f003 0307 	and.w	r3, r3, #7
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d013      	beq.n	8007bca <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	f023 0307 	bic.w	r3, r3, #7
 8007ba8:	3308      	adds	r3, #8
 8007baa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	f003 0307 	and.w	r3, r3, #7
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d009      	beq.n	8007bca <pvPortMalloc+0x6a>
 8007bb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bba:	f383 8811 	msr	BASEPRI, r3
 8007bbe:	f3bf 8f6f 	isb	sy
 8007bc2:	f3bf 8f4f 	dsb	sy
 8007bc6:	617b      	str	r3, [r7, #20]
 8007bc8:	e7fe      	b.n	8007bc8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d068      	beq.n	8007ca2 <pvPortMalloc+0x142>
 8007bd0:	4b41      	ldr	r3, [pc, #260]	; (8007cd8 <pvPortMalloc+0x178>)
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	687a      	ldr	r2, [r7, #4]
 8007bd6:	429a      	cmp	r2, r3
 8007bd8:	d863      	bhi.n	8007ca2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007bda:	4b40      	ldr	r3, [pc, #256]	; (8007cdc <pvPortMalloc+0x17c>)
 8007bdc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007bde:	4b3f      	ldr	r3, [pc, #252]	; (8007cdc <pvPortMalloc+0x17c>)
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007be4:	e004      	b.n	8007bf0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8007be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007be8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bf2:	685b      	ldr	r3, [r3, #4]
 8007bf4:	687a      	ldr	r2, [r7, #4]
 8007bf6:	429a      	cmp	r2, r3
 8007bf8:	d903      	bls.n	8007c02 <pvPortMalloc+0xa2>
 8007bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d1f1      	bne.n	8007be6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007c02:	4b33      	ldr	r3, [pc, #204]	; (8007cd0 <pvPortMalloc+0x170>)
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c08:	429a      	cmp	r2, r3
 8007c0a:	d04a      	beq.n	8007ca2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007c0c:	6a3b      	ldr	r3, [r7, #32]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	2208      	movs	r2, #8
 8007c12:	4413      	add	r3, r2
 8007c14:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c18:	681a      	ldr	r2, [r3, #0]
 8007c1a:	6a3b      	ldr	r3, [r7, #32]
 8007c1c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c20:	685a      	ldr	r2, [r3, #4]
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	1ad2      	subs	r2, r2, r3
 8007c26:	2308      	movs	r3, #8
 8007c28:	005b      	lsls	r3, r3, #1
 8007c2a:	429a      	cmp	r2, r3
 8007c2c:	d91e      	bls.n	8007c6c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007c2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	4413      	add	r3, r2
 8007c34:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007c36:	69bb      	ldr	r3, [r7, #24]
 8007c38:	f003 0307 	and.w	r3, r3, #7
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d009      	beq.n	8007c54 <pvPortMalloc+0xf4>
 8007c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c44:	f383 8811 	msr	BASEPRI, r3
 8007c48:	f3bf 8f6f 	isb	sy
 8007c4c:	f3bf 8f4f 	dsb	sy
 8007c50:	613b      	str	r3, [r7, #16]
 8007c52:	e7fe      	b.n	8007c52 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c56:	685a      	ldr	r2, [r3, #4]
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	1ad2      	subs	r2, r2, r3
 8007c5c:	69bb      	ldr	r3, [r7, #24]
 8007c5e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c62:	687a      	ldr	r2, [r7, #4]
 8007c64:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007c66:	69b8      	ldr	r0, [r7, #24]
 8007c68:	f000 f8f6 	bl	8007e58 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007c6c:	4b1a      	ldr	r3, [pc, #104]	; (8007cd8 <pvPortMalloc+0x178>)
 8007c6e:	681a      	ldr	r2, [r3, #0]
 8007c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c72:	685b      	ldr	r3, [r3, #4]
 8007c74:	1ad3      	subs	r3, r2, r3
 8007c76:	4a18      	ldr	r2, [pc, #96]	; (8007cd8 <pvPortMalloc+0x178>)
 8007c78:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007c7a:	4b17      	ldr	r3, [pc, #92]	; (8007cd8 <pvPortMalloc+0x178>)
 8007c7c:	681a      	ldr	r2, [r3, #0]
 8007c7e:	4b18      	ldr	r3, [pc, #96]	; (8007ce0 <pvPortMalloc+0x180>)
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	429a      	cmp	r2, r3
 8007c84:	d203      	bcs.n	8007c8e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007c86:	4b14      	ldr	r3, [pc, #80]	; (8007cd8 <pvPortMalloc+0x178>)
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	4a15      	ldr	r2, [pc, #84]	; (8007ce0 <pvPortMalloc+0x180>)
 8007c8c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c90:	685a      	ldr	r2, [r3, #4]
 8007c92:	4b10      	ldr	r3, [pc, #64]	; (8007cd4 <pvPortMalloc+0x174>)
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	431a      	orrs	r2, r3
 8007c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c9a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007ca2:	f7ff f889 	bl	8006db8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007ca6:	69fb      	ldr	r3, [r7, #28]
 8007ca8:	f003 0307 	and.w	r3, r3, #7
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d009      	beq.n	8007cc4 <pvPortMalloc+0x164>
 8007cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cb4:	f383 8811 	msr	BASEPRI, r3
 8007cb8:	f3bf 8f6f 	isb	sy
 8007cbc:	f3bf 8f4f 	dsb	sy
 8007cc0:	60fb      	str	r3, [r7, #12]
 8007cc2:	e7fe      	b.n	8007cc2 <pvPortMalloc+0x162>
	return pvReturn;
 8007cc4:	69fb      	ldr	r3, [r7, #28]
}
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	3728      	adds	r7, #40	; 0x28
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	bd80      	pop	{r7, pc}
 8007cce:	bf00      	nop
 8007cd0:	2000402c 	.word	0x2000402c
 8007cd4:	20004038 	.word	0x20004038
 8007cd8:	20004030 	.word	0x20004030
 8007cdc:	20004024 	.word	0x20004024
 8007ce0:	20004034 	.word	0x20004034

08007ce4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b086      	sub	sp, #24
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d046      	beq.n	8007d84 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007cf6:	2308      	movs	r3, #8
 8007cf8:	425b      	negs	r3, r3
 8007cfa:	697a      	ldr	r2, [r7, #20]
 8007cfc:	4413      	add	r3, r2
 8007cfe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007d00:	697b      	ldr	r3, [r7, #20]
 8007d02:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007d04:	693b      	ldr	r3, [r7, #16]
 8007d06:	685a      	ldr	r2, [r3, #4]
 8007d08:	4b20      	ldr	r3, [pc, #128]	; (8007d8c <vPortFree+0xa8>)
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	4013      	ands	r3, r2
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d109      	bne.n	8007d26 <vPortFree+0x42>
 8007d12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d16:	f383 8811 	msr	BASEPRI, r3
 8007d1a:	f3bf 8f6f 	isb	sy
 8007d1e:	f3bf 8f4f 	dsb	sy
 8007d22:	60fb      	str	r3, [r7, #12]
 8007d24:	e7fe      	b.n	8007d24 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007d26:	693b      	ldr	r3, [r7, #16]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d009      	beq.n	8007d42 <vPortFree+0x5e>
 8007d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d32:	f383 8811 	msr	BASEPRI, r3
 8007d36:	f3bf 8f6f 	isb	sy
 8007d3a:	f3bf 8f4f 	dsb	sy
 8007d3e:	60bb      	str	r3, [r7, #8]
 8007d40:	e7fe      	b.n	8007d40 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007d42:	693b      	ldr	r3, [r7, #16]
 8007d44:	685a      	ldr	r2, [r3, #4]
 8007d46:	4b11      	ldr	r3, [pc, #68]	; (8007d8c <vPortFree+0xa8>)
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	4013      	ands	r3, r2
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d019      	beq.n	8007d84 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007d50:	693b      	ldr	r3, [r7, #16]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d115      	bne.n	8007d84 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007d58:	693b      	ldr	r3, [r7, #16]
 8007d5a:	685a      	ldr	r2, [r3, #4]
 8007d5c:	4b0b      	ldr	r3, [pc, #44]	; (8007d8c <vPortFree+0xa8>)
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	43db      	mvns	r3, r3
 8007d62:	401a      	ands	r2, r3
 8007d64:	693b      	ldr	r3, [r7, #16]
 8007d66:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007d68:	f7ff f818 	bl	8006d9c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007d6c:	693b      	ldr	r3, [r7, #16]
 8007d6e:	685a      	ldr	r2, [r3, #4]
 8007d70:	4b07      	ldr	r3, [pc, #28]	; (8007d90 <vPortFree+0xac>)
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	4413      	add	r3, r2
 8007d76:	4a06      	ldr	r2, [pc, #24]	; (8007d90 <vPortFree+0xac>)
 8007d78:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007d7a:	6938      	ldr	r0, [r7, #16]
 8007d7c:	f000 f86c 	bl	8007e58 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007d80:	f7ff f81a 	bl	8006db8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007d84:	bf00      	nop
 8007d86:	3718      	adds	r7, #24
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	bd80      	pop	{r7, pc}
 8007d8c:	20004038 	.word	0x20004038
 8007d90:	20004030 	.word	0x20004030

08007d94 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007d94:	b480      	push	{r7}
 8007d96:	b085      	sub	sp, #20
 8007d98:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007d9a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007d9e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007da0:	4b27      	ldr	r3, [pc, #156]	; (8007e40 <prvHeapInit+0xac>)
 8007da2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	f003 0307 	and.w	r3, r3, #7
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d00c      	beq.n	8007dc8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	3307      	adds	r3, #7
 8007db2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	f023 0307 	bic.w	r3, r3, #7
 8007dba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007dbc:	68ba      	ldr	r2, [r7, #8]
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	1ad3      	subs	r3, r2, r3
 8007dc2:	4a1f      	ldr	r2, [pc, #124]	; (8007e40 <prvHeapInit+0xac>)
 8007dc4:	4413      	add	r3, r2
 8007dc6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007dcc:	4a1d      	ldr	r2, [pc, #116]	; (8007e44 <prvHeapInit+0xb0>)
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007dd2:	4b1c      	ldr	r3, [pc, #112]	; (8007e44 <prvHeapInit+0xb0>)
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	68ba      	ldr	r2, [r7, #8]
 8007ddc:	4413      	add	r3, r2
 8007dde:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007de0:	2208      	movs	r2, #8
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	1a9b      	subs	r3, r3, r2
 8007de6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	f023 0307 	bic.w	r3, r3, #7
 8007dee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	4a15      	ldr	r2, [pc, #84]	; (8007e48 <prvHeapInit+0xb4>)
 8007df4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007df6:	4b14      	ldr	r3, [pc, #80]	; (8007e48 <prvHeapInit+0xb4>)
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007dfe:	4b12      	ldr	r3, [pc, #72]	; (8007e48 <prvHeapInit+0xb4>)
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	2200      	movs	r2, #0
 8007e04:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	68fa      	ldr	r2, [r7, #12]
 8007e0e:	1ad2      	subs	r2, r2, r3
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007e14:	4b0c      	ldr	r3, [pc, #48]	; (8007e48 <prvHeapInit+0xb4>)
 8007e16:	681a      	ldr	r2, [r3, #0]
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	685b      	ldr	r3, [r3, #4]
 8007e20:	4a0a      	ldr	r2, [pc, #40]	; (8007e4c <prvHeapInit+0xb8>)
 8007e22:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	685b      	ldr	r3, [r3, #4]
 8007e28:	4a09      	ldr	r2, [pc, #36]	; (8007e50 <prvHeapInit+0xbc>)
 8007e2a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007e2c:	4b09      	ldr	r3, [pc, #36]	; (8007e54 <prvHeapInit+0xc0>)
 8007e2e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007e32:	601a      	str	r2, [r3, #0]
}
 8007e34:	bf00      	nop
 8007e36:	3714      	adds	r7, #20
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3e:	4770      	bx	lr
 8007e40:	20000424 	.word	0x20000424
 8007e44:	20004024 	.word	0x20004024
 8007e48:	2000402c 	.word	0x2000402c
 8007e4c:	20004034 	.word	0x20004034
 8007e50:	20004030 	.word	0x20004030
 8007e54:	20004038 	.word	0x20004038

08007e58 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007e58:	b480      	push	{r7}
 8007e5a:	b085      	sub	sp, #20
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007e60:	4b28      	ldr	r3, [pc, #160]	; (8007f04 <prvInsertBlockIntoFreeList+0xac>)
 8007e62:	60fb      	str	r3, [r7, #12]
 8007e64:	e002      	b.n	8007e6c <prvInsertBlockIntoFreeList+0x14>
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	60fb      	str	r3, [r7, #12]
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	687a      	ldr	r2, [r7, #4]
 8007e72:	429a      	cmp	r2, r3
 8007e74:	d8f7      	bhi.n	8007e66 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	685b      	ldr	r3, [r3, #4]
 8007e7e:	68ba      	ldr	r2, [r7, #8]
 8007e80:	4413      	add	r3, r2
 8007e82:	687a      	ldr	r2, [r7, #4]
 8007e84:	429a      	cmp	r2, r3
 8007e86:	d108      	bne.n	8007e9a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	685a      	ldr	r2, [r3, #4]
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	685b      	ldr	r3, [r3, #4]
 8007e90:	441a      	add	r2, r3
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	685b      	ldr	r3, [r3, #4]
 8007ea2:	68ba      	ldr	r2, [r7, #8]
 8007ea4:	441a      	add	r2, r3
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	429a      	cmp	r2, r3
 8007eac:	d118      	bne.n	8007ee0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	681a      	ldr	r2, [r3, #0]
 8007eb2:	4b15      	ldr	r3, [pc, #84]	; (8007f08 <prvInsertBlockIntoFreeList+0xb0>)
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	429a      	cmp	r2, r3
 8007eb8:	d00d      	beq.n	8007ed6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	685a      	ldr	r2, [r3, #4]
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	685b      	ldr	r3, [r3, #4]
 8007ec4:	441a      	add	r2, r3
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	681a      	ldr	r2, [r3, #0]
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	601a      	str	r2, [r3, #0]
 8007ed4:	e008      	b.n	8007ee8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007ed6:	4b0c      	ldr	r3, [pc, #48]	; (8007f08 <prvInsertBlockIntoFreeList+0xb0>)
 8007ed8:	681a      	ldr	r2, [r3, #0]
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	601a      	str	r2, [r3, #0]
 8007ede:	e003      	b.n	8007ee8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	681a      	ldr	r2, [r3, #0]
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007ee8:	68fa      	ldr	r2, [r7, #12]
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	429a      	cmp	r2, r3
 8007eee:	d002      	beq.n	8007ef6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	687a      	ldr	r2, [r7, #4]
 8007ef4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007ef6:	bf00      	nop
 8007ef8:	3714      	adds	r7, #20
 8007efa:	46bd      	mov	sp, r7
 8007efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f00:	4770      	bx	lr
 8007f02:	bf00      	nop
 8007f04:	20004024 	.word	0x20004024
 8007f08:	2000402c 	.word	0x2000402c

08007f0c <__errno>:
 8007f0c:	4b01      	ldr	r3, [pc, #4]	; (8007f14 <__errno+0x8>)
 8007f0e:	6818      	ldr	r0, [r3, #0]
 8007f10:	4770      	bx	lr
 8007f12:	bf00      	nop
 8007f14:	20000010 	.word	0x20000010

08007f18 <__libc_init_array>:
 8007f18:	b570      	push	{r4, r5, r6, lr}
 8007f1a:	4e0d      	ldr	r6, [pc, #52]	; (8007f50 <__libc_init_array+0x38>)
 8007f1c:	4c0d      	ldr	r4, [pc, #52]	; (8007f54 <__libc_init_array+0x3c>)
 8007f1e:	1ba4      	subs	r4, r4, r6
 8007f20:	10a4      	asrs	r4, r4, #2
 8007f22:	2500      	movs	r5, #0
 8007f24:	42a5      	cmp	r5, r4
 8007f26:	d109      	bne.n	8007f3c <__libc_init_array+0x24>
 8007f28:	4e0b      	ldr	r6, [pc, #44]	; (8007f58 <__libc_init_array+0x40>)
 8007f2a:	4c0c      	ldr	r4, [pc, #48]	; (8007f5c <__libc_init_array+0x44>)
 8007f2c:	f001 f882 	bl	8009034 <_init>
 8007f30:	1ba4      	subs	r4, r4, r6
 8007f32:	10a4      	asrs	r4, r4, #2
 8007f34:	2500      	movs	r5, #0
 8007f36:	42a5      	cmp	r5, r4
 8007f38:	d105      	bne.n	8007f46 <__libc_init_array+0x2e>
 8007f3a:	bd70      	pop	{r4, r5, r6, pc}
 8007f3c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007f40:	4798      	blx	r3
 8007f42:	3501      	adds	r5, #1
 8007f44:	e7ee      	b.n	8007f24 <__libc_init_array+0xc>
 8007f46:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007f4a:	4798      	blx	r3
 8007f4c:	3501      	adds	r5, #1
 8007f4e:	e7f2      	b.n	8007f36 <__libc_init_array+0x1e>
 8007f50:	08009180 	.word	0x08009180
 8007f54:	08009180 	.word	0x08009180
 8007f58:	08009180 	.word	0x08009180
 8007f5c:	08009184 	.word	0x08009184

08007f60 <memcpy>:
 8007f60:	b510      	push	{r4, lr}
 8007f62:	1e43      	subs	r3, r0, #1
 8007f64:	440a      	add	r2, r1
 8007f66:	4291      	cmp	r1, r2
 8007f68:	d100      	bne.n	8007f6c <memcpy+0xc>
 8007f6a:	bd10      	pop	{r4, pc}
 8007f6c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007f70:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007f74:	e7f7      	b.n	8007f66 <memcpy+0x6>

08007f76 <memset>:
 8007f76:	4402      	add	r2, r0
 8007f78:	4603      	mov	r3, r0
 8007f7a:	4293      	cmp	r3, r2
 8007f7c:	d100      	bne.n	8007f80 <memset+0xa>
 8007f7e:	4770      	bx	lr
 8007f80:	f803 1b01 	strb.w	r1, [r3], #1
 8007f84:	e7f9      	b.n	8007f7a <memset+0x4>
	...

08007f88 <pow>:
 8007f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f8c:	ed2d 8b04 	vpush	{d8-d9}
 8007f90:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8008264 <pow+0x2dc>
 8007f94:	b08d      	sub	sp, #52	; 0x34
 8007f96:	ec57 6b10 	vmov	r6, r7, d0
 8007f9a:	ec55 4b11 	vmov	r4, r5, d1
 8007f9e:	f000 f963 	bl	8008268 <__ieee754_pow>
 8007fa2:	f999 3000 	ldrsb.w	r3, [r9]
 8007fa6:	9300      	str	r3, [sp, #0]
 8007fa8:	3301      	adds	r3, #1
 8007faa:	eeb0 8a40 	vmov.f32	s16, s0
 8007fae:	eef0 8a60 	vmov.f32	s17, s1
 8007fb2:	46c8      	mov	r8, r9
 8007fb4:	d05f      	beq.n	8008076 <pow+0xee>
 8007fb6:	4622      	mov	r2, r4
 8007fb8:	462b      	mov	r3, r5
 8007fba:	4620      	mov	r0, r4
 8007fbc:	4629      	mov	r1, r5
 8007fbe:	f7f8 fd5d 	bl	8000a7c <__aeabi_dcmpun>
 8007fc2:	4683      	mov	fp, r0
 8007fc4:	2800      	cmp	r0, #0
 8007fc6:	d156      	bne.n	8008076 <pow+0xee>
 8007fc8:	4632      	mov	r2, r6
 8007fca:	463b      	mov	r3, r7
 8007fcc:	4630      	mov	r0, r6
 8007fce:	4639      	mov	r1, r7
 8007fd0:	f7f8 fd54 	bl	8000a7c <__aeabi_dcmpun>
 8007fd4:	9001      	str	r0, [sp, #4]
 8007fd6:	b1e8      	cbz	r0, 8008014 <pow+0x8c>
 8007fd8:	2200      	movs	r2, #0
 8007fda:	2300      	movs	r3, #0
 8007fdc:	4620      	mov	r0, r4
 8007fde:	4629      	mov	r1, r5
 8007fe0:	f7f8 fd1a 	bl	8000a18 <__aeabi_dcmpeq>
 8007fe4:	2800      	cmp	r0, #0
 8007fe6:	d046      	beq.n	8008076 <pow+0xee>
 8007fe8:	2301      	movs	r3, #1
 8007fea:	9302      	str	r3, [sp, #8]
 8007fec:	4b96      	ldr	r3, [pc, #600]	; (8008248 <pow+0x2c0>)
 8007fee:	9303      	str	r3, [sp, #12]
 8007ff0:	4b96      	ldr	r3, [pc, #600]	; (800824c <pow+0x2c4>)
 8007ff2:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007ffc:	9b00      	ldr	r3, [sp, #0]
 8007ffe:	2b02      	cmp	r3, #2
 8008000:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8008004:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8008008:	d033      	beq.n	8008072 <pow+0xea>
 800800a:	a802      	add	r0, sp, #8
 800800c:	f000 fefb 	bl	8008e06 <matherr>
 8008010:	bb48      	cbnz	r0, 8008066 <pow+0xde>
 8008012:	e05d      	b.n	80080d0 <pow+0x148>
 8008014:	f04f 0a00 	mov.w	sl, #0
 8008018:	f04f 0b00 	mov.w	fp, #0
 800801c:	4652      	mov	r2, sl
 800801e:	465b      	mov	r3, fp
 8008020:	4630      	mov	r0, r6
 8008022:	4639      	mov	r1, r7
 8008024:	f7f8 fcf8 	bl	8000a18 <__aeabi_dcmpeq>
 8008028:	ec4b ab19 	vmov	d9, sl, fp
 800802c:	2800      	cmp	r0, #0
 800802e:	d054      	beq.n	80080da <pow+0x152>
 8008030:	4652      	mov	r2, sl
 8008032:	465b      	mov	r3, fp
 8008034:	4620      	mov	r0, r4
 8008036:	4629      	mov	r1, r5
 8008038:	f7f8 fcee 	bl	8000a18 <__aeabi_dcmpeq>
 800803c:	4680      	mov	r8, r0
 800803e:	b318      	cbz	r0, 8008088 <pow+0x100>
 8008040:	2301      	movs	r3, #1
 8008042:	9302      	str	r3, [sp, #8]
 8008044:	4b80      	ldr	r3, [pc, #512]	; (8008248 <pow+0x2c0>)
 8008046:	9303      	str	r3, [sp, #12]
 8008048:	9b01      	ldr	r3, [sp, #4]
 800804a:	930a      	str	r3, [sp, #40]	; 0x28
 800804c:	9b00      	ldr	r3, [sp, #0]
 800804e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8008052:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8008056:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d0d5      	beq.n	800800a <pow+0x82>
 800805e:	4b7b      	ldr	r3, [pc, #492]	; (800824c <pow+0x2c4>)
 8008060:	2200      	movs	r2, #0
 8008062:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008066:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008068:	b11b      	cbz	r3, 8008072 <pow+0xea>
 800806a:	f7ff ff4f 	bl	8007f0c <__errno>
 800806e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008070:	6003      	str	r3, [r0, #0]
 8008072:	ed9d 8b08 	vldr	d8, [sp, #32]
 8008076:	eeb0 0a48 	vmov.f32	s0, s16
 800807a:	eef0 0a68 	vmov.f32	s1, s17
 800807e:	b00d      	add	sp, #52	; 0x34
 8008080:	ecbd 8b04 	vpop	{d8-d9}
 8008084:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008088:	ec45 4b10 	vmov	d0, r4, r5
 800808c:	f000 feb3 	bl	8008df6 <finite>
 8008090:	2800      	cmp	r0, #0
 8008092:	d0f0      	beq.n	8008076 <pow+0xee>
 8008094:	4652      	mov	r2, sl
 8008096:	465b      	mov	r3, fp
 8008098:	4620      	mov	r0, r4
 800809a:	4629      	mov	r1, r5
 800809c:	f7f8 fcc6 	bl	8000a2c <__aeabi_dcmplt>
 80080a0:	2800      	cmp	r0, #0
 80080a2:	d0e8      	beq.n	8008076 <pow+0xee>
 80080a4:	2301      	movs	r3, #1
 80080a6:	9302      	str	r3, [sp, #8]
 80080a8:	4b67      	ldr	r3, [pc, #412]	; (8008248 <pow+0x2c0>)
 80080aa:	9303      	str	r3, [sp, #12]
 80080ac:	f999 3000 	ldrsb.w	r3, [r9]
 80080b0:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 80080b4:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80080b8:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80080bc:	b913      	cbnz	r3, 80080c4 <pow+0x13c>
 80080be:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80080c2:	e7a2      	b.n	800800a <pow+0x82>
 80080c4:	4962      	ldr	r1, [pc, #392]	; (8008250 <pow+0x2c8>)
 80080c6:	2000      	movs	r0, #0
 80080c8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80080cc:	2b02      	cmp	r3, #2
 80080ce:	d19c      	bne.n	800800a <pow+0x82>
 80080d0:	f7ff ff1c 	bl	8007f0c <__errno>
 80080d4:	2321      	movs	r3, #33	; 0x21
 80080d6:	6003      	str	r3, [r0, #0]
 80080d8:	e7c5      	b.n	8008066 <pow+0xde>
 80080da:	eeb0 0a48 	vmov.f32	s0, s16
 80080de:	eef0 0a68 	vmov.f32	s1, s17
 80080e2:	f000 fe88 	bl	8008df6 <finite>
 80080e6:	9000      	str	r0, [sp, #0]
 80080e8:	2800      	cmp	r0, #0
 80080ea:	f040 8081 	bne.w	80081f0 <pow+0x268>
 80080ee:	ec47 6b10 	vmov	d0, r6, r7
 80080f2:	f000 fe80 	bl	8008df6 <finite>
 80080f6:	2800      	cmp	r0, #0
 80080f8:	d07a      	beq.n	80081f0 <pow+0x268>
 80080fa:	ec45 4b10 	vmov	d0, r4, r5
 80080fe:	f000 fe7a 	bl	8008df6 <finite>
 8008102:	2800      	cmp	r0, #0
 8008104:	d074      	beq.n	80081f0 <pow+0x268>
 8008106:	ec53 2b18 	vmov	r2, r3, d8
 800810a:	ee18 0a10 	vmov	r0, s16
 800810e:	4619      	mov	r1, r3
 8008110:	f7f8 fcb4 	bl	8000a7c <__aeabi_dcmpun>
 8008114:	f999 9000 	ldrsb.w	r9, [r9]
 8008118:	4b4b      	ldr	r3, [pc, #300]	; (8008248 <pow+0x2c0>)
 800811a:	b1b0      	cbz	r0, 800814a <pow+0x1c2>
 800811c:	2201      	movs	r2, #1
 800811e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008122:	9b00      	ldr	r3, [sp, #0]
 8008124:	930a      	str	r3, [sp, #40]	; 0x28
 8008126:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800812a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800812e:	f1b9 0f00 	cmp.w	r9, #0
 8008132:	d0c4      	beq.n	80080be <pow+0x136>
 8008134:	4652      	mov	r2, sl
 8008136:	465b      	mov	r3, fp
 8008138:	4650      	mov	r0, sl
 800813a:	4659      	mov	r1, fp
 800813c:	f7f8 fb2e 	bl	800079c <__aeabi_ddiv>
 8008140:	f1b9 0f02 	cmp.w	r9, #2
 8008144:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008148:	e7c1      	b.n	80080ce <pow+0x146>
 800814a:	2203      	movs	r2, #3
 800814c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008150:	900a      	str	r0, [sp, #40]	; 0x28
 8008152:	4629      	mov	r1, r5
 8008154:	4620      	mov	r0, r4
 8008156:	2200      	movs	r2, #0
 8008158:	4b3e      	ldr	r3, [pc, #248]	; (8008254 <pow+0x2cc>)
 800815a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800815e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8008162:	f7f8 f9f1 	bl	8000548 <__aeabi_dmul>
 8008166:	4604      	mov	r4, r0
 8008168:	460d      	mov	r5, r1
 800816a:	f1b9 0f00 	cmp.w	r9, #0
 800816e:	d124      	bne.n	80081ba <pow+0x232>
 8008170:	4b39      	ldr	r3, [pc, #228]	; (8008258 <pow+0x2d0>)
 8008172:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8008176:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800817a:	4630      	mov	r0, r6
 800817c:	4652      	mov	r2, sl
 800817e:	465b      	mov	r3, fp
 8008180:	4639      	mov	r1, r7
 8008182:	f7f8 fc53 	bl	8000a2c <__aeabi_dcmplt>
 8008186:	2800      	cmp	r0, #0
 8008188:	d056      	beq.n	8008238 <pow+0x2b0>
 800818a:	ec45 4b10 	vmov	d0, r4, r5
 800818e:	f000 fe47 	bl	8008e20 <rint>
 8008192:	4622      	mov	r2, r4
 8008194:	462b      	mov	r3, r5
 8008196:	ec51 0b10 	vmov	r0, r1, d0
 800819a:	f7f8 fc3d 	bl	8000a18 <__aeabi_dcmpeq>
 800819e:	b920      	cbnz	r0, 80081aa <pow+0x222>
 80081a0:	4b2e      	ldr	r3, [pc, #184]	; (800825c <pow+0x2d4>)
 80081a2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80081a6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80081aa:	f998 3000 	ldrsb.w	r3, [r8]
 80081ae:	2b02      	cmp	r3, #2
 80081b0:	d142      	bne.n	8008238 <pow+0x2b0>
 80081b2:	f7ff feab 	bl	8007f0c <__errno>
 80081b6:	2322      	movs	r3, #34	; 0x22
 80081b8:	e78d      	b.n	80080d6 <pow+0x14e>
 80081ba:	4b29      	ldr	r3, [pc, #164]	; (8008260 <pow+0x2d8>)
 80081bc:	2200      	movs	r2, #0
 80081be:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80081c2:	4630      	mov	r0, r6
 80081c4:	4652      	mov	r2, sl
 80081c6:	465b      	mov	r3, fp
 80081c8:	4639      	mov	r1, r7
 80081ca:	f7f8 fc2f 	bl	8000a2c <__aeabi_dcmplt>
 80081ce:	2800      	cmp	r0, #0
 80081d0:	d0eb      	beq.n	80081aa <pow+0x222>
 80081d2:	ec45 4b10 	vmov	d0, r4, r5
 80081d6:	f000 fe23 	bl	8008e20 <rint>
 80081da:	4622      	mov	r2, r4
 80081dc:	462b      	mov	r3, r5
 80081de:	ec51 0b10 	vmov	r0, r1, d0
 80081e2:	f7f8 fc19 	bl	8000a18 <__aeabi_dcmpeq>
 80081e6:	2800      	cmp	r0, #0
 80081e8:	d1df      	bne.n	80081aa <pow+0x222>
 80081ea:	2200      	movs	r2, #0
 80081ec:	4b18      	ldr	r3, [pc, #96]	; (8008250 <pow+0x2c8>)
 80081ee:	e7da      	b.n	80081a6 <pow+0x21e>
 80081f0:	2200      	movs	r2, #0
 80081f2:	2300      	movs	r3, #0
 80081f4:	ec51 0b18 	vmov	r0, r1, d8
 80081f8:	f7f8 fc0e 	bl	8000a18 <__aeabi_dcmpeq>
 80081fc:	2800      	cmp	r0, #0
 80081fe:	f43f af3a 	beq.w	8008076 <pow+0xee>
 8008202:	ec47 6b10 	vmov	d0, r6, r7
 8008206:	f000 fdf6 	bl	8008df6 <finite>
 800820a:	2800      	cmp	r0, #0
 800820c:	f43f af33 	beq.w	8008076 <pow+0xee>
 8008210:	ec45 4b10 	vmov	d0, r4, r5
 8008214:	f000 fdef 	bl	8008df6 <finite>
 8008218:	2800      	cmp	r0, #0
 800821a:	f43f af2c 	beq.w	8008076 <pow+0xee>
 800821e:	2304      	movs	r3, #4
 8008220:	9302      	str	r3, [sp, #8]
 8008222:	4b09      	ldr	r3, [pc, #36]	; (8008248 <pow+0x2c0>)
 8008224:	9303      	str	r3, [sp, #12]
 8008226:	2300      	movs	r3, #0
 8008228:	930a      	str	r3, [sp, #40]	; 0x28
 800822a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800822e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8008232:	ed8d 9b08 	vstr	d9, [sp, #32]
 8008236:	e7b8      	b.n	80081aa <pow+0x222>
 8008238:	a802      	add	r0, sp, #8
 800823a:	f000 fde4 	bl	8008e06 <matherr>
 800823e:	2800      	cmp	r0, #0
 8008240:	f47f af11 	bne.w	8008066 <pow+0xde>
 8008244:	e7b5      	b.n	80081b2 <pow+0x22a>
 8008246:	bf00      	nop
 8008248:	08009134 	.word	0x08009134
 800824c:	3ff00000 	.word	0x3ff00000
 8008250:	fff00000 	.word	0xfff00000
 8008254:	3fe00000 	.word	0x3fe00000
 8008258:	47efffff 	.word	0x47efffff
 800825c:	c7efffff 	.word	0xc7efffff
 8008260:	7ff00000 	.word	0x7ff00000
 8008264:	20000074 	.word	0x20000074

08008268 <__ieee754_pow>:
 8008268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800826c:	b091      	sub	sp, #68	; 0x44
 800826e:	ed8d 1b00 	vstr	d1, [sp]
 8008272:	e9dd 2900 	ldrd	r2, r9, [sp]
 8008276:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800827a:	ea58 0302 	orrs.w	r3, r8, r2
 800827e:	ec57 6b10 	vmov	r6, r7, d0
 8008282:	f000 84be 	beq.w	8008c02 <__ieee754_pow+0x99a>
 8008286:	4b7a      	ldr	r3, [pc, #488]	; (8008470 <__ieee754_pow+0x208>)
 8008288:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800828c:	429c      	cmp	r4, r3
 800828e:	463d      	mov	r5, r7
 8008290:	ee10 aa10 	vmov	sl, s0
 8008294:	dc09      	bgt.n	80082aa <__ieee754_pow+0x42>
 8008296:	d103      	bne.n	80082a0 <__ieee754_pow+0x38>
 8008298:	b93e      	cbnz	r6, 80082aa <__ieee754_pow+0x42>
 800829a:	45a0      	cmp	r8, r4
 800829c:	dc0d      	bgt.n	80082ba <__ieee754_pow+0x52>
 800829e:	e001      	b.n	80082a4 <__ieee754_pow+0x3c>
 80082a0:	4598      	cmp	r8, r3
 80082a2:	dc02      	bgt.n	80082aa <__ieee754_pow+0x42>
 80082a4:	4598      	cmp	r8, r3
 80082a6:	d10e      	bne.n	80082c6 <__ieee754_pow+0x5e>
 80082a8:	b16a      	cbz	r2, 80082c6 <__ieee754_pow+0x5e>
 80082aa:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80082ae:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80082b2:	ea54 030a 	orrs.w	r3, r4, sl
 80082b6:	f000 84a4 	beq.w	8008c02 <__ieee754_pow+0x99a>
 80082ba:	486e      	ldr	r0, [pc, #440]	; (8008474 <__ieee754_pow+0x20c>)
 80082bc:	b011      	add	sp, #68	; 0x44
 80082be:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082c2:	f000 bda5 	b.w	8008e10 <nan>
 80082c6:	2d00      	cmp	r5, #0
 80082c8:	da53      	bge.n	8008372 <__ieee754_pow+0x10a>
 80082ca:	4b6b      	ldr	r3, [pc, #428]	; (8008478 <__ieee754_pow+0x210>)
 80082cc:	4598      	cmp	r8, r3
 80082ce:	dc4d      	bgt.n	800836c <__ieee754_pow+0x104>
 80082d0:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80082d4:	4598      	cmp	r8, r3
 80082d6:	dd4c      	ble.n	8008372 <__ieee754_pow+0x10a>
 80082d8:	ea4f 5328 	mov.w	r3, r8, asr #20
 80082dc:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80082e0:	2b14      	cmp	r3, #20
 80082e2:	dd26      	ble.n	8008332 <__ieee754_pow+0xca>
 80082e4:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80082e8:	fa22 f103 	lsr.w	r1, r2, r3
 80082ec:	fa01 f303 	lsl.w	r3, r1, r3
 80082f0:	4293      	cmp	r3, r2
 80082f2:	d13e      	bne.n	8008372 <__ieee754_pow+0x10a>
 80082f4:	f001 0101 	and.w	r1, r1, #1
 80082f8:	f1c1 0b02 	rsb	fp, r1, #2
 80082fc:	2a00      	cmp	r2, #0
 80082fe:	d15b      	bne.n	80083b8 <__ieee754_pow+0x150>
 8008300:	4b5b      	ldr	r3, [pc, #364]	; (8008470 <__ieee754_pow+0x208>)
 8008302:	4598      	cmp	r8, r3
 8008304:	d124      	bne.n	8008350 <__ieee754_pow+0xe8>
 8008306:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800830a:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800830e:	ea53 030a 	orrs.w	r3, r3, sl
 8008312:	f000 8476 	beq.w	8008c02 <__ieee754_pow+0x99a>
 8008316:	4b59      	ldr	r3, [pc, #356]	; (800847c <__ieee754_pow+0x214>)
 8008318:	429c      	cmp	r4, r3
 800831a:	dd2d      	ble.n	8008378 <__ieee754_pow+0x110>
 800831c:	f1b9 0f00 	cmp.w	r9, #0
 8008320:	f280 8473 	bge.w	8008c0a <__ieee754_pow+0x9a2>
 8008324:	2000      	movs	r0, #0
 8008326:	2100      	movs	r1, #0
 8008328:	ec41 0b10 	vmov	d0, r0, r1
 800832c:	b011      	add	sp, #68	; 0x44
 800832e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008332:	2a00      	cmp	r2, #0
 8008334:	d13e      	bne.n	80083b4 <__ieee754_pow+0x14c>
 8008336:	f1c3 0314 	rsb	r3, r3, #20
 800833a:	fa48 f103 	asr.w	r1, r8, r3
 800833e:	fa01 f303 	lsl.w	r3, r1, r3
 8008342:	4543      	cmp	r3, r8
 8008344:	f040 8469 	bne.w	8008c1a <__ieee754_pow+0x9b2>
 8008348:	f001 0101 	and.w	r1, r1, #1
 800834c:	f1c1 0b02 	rsb	fp, r1, #2
 8008350:	4b4b      	ldr	r3, [pc, #300]	; (8008480 <__ieee754_pow+0x218>)
 8008352:	4598      	cmp	r8, r3
 8008354:	d118      	bne.n	8008388 <__ieee754_pow+0x120>
 8008356:	f1b9 0f00 	cmp.w	r9, #0
 800835a:	f280 845a 	bge.w	8008c12 <__ieee754_pow+0x9aa>
 800835e:	4948      	ldr	r1, [pc, #288]	; (8008480 <__ieee754_pow+0x218>)
 8008360:	4632      	mov	r2, r6
 8008362:	463b      	mov	r3, r7
 8008364:	2000      	movs	r0, #0
 8008366:	f7f8 fa19 	bl	800079c <__aeabi_ddiv>
 800836a:	e7dd      	b.n	8008328 <__ieee754_pow+0xc0>
 800836c:	f04f 0b02 	mov.w	fp, #2
 8008370:	e7c4      	b.n	80082fc <__ieee754_pow+0x94>
 8008372:	f04f 0b00 	mov.w	fp, #0
 8008376:	e7c1      	b.n	80082fc <__ieee754_pow+0x94>
 8008378:	f1b9 0f00 	cmp.w	r9, #0
 800837c:	dad2      	bge.n	8008324 <__ieee754_pow+0xbc>
 800837e:	e9dd 0300 	ldrd	r0, r3, [sp]
 8008382:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8008386:	e7cf      	b.n	8008328 <__ieee754_pow+0xc0>
 8008388:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800838c:	d106      	bne.n	800839c <__ieee754_pow+0x134>
 800838e:	4632      	mov	r2, r6
 8008390:	463b      	mov	r3, r7
 8008392:	4610      	mov	r0, r2
 8008394:	4619      	mov	r1, r3
 8008396:	f7f8 f8d7 	bl	8000548 <__aeabi_dmul>
 800839a:	e7c5      	b.n	8008328 <__ieee754_pow+0xc0>
 800839c:	4b39      	ldr	r3, [pc, #228]	; (8008484 <__ieee754_pow+0x21c>)
 800839e:	4599      	cmp	r9, r3
 80083a0:	d10a      	bne.n	80083b8 <__ieee754_pow+0x150>
 80083a2:	2d00      	cmp	r5, #0
 80083a4:	db08      	blt.n	80083b8 <__ieee754_pow+0x150>
 80083a6:	ec47 6b10 	vmov	d0, r6, r7
 80083aa:	b011      	add	sp, #68	; 0x44
 80083ac:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083b0:	f000 bc68 	b.w	8008c84 <__ieee754_sqrt>
 80083b4:	f04f 0b00 	mov.w	fp, #0
 80083b8:	ec47 6b10 	vmov	d0, r6, r7
 80083bc:	f000 fd12 	bl	8008de4 <fabs>
 80083c0:	ec51 0b10 	vmov	r0, r1, d0
 80083c4:	f1ba 0f00 	cmp.w	sl, #0
 80083c8:	d127      	bne.n	800841a <__ieee754_pow+0x1b2>
 80083ca:	b124      	cbz	r4, 80083d6 <__ieee754_pow+0x16e>
 80083cc:	4b2c      	ldr	r3, [pc, #176]	; (8008480 <__ieee754_pow+0x218>)
 80083ce:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80083d2:	429a      	cmp	r2, r3
 80083d4:	d121      	bne.n	800841a <__ieee754_pow+0x1b2>
 80083d6:	f1b9 0f00 	cmp.w	r9, #0
 80083da:	da05      	bge.n	80083e8 <__ieee754_pow+0x180>
 80083dc:	4602      	mov	r2, r0
 80083de:	460b      	mov	r3, r1
 80083e0:	2000      	movs	r0, #0
 80083e2:	4927      	ldr	r1, [pc, #156]	; (8008480 <__ieee754_pow+0x218>)
 80083e4:	f7f8 f9da 	bl	800079c <__aeabi_ddiv>
 80083e8:	2d00      	cmp	r5, #0
 80083ea:	da9d      	bge.n	8008328 <__ieee754_pow+0xc0>
 80083ec:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80083f0:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80083f4:	ea54 030b 	orrs.w	r3, r4, fp
 80083f8:	d108      	bne.n	800840c <__ieee754_pow+0x1a4>
 80083fa:	4602      	mov	r2, r0
 80083fc:	460b      	mov	r3, r1
 80083fe:	4610      	mov	r0, r2
 8008400:	4619      	mov	r1, r3
 8008402:	f7f7 fee9 	bl	80001d8 <__aeabi_dsub>
 8008406:	4602      	mov	r2, r0
 8008408:	460b      	mov	r3, r1
 800840a:	e7ac      	b.n	8008366 <__ieee754_pow+0xfe>
 800840c:	f1bb 0f01 	cmp.w	fp, #1
 8008410:	d18a      	bne.n	8008328 <__ieee754_pow+0xc0>
 8008412:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008416:	4619      	mov	r1, r3
 8008418:	e786      	b.n	8008328 <__ieee754_pow+0xc0>
 800841a:	0fed      	lsrs	r5, r5, #31
 800841c:	1e6b      	subs	r3, r5, #1
 800841e:	930d      	str	r3, [sp, #52]	; 0x34
 8008420:	ea5b 0303 	orrs.w	r3, fp, r3
 8008424:	d102      	bne.n	800842c <__ieee754_pow+0x1c4>
 8008426:	4632      	mov	r2, r6
 8008428:	463b      	mov	r3, r7
 800842a:	e7e8      	b.n	80083fe <__ieee754_pow+0x196>
 800842c:	4b16      	ldr	r3, [pc, #88]	; (8008488 <__ieee754_pow+0x220>)
 800842e:	4598      	cmp	r8, r3
 8008430:	f340 80fe 	ble.w	8008630 <__ieee754_pow+0x3c8>
 8008434:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8008438:	4598      	cmp	r8, r3
 800843a:	dd0a      	ble.n	8008452 <__ieee754_pow+0x1ea>
 800843c:	4b0f      	ldr	r3, [pc, #60]	; (800847c <__ieee754_pow+0x214>)
 800843e:	429c      	cmp	r4, r3
 8008440:	dc0d      	bgt.n	800845e <__ieee754_pow+0x1f6>
 8008442:	f1b9 0f00 	cmp.w	r9, #0
 8008446:	f6bf af6d 	bge.w	8008324 <__ieee754_pow+0xbc>
 800844a:	a307      	add	r3, pc, #28	; (adr r3, 8008468 <__ieee754_pow+0x200>)
 800844c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008450:	e79f      	b.n	8008392 <__ieee754_pow+0x12a>
 8008452:	4b0e      	ldr	r3, [pc, #56]	; (800848c <__ieee754_pow+0x224>)
 8008454:	429c      	cmp	r4, r3
 8008456:	ddf4      	ble.n	8008442 <__ieee754_pow+0x1da>
 8008458:	4b09      	ldr	r3, [pc, #36]	; (8008480 <__ieee754_pow+0x218>)
 800845a:	429c      	cmp	r4, r3
 800845c:	dd18      	ble.n	8008490 <__ieee754_pow+0x228>
 800845e:	f1b9 0f00 	cmp.w	r9, #0
 8008462:	dcf2      	bgt.n	800844a <__ieee754_pow+0x1e2>
 8008464:	e75e      	b.n	8008324 <__ieee754_pow+0xbc>
 8008466:	bf00      	nop
 8008468:	8800759c 	.word	0x8800759c
 800846c:	7e37e43c 	.word	0x7e37e43c
 8008470:	7ff00000 	.word	0x7ff00000
 8008474:	08009137 	.word	0x08009137
 8008478:	433fffff 	.word	0x433fffff
 800847c:	3fefffff 	.word	0x3fefffff
 8008480:	3ff00000 	.word	0x3ff00000
 8008484:	3fe00000 	.word	0x3fe00000
 8008488:	41e00000 	.word	0x41e00000
 800848c:	3feffffe 	.word	0x3feffffe
 8008490:	2200      	movs	r2, #0
 8008492:	4b63      	ldr	r3, [pc, #396]	; (8008620 <__ieee754_pow+0x3b8>)
 8008494:	f7f7 fea0 	bl	80001d8 <__aeabi_dsub>
 8008498:	a355      	add	r3, pc, #340	; (adr r3, 80085f0 <__ieee754_pow+0x388>)
 800849a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800849e:	4604      	mov	r4, r0
 80084a0:	460d      	mov	r5, r1
 80084a2:	f7f8 f851 	bl	8000548 <__aeabi_dmul>
 80084a6:	a354      	add	r3, pc, #336	; (adr r3, 80085f8 <__ieee754_pow+0x390>)
 80084a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084ac:	4606      	mov	r6, r0
 80084ae:	460f      	mov	r7, r1
 80084b0:	4620      	mov	r0, r4
 80084b2:	4629      	mov	r1, r5
 80084b4:	f7f8 f848 	bl	8000548 <__aeabi_dmul>
 80084b8:	2200      	movs	r2, #0
 80084ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80084be:	4b59      	ldr	r3, [pc, #356]	; (8008624 <__ieee754_pow+0x3bc>)
 80084c0:	4620      	mov	r0, r4
 80084c2:	4629      	mov	r1, r5
 80084c4:	f7f8 f840 	bl	8000548 <__aeabi_dmul>
 80084c8:	4602      	mov	r2, r0
 80084ca:	460b      	mov	r3, r1
 80084cc:	a14c      	add	r1, pc, #304	; (adr r1, 8008600 <__ieee754_pow+0x398>)
 80084ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80084d2:	f7f7 fe81 	bl	80001d8 <__aeabi_dsub>
 80084d6:	4622      	mov	r2, r4
 80084d8:	462b      	mov	r3, r5
 80084da:	f7f8 f835 	bl	8000548 <__aeabi_dmul>
 80084de:	4602      	mov	r2, r0
 80084e0:	460b      	mov	r3, r1
 80084e2:	2000      	movs	r0, #0
 80084e4:	4950      	ldr	r1, [pc, #320]	; (8008628 <__ieee754_pow+0x3c0>)
 80084e6:	f7f7 fe77 	bl	80001d8 <__aeabi_dsub>
 80084ea:	4622      	mov	r2, r4
 80084ec:	462b      	mov	r3, r5
 80084ee:	4680      	mov	r8, r0
 80084f0:	4689      	mov	r9, r1
 80084f2:	4620      	mov	r0, r4
 80084f4:	4629      	mov	r1, r5
 80084f6:	f7f8 f827 	bl	8000548 <__aeabi_dmul>
 80084fa:	4602      	mov	r2, r0
 80084fc:	460b      	mov	r3, r1
 80084fe:	4640      	mov	r0, r8
 8008500:	4649      	mov	r1, r9
 8008502:	f7f8 f821 	bl	8000548 <__aeabi_dmul>
 8008506:	a340      	add	r3, pc, #256	; (adr r3, 8008608 <__ieee754_pow+0x3a0>)
 8008508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800850c:	f7f8 f81c 	bl	8000548 <__aeabi_dmul>
 8008510:	4602      	mov	r2, r0
 8008512:	460b      	mov	r3, r1
 8008514:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008518:	f7f7 fe5e 	bl	80001d8 <__aeabi_dsub>
 800851c:	4602      	mov	r2, r0
 800851e:	460b      	mov	r3, r1
 8008520:	4604      	mov	r4, r0
 8008522:	460d      	mov	r5, r1
 8008524:	4630      	mov	r0, r6
 8008526:	4639      	mov	r1, r7
 8008528:	f7f7 fe58 	bl	80001dc <__adddf3>
 800852c:	2000      	movs	r0, #0
 800852e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008532:	4632      	mov	r2, r6
 8008534:	463b      	mov	r3, r7
 8008536:	f7f7 fe4f 	bl	80001d8 <__aeabi_dsub>
 800853a:	4602      	mov	r2, r0
 800853c:	460b      	mov	r3, r1
 800853e:	4620      	mov	r0, r4
 8008540:	4629      	mov	r1, r5
 8008542:	f7f7 fe49 	bl	80001d8 <__aeabi_dsub>
 8008546:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008548:	f10b 33ff 	add.w	r3, fp, #4294967295
 800854c:	4313      	orrs	r3, r2
 800854e:	4606      	mov	r6, r0
 8008550:	460f      	mov	r7, r1
 8008552:	f040 81eb 	bne.w	800892c <__ieee754_pow+0x6c4>
 8008556:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8008610 <__ieee754_pow+0x3a8>
 800855a:	e9dd 4500 	ldrd	r4, r5, [sp]
 800855e:	2400      	movs	r4, #0
 8008560:	4622      	mov	r2, r4
 8008562:	462b      	mov	r3, r5
 8008564:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008568:	ed8d 7b02 	vstr	d7, [sp, #8]
 800856c:	f7f7 fe34 	bl	80001d8 <__aeabi_dsub>
 8008570:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008574:	f7f7 ffe8 	bl	8000548 <__aeabi_dmul>
 8008578:	e9dd 2300 	ldrd	r2, r3, [sp]
 800857c:	4680      	mov	r8, r0
 800857e:	4689      	mov	r9, r1
 8008580:	4630      	mov	r0, r6
 8008582:	4639      	mov	r1, r7
 8008584:	f7f7 ffe0 	bl	8000548 <__aeabi_dmul>
 8008588:	4602      	mov	r2, r0
 800858a:	460b      	mov	r3, r1
 800858c:	4640      	mov	r0, r8
 800858e:	4649      	mov	r1, r9
 8008590:	f7f7 fe24 	bl	80001dc <__adddf3>
 8008594:	4622      	mov	r2, r4
 8008596:	462b      	mov	r3, r5
 8008598:	4680      	mov	r8, r0
 800859a:	4689      	mov	r9, r1
 800859c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80085a0:	f7f7 ffd2 	bl	8000548 <__aeabi_dmul>
 80085a4:	460b      	mov	r3, r1
 80085a6:	4604      	mov	r4, r0
 80085a8:	460d      	mov	r5, r1
 80085aa:	4602      	mov	r2, r0
 80085ac:	4649      	mov	r1, r9
 80085ae:	4640      	mov	r0, r8
 80085b0:	e9cd 4500 	strd	r4, r5, [sp]
 80085b4:	f7f7 fe12 	bl	80001dc <__adddf3>
 80085b8:	4b1c      	ldr	r3, [pc, #112]	; (800862c <__ieee754_pow+0x3c4>)
 80085ba:	4299      	cmp	r1, r3
 80085bc:	4606      	mov	r6, r0
 80085be:	460f      	mov	r7, r1
 80085c0:	468b      	mov	fp, r1
 80085c2:	f340 82f7 	ble.w	8008bb4 <__ieee754_pow+0x94c>
 80085c6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80085ca:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80085ce:	4303      	orrs	r3, r0
 80085d0:	f000 81ea 	beq.w	80089a8 <__ieee754_pow+0x740>
 80085d4:	a310      	add	r3, pc, #64	; (adr r3, 8008618 <__ieee754_pow+0x3b0>)
 80085d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80085de:	f7f7 ffb3 	bl	8000548 <__aeabi_dmul>
 80085e2:	a30d      	add	r3, pc, #52	; (adr r3, 8008618 <__ieee754_pow+0x3b0>)
 80085e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085e8:	e6d5      	b.n	8008396 <__ieee754_pow+0x12e>
 80085ea:	bf00      	nop
 80085ec:	f3af 8000 	nop.w
 80085f0:	60000000 	.word	0x60000000
 80085f4:	3ff71547 	.word	0x3ff71547
 80085f8:	f85ddf44 	.word	0xf85ddf44
 80085fc:	3e54ae0b 	.word	0x3e54ae0b
 8008600:	55555555 	.word	0x55555555
 8008604:	3fd55555 	.word	0x3fd55555
 8008608:	652b82fe 	.word	0x652b82fe
 800860c:	3ff71547 	.word	0x3ff71547
 8008610:	00000000 	.word	0x00000000
 8008614:	bff00000 	.word	0xbff00000
 8008618:	8800759c 	.word	0x8800759c
 800861c:	7e37e43c 	.word	0x7e37e43c
 8008620:	3ff00000 	.word	0x3ff00000
 8008624:	3fd00000 	.word	0x3fd00000
 8008628:	3fe00000 	.word	0x3fe00000
 800862c:	408fffff 	.word	0x408fffff
 8008630:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8008634:	f04f 0200 	mov.w	r2, #0
 8008638:	da05      	bge.n	8008646 <__ieee754_pow+0x3de>
 800863a:	4bd3      	ldr	r3, [pc, #844]	; (8008988 <__ieee754_pow+0x720>)
 800863c:	f7f7 ff84 	bl	8000548 <__aeabi_dmul>
 8008640:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8008644:	460c      	mov	r4, r1
 8008646:	1523      	asrs	r3, r4, #20
 8008648:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800864c:	4413      	add	r3, r2
 800864e:	9309      	str	r3, [sp, #36]	; 0x24
 8008650:	4bce      	ldr	r3, [pc, #824]	; (800898c <__ieee754_pow+0x724>)
 8008652:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8008656:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800865a:	429c      	cmp	r4, r3
 800865c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8008660:	dd08      	ble.n	8008674 <__ieee754_pow+0x40c>
 8008662:	4bcb      	ldr	r3, [pc, #812]	; (8008990 <__ieee754_pow+0x728>)
 8008664:	429c      	cmp	r4, r3
 8008666:	f340 815e 	ble.w	8008926 <__ieee754_pow+0x6be>
 800866a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800866c:	3301      	adds	r3, #1
 800866e:	9309      	str	r3, [sp, #36]	; 0x24
 8008670:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8008674:	f04f 0a00 	mov.w	sl, #0
 8008678:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800867c:	930c      	str	r3, [sp, #48]	; 0x30
 800867e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008680:	4bc4      	ldr	r3, [pc, #784]	; (8008994 <__ieee754_pow+0x72c>)
 8008682:	4413      	add	r3, r2
 8008684:	ed93 7b00 	vldr	d7, [r3]
 8008688:	4629      	mov	r1, r5
 800868a:	ec53 2b17 	vmov	r2, r3, d7
 800868e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008692:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8008696:	f7f7 fd9f 	bl	80001d8 <__aeabi_dsub>
 800869a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800869e:	4606      	mov	r6, r0
 80086a0:	460f      	mov	r7, r1
 80086a2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80086a6:	f7f7 fd99 	bl	80001dc <__adddf3>
 80086aa:	4602      	mov	r2, r0
 80086ac:	460b      	mov	r3, r1
 80086ae:	2000      	movs	r0, #0
 80086b0:	49b9      	ldr	r1, [pc, #740]	; (8008998 <__ieee754_pow+0x730>)
 80086b2:	f7f8 f873 	bl	800079c <__aeabi_ddiv>
 80086b6:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80086ba:	4602      	mov	r2, r0
 80086bc:	460b      	mov	r3, r1
 80086be:	4630      	mov	r0, r6
 80086c0:	4639      	mov	r1, r7
 80086c2:	f7f7 ff41 	bl	8000548 <__aeabi_dmul>
 80086c6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80086ca:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80086ce:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80086d2:	2300      	movs	r3, #0
 80086d4:	9302      	str	r3, [sp, #8]
 80086d6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80086da:	106d      	asrs	r5, r5, #1
 80086dc:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80086e0:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80086e4:	2200      	movs	r2, #0
 80086e6:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 80086ea:	4640      	mov	r0, r8
 80086ec:	4649      	mov	r1, r9
 80086ee:	4614      	mov	r4, r2
 80086f0:	461d      	mov	r5, r3
 80086f2:	f7f7 ff29 	bl	8000548 <__aeabi_dmul>
 80086f6:	4602      	mov	r2, r0
 80086f8:	460b      	mov	r3, r1
 80086fa:	4630      	mov	r0, r6
 80086fc:	4639      	mov	r1, r7
 80086fe:	f7f7 fd6b 	bl	80001d8 <__aeabi_dsub>
 8008702:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008706:	4606      	mov	r6, r0
 8008708:	460f      	mov	r7, r1
 800870a:	4620      	mov	r0, r4
 800870c:	4629      	mov	r1, r5
 800870e:	f7f7 fd63 	bl	80001d8 <__aeabi_dsub>
 8008712:	4602      	mov	r2, r0
 8008714:	460b      	mov	r3, r1
 8008716:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800871a:	f7f7 fd5d 	bl	80001d8 <__aeabi_dsub>
 800871e:	4642      	mov	r2, r8
 8008720:	464b      	mov	r3, r9
 8008722:	f7f7 ff11 	bl	8000548 <__aeabi_dmul>
 8008726:	4602      	mov	r2, r0
 8008728:	460b      	mov	r3, r1
 800872a:	4630      	mov	r0, r6
 800872c:	4639      	mov	r1, r7
 800872e:	f7f7 fd53 	bl	80001d8 <__aeabi_dsub>
 8008732:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8008736:	f7f7 ff07 	bl	8000548 <__aeabi_dmul>
 800873a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800873e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008742:	4610      	mov	r0, r2
 8008744:	4619      	mov	r1, r3
 8008746:	f7f7 feff 	bl	8000548 <__aeabi_dmul>
 800874a:	a37b      	add	r3, pc, #492	; (adr r3, 8008938 <__ieee754_pow+0x6d0>)
 800874c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008750:	4604      	mov	r4, r0
 8008752:	460d      	mov	r5, r1
 8008754:	f7f7 fef8 	bl	8000548 <__aeabi_dmul>
 8008758:	a379      	add	r3, pc, #484	; (adr r3, 8008940 <__ieee754_pow+0x6d8>)
 800875a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800875e:	f7f7 fd3d 	bl	80001dc <__adddf3>
 8008762:	4622      	mov	r2, r4
 8008764:	462b      	mov	r3, r5
 8008766:	f7f7 feef 	bl	8000548 <__aeabi_dmul>
 800876a:	a377      	add	r3, pc, #476	; (adr r3, 8008948 <__ieee754_pow+0x6e0>)
 800876c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008770:	f7f7 fd34 	bl	80001dc <__adddf3>
 8008774:	4622      	mov	r2, r4
 8008776:	462b      	mov	r3, r5
 8008778:	f7f7 fee6 	bl	8000548 <__aeabi_dmul>
 800877c:	a374      	add	r3, pc, #464	; (adr r3, 8008950 <__ieee754_pow+0x6e8>)
 800877e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008782:	f7f7 fd2b 	bl	80001dc <__adddf3>
 8008786:	4622      	mov	r2, r4
 8008788:	462b      	mov	r3, r5
 800878a:	f7f7 fedd 	bl	8000548 <__aeabi_dmul>
 800878e:	a372      	add	r3, pc, #456	; (adr r3, 8008958 <__ieee754_pow+0x6f0>)
 8008790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008794:	f7f7 fd22 	bl	80001dc <__adddf3>
 8008798:	4622      	mov	r2, r4
 800879a:	462b      	mov	r3, r5
 800879c:	f7f7 fed4 	bl	8000548 <__aeabi_dmul>
 80087a0:	a36f      	add	r3, pc, #444	; (adr r3, 8008960 <__ieee754_pow+0x6f8>)
 80087a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087a6:	f7f7 fd19 	bl	80001dc <__adddf3>
 80087aa:	4622      	mov	r2, r4
 80087ac:	4606      	mov	r6, r0
 80087ae:	460f      	mov	r7, r1
 80087b0:	462b      	mov	r3, r5
 80087b2:	4620      	mov	r0, r4
 80087b4:	4629      	mov	r1, r5
 80087b6:	f7f7 fec7 	bl	8000548 <__aeabi_dmul>
 80087ba:	4602      	mov	r2, r0
 80087bc:	460b      	mov	r3, r1
 80087be:	4630      	mov	r0, r6
 80087c0:	4639      	mov	r1, r7
 80087c2:	f7f7 fec1 	bl	8000548 <__aeabi_dmul>
 80087c6:	4642      	mov	r2, r8
 80087c8:	4604      	mov	r4, r0
 80087ca:	460d      	mov	r5, r1
 80087cc:	464b      	mov	r3, r9
 80087ce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80087d2:	f7f7 fd03 	bl	80001dc <__adddf3>
 80087d6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80087da:	f7f7 feb5 	bl	8000548 <__aeabi_dmul>
 80087de:	4622      	mov	r2, r4
 80087e0:	462b      	mov	r3, r5
 80087e2:	f7f7 fcfb 	bl	80001dc <__adddf3>
 80087e6:	4642      	mov	r2, r8
 80087e8:	4606      	mov	r6, r0
 80087ea:	460f      	mov	r7, r1
 80087ec:	464b      	mov	r3, r9
 80087ee:	4640      	mov	r0, r8
 80087f0:	4649      	mov	r1, r9
 80087f2:	f7f7 fea9 	bl	8000548 <__aeabi_dmul>
 80087f6:	2200      	movs	r2, #0
 80087f8:	4b68      	ldr	r3, [pc, #416]	; (800899c <__ieee754_pow+0x734>)
 80087fa:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80087fe:	f7f7 fced 	bl	80001dc <__adddf3>
 8008802:	4632      	mov	r2, r6
 8008804:	463b      	mov	r3, r7
 8008806:	f7f7 fce9 	bl	80001dc <__adddf3>
 800880a:	9802      	ldr	r0, [sp, #8]
 800880c:	460d      	mov	r5, r1
 800880e:	4604      	mov	r4, r0
 8008810:	4602      	mov	r2, r0
 8008812:	460b      	mov	r3, r1
 8008814:	4640      	mov	r0, r8
 8008816:	4649      	mov	r1, r9
 8008818:	f7f7 fe96 	bl	8000548 <__aeabi_dmul>
 800881c:	2200      	movs	r2, #0
 800881e:	4680      	mov	r8, r0
 8008820:	4689      	mov	r9, r1
 8008822:	4b5e      	ldr	r3, [pc, #376]	; (800899c <__ieee754_pow+0x734>)
 8008824:	4620      	mov	r0, r4
 8008826:	4629      	mov	r1, r5
 8008828:	f7f7 fcd6 	bl	80001d8 <__aeabi_dsub>
 800882c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008830:	f7f7 fcd2 	bl	80001d8 <__aeabi_dsub>
 8008834:	4602      	mov	r2, r0
 8008836:	460b      	mov	r3, r1
 8008838:	4630      	mov	r0, r6
 800883a:	4639      	mov	r1, r7
 800883c:	f7f7 fccc 	bl	80001d8 <__aeabi_dsub>
 8008840:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008844:	f7f7 fe80 	bl	8000548 <__aeabi_dmul>
 8008848:	4622      	mov	r2, r4
 800884a:	4606      	mov	r6, r0
 800884c:	460f      	mov	r7, r1
 800884e:	462b      	mov	r3, r5
 8008850:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008854:	f7f7 fe78 	bl	8000548 <__aeabi_dmul>
 8008858:	4602      	mov	r2, r0
 800885a:	460b      	mov	r3, r1
 800885c:	4630      	mov	r0, r6
 800885e:	4639      	mov	r1, r7
 8008860:	f7f7 fcbc 	bl	80001dc <__adddf3>
 8008864:	4606      	mov	r6, r0
 8008866:	460f      	mov	r7, r1
 8008868:	4602      	mov	r2, r0
 800886a:	460b      	mov	r3, r1
 800886c:	4640      	mov	r0, r8
 800886e:	4649      	mov	r1, r9
 8008870:	f7f7 fcb4 	bl	80001dc <__adddf3>
 8008874:	9802      	ldr	r0, [sp, #8]
 8008876:	a33c      	add	r3, pc, #240	; (adr r3, 8008968 <__ieee754_pow+0x700>)
 8008878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800887c:	4604      	mov	r4, r0
 800887e:	460d      	mov	r5, r1
 8008880:	f7f7 fe62 	bl	8000548 <__aeabi_dmul>
 8008884:	4642      	mov	r2, r8
 8008886:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800888a:	464b      	mov	r3, r9
 800888c:	4620      	mov	r0, r4
 800888e:	4629      	mov	r1, r5
 8008890:	f7f7 fca2 	bl	80001d8 <__aeabi_dsub>
 8008894:	4602      	mov	r2, r0
 8008896:	460b      	mov	r3, r1
 8008898:	4630      	mov	r0, r6
 800889a:	4639      	mov	r1, r7
 800889c:	f7f7 fc9c 	bl	80001d8 <__aeabi_dsub>
 80088a0:	a333      	add	r3, pc, #204	; (adr r3, 8008970 <__ieee754_pow+0x708>)
 80088a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088a6:	f7f7 fe4f 	bl	8000548 <__aeabi_dmul>
 80088aa:	a333      	add	r3, pc, #204	; (adr r3, 8008978 <__ieee754_pow+0x710>)
 80088ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088b0:	4606      	mov	r6, r0
 80088b2:	460f      	mov	r7, r1
 80088b4:	4620      	mov	r0, r4
 80088b6:	4629      	mov	r1, r5
 80088b8:	f7f7 fe46 	bl	8000548 <__aeabi_dmul>
 80088bc:	4602      	mov	r2, r0
 80088be:	460b      	mov	r3, r1
 80088c0:	4630      	mov	r0, r6
 80088c2:	4639      	mov	r1, r7
 80088c4:	f7f7 fc8a 	bl	80001dc <__adddf3>
 80088c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80088ca:	4b35      	ldr	r3, [pc, #212]	; (80089a0 <__ieee754_pow+0x738>)
 80088cc:	4413      	add	r3, r2
 80088ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088d2:	f7f7 fc83 	bl	80001dc <__adddf3>
 80088d6:	4604      	mov	r4, r0
 80088d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80088da:	460d      	mov	r5, r1
 80088dc:	f7f7 fdca 	bl	8000474 <__aeabi_i2d>
 80088e0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80088e2:	4b30      	ldr	r3, [pc, #192]	; (80089a4 <__ieee754_pow+0x73c>)
 80088e4:	4413      	add	r3, r2
 80088e6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80088ea:	4606      	mov	r6, r0
 80088ec:	460f      	mov	r7, r1
 80088ee:	4622      	mov	r2, r4
 80088f0:	462b      	mov	r3, r5
 80088f2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80088f6:	f7f7 fc71 	bl	80001dc <__adddf3>
 80088fa:	4642      	mov	r2, r8
 80088fc:	464b      	mov	r3, r9
 80088fe:	f7f7 fc6d 	bl	80001dc <__adddf3>
 8008902:	4632      	mov	r2, r6
 8008904:	463b      	mov	r3, r7
 8008906:	f7f7 fc69 	bl	80001dc <__adddf3>
 800890a:	9802      	ldr	r0, [sp, #8]
 800890c:	4632      	mov	r2, r6
 800890e:	463b      	mov	r3, r7
 8008910:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008914:	f7f7 fc60 	bl	80001d8 <__aeabi_dsub>
 8008918:	4642      	mov	r2, r8
 800891a:	464b      	mov	r3, r9
 800891c:	f7f7 fc5c 	bl	80001d8 <__aeabi_dsub>
 8008920:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008924:	e607      	b.n	8008536 <__ieee754_pow+0x2ce>
 8008926:	f04f 0a01 	mov.w	sl, #1
 800892a:	e6a5      	b.n	8008678 <__ieee754_pow+0x410>
 800892c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8008980 <__ieee754_pow+0x718>
 8008930:	e613      	b.n	800855a <__ieee754_pow+0x2f2>
 8008932:	bf00      	nop
 8008934:	f3af 8000 	nop.w
 8008938:	4a454eef 	.word	0x4a454eef
 800893c:	3fca7e28 	.word	0x3fca7e28
 8008940:	93c9db65 	.word	0x93c9db65
 8008944:	3fcd864a 	.word	0x3fcd864a
 8008948:	a91d4101 	.word	0xa91d4101
 800894c:	3fd17460 	.word	0x3fd17460
 8008950:	518f264d 	.word	0x518f264d
 8008954:	3fd55555 	.word	0x3fd55555
 8008958:	db6fabff 	.word	0xdb6fabff
 800895c:	3fdb6db6 	.word	0x3fdb6db6
 8008960:	33333303 	.word	0x33333303
 8008964:	3fe33333 	.word	0x3fe33333
 8008968:	e0000000 	.word	0xe0000000
 800896c:	3feec709 	.word	0x3feec709
 8008970:	dc3a03fd 	.word	0xdc3a03fd
 8008974:	3feec709 	.word	0x3feec709
 8008978:	145b01f5 	.word	0x145b01f5
 800897c:	be3e2fe0 	.word	0xbe3e2fe0
 8008980:	00000000 	.word	0x00000000
 8008984:	3ff00000 	.word	0x3ff00000
 8008988:	43400000 	.word	0x43400000
 800898c:	0003988e 	.word	0x0003988e
 8008990:	000bb679 	.word	0x000bb679
 8008994:	08009138 	.word	0x08009138
 8008998:	3ff00000 	.word	0x3ff00000
 800899c:	40080000 	.word	0x40080000
 80089a0:	08009158 	.word	0x08009158
 80089a4:	08009148 	.word	0x08009148
 80089a8:	a3b4      	add	r3, pc, #720	; (adr r3, 8008c7c <__ieee754_pow+0xa14>)
 80089aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089ae:	4640      	mov	r0, r8
 80089b0:	4649      	mov	r1, r9
 80089b2:	f7f7 fc13 	bl	80001dc <__adddf3>
 80089b6:	4622      	mov	r2, r4
 80089b8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80089bc:	462b      	mov	r3, r5
 80089be:	4630      	mov	r0, r6
 80089c0:	4639      	mov	r1, r7
 80089c2:	f7f7 fc09 	bl	80001d8 <__aeabi_dsub>
 80089c6:	4602      	mov	r2, r0
 80089c8:	460b      	mov	r3, r1
 80089ca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80089ce:	f7f8 f84b 	bl	8000a68 <__aeabi_dcmpgt>
 80089d2:	2800      	cmp	r0, #0
 80089d4:	f47f adfe 	bne.w	80085d4 <__ieee754_pow+0x36c>
 80089d8:	4aa3      	ldr	r2, [pc, #652]	; (8008c68 <__ieee754_pow+0xa00>)
 80089da:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80089de:	4293      	cmp	r3, r2
 80089e0:	f340 810a 	ble.w	8008bf8 <__ieee754_pow+0x990>
 80089e4:	151b      	asrs	r3, r3, #20
 80089e6:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80089ea:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80089ee:	fa4a f303 	asr.w	r3, sl, r3
 80089f2:	445b      	add	r3, fp
 80089f4:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80089f8:	4e9c      	ldr	r6, [pc, #624]	; (8008c6c <__ieee754_pow+0xa04>)
 80089fa:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80089fe:	4116      	asrs	r6, r2
 8008a00:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8008a04:	2000      	movs	r0, #0
 8008a06:	ea23 0106 	bic.w	r1, r3, r6
 8008a0a:	f1c2 0214 	rsb	r2, r2, #20
 8008a0e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8008a12:	fa4a fa02 	asr.w	sl, sl, r2
 8008a16:	f1bb 0f00 	cmp.w	fp, #0
 8008a1a:	4602      	mov	r2, r0
 8008a1c:	460b      	mov	r3, r1
 8008a1e:	4620      	mov	r0, r4
 8008a20:	4629      	mov	r1, r5
 8008a22:	bfb8      	it	lt
 8008a24:	f1ca 0a00 	rsblt	sl, sl, #0
 8008a28:	f7f7 fbd6 	bl	80001d8 <__aeabi_dsub>
 8008a2c:	e9cd 0100 	strd	r0, r1, [sp]
 8008a30:	4642      	mov	r2, r8
 8008a32:	464b      	mov	r3, r9
 8008a34:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008a38:	f7f7 fbd0 	bl	80001dc <__adddf3>
 8008a3c:	2000      	movs	r0, #0
 8008a3e:	a378      	add	r3, pc, #480	; (adr r3, 8008c20 <__ieee754_pow+0x9b8>)
 8008a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a44:	4604      	mov	r4, r0
 8008a46:	460d      	mov	r5, r1
 8008a48:	f7f7 fd7e 	bl	8000548 <__aeabi_dmul>
 8008a4c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008a50:	4606      	mov	r6, r0
 8008a52:	460f      	mov	r7, r1
 8008a54:	4620      	mov	r0, r4
 8008a56:	4629      	mov	r1, r5
 8008a58:	f7f7 fbbe 	bl	80001d8 <__aeabi_dsub>
 8008a5c:	4602      	mov	r2, r0
 8008a5e:	460b      	mov	r3, r1
 8008a60:	4640      	mov	r0, r8
 8008a62:	4649      	mov	r1, r9
 8008a64:	f7f7 fbb8 	bl	80001d8 <__aeabi_dsub>
 8008a68:	a36f      	add	r3, pc, #444	; (adr r3, 8008c28 <__ieee754_pow+0x9c0>)
 8008a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a6e:	f7f7 fd6b 	bl	8000548 <__aeabi_dmul>
 8008a72:	a36f      	add	r3, pc, #444	; (adr r3, 8008c30 <__ieee754_pow+0x9c8>)
 8008a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a78:	4680      	mov	r8, r0
 8008a7a:	4689      	mov	r9, r1
 8008a7c:	4620      	mov	r0, r4
 8008a7e:	4629      	mov	r1, r5
 8008a80:	f7f7 fd62 	bl	8000548 <__aeabi_dmul>
 8008a84:	4602      	mov	r2, r0
 8008a86:	460b      	mov	r3, r1
 8008a88:	4640      	mov	r0, r8
 8008a8a:	4649      	mov	r1, r9
 8008a8c:	f7f7 fba6 	bl	80001dc <__adddf3>
 8008a90:	4604      	mov	r4, r0
 8008a92:	460d      	mov	r5, r1
 8008a94:	4602      	mov	r2, r0
 8008a96:	460b      	mov	r3, r1
 8008a98:	4630      	mov	r0, r6
 8008a9a:	4639      	mov	r1, r7
 8008a9c:	f7f7 fb9e 	bl	80001dc <__adddf3>
 8008aa0:	4632      	mov	r2, r6
 8008aa2:	463b      	mov	r3, r7
 8008aa4:	4680      	mov	r8, r0
 8008aa6:	4689      	mov	r9, r1
 8008aa8:	f7f7 fb96 	bl	80001d8 <__aeabi_dsub>
 8008aac:	4602      	mov	r2, r0
 8008aae:	460b      	mov	r3, r1
 8008ab0:	4620      	mov	r0, r4
 8008ab2:	4629      	mov	r1, r5
 8008ab4:	f7f7 fb90 	bl	80001d8 <__aeabi_dsub>
 8008ab8:	4642      	mov	r2, r8
 8008aba:	4606      	mov	r6, r0
 8008abc:	460f      	mov	r7, r1
 8008abe:	464b      	mov	r3, r9
 8008ac0:	4640      	mov	r0, r8
 8008ac2:	4649      	mov	r1, r9
 8008ac4:	f7f7 fd40 	bl	8000548 <__aeabi_dmul>
 8008ac8:	a35b      	add	r3, pc, #364	; (adr r3, 8008c38 <__ieee754_pow+0x9d0>)
 8008aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ace:	4604      	mov	r4, r0
 8008ad0:	460d      	mov	r5, r1
 8008ad2:	f7f7 fd39 	bl	8000548 <__aeabi_dmul>
 8008ad6:	a35a      	add	r3, pc, #360	; (adr r3, 8008c40 <__ieee754_pow+0x9d8>)
 8008ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008adc:	f7f7 fb7c 	bl	80001d8 <__aeabi_dsub>
 8008ae0:	4622      	mov	r2, r4
 8008ae2:	462b      	mov	r3, r5
 8008ae4:	f7f7 fd30 	bl	8000548 <__aeabi_dmul>
 8008ae8:	a357      	add	r3, pc, #348	; (adr r3, 8008c48 <__ieee754_pow+0x9e0>)
 8008aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aee:	f7f7 fb75 	bl	80001dc <__adddf3>
 8008af2:	4622      	mov	r2, r4
 8008af4:	462b      	mov	r3, r5
 8008af6:	f7f7 fd27 	bl	8000548 <__aeabi_dmul>
 8008afa:	a355      	add	r3, pc, #340	; (adr r3, 8008c50 <__ieee754_pow+0x9e8>)
 8008afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b00:	f7f7 fb6a 	bl	80001d8 <__aeabi_dsub>
 8008b04:	4622      	mov	r2, r4
 8008b06:	462b      	mov	r3, r5
 8008b08:	f7f7 fd1e 	bl	8000548 <__aeabi_dmul>
 8008b0c:	a352      	add	r3, pc, #328	; (adr r3, 8008c58 <__ieee754_pow+0x9f0>)
 8008b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b12:	f7f7 fb63 	bl	80001dc <__adddf3>
 8008b16:	4622      	mov	r2, r4
 8008b18:	462b      	mov	r3, r5
 8008b1a:	f7f7 fd15 	bl	8000548 <__aeabi_dmul>
 8008b1e:	4602      	mov	r2, r0
 8008b20:	460b      	mov	r3, r1
 8008b22:	4640      	mov	r0, r8
 8008b24:	4649      	mov	r1, r9
 8008b26:	f7f7 fb57 	bl	80001d8 <__aeabi_dsub>
 8008b2a:	4604      	mov	r4, r0
 8008b2c:	460d      	mov	r5, r1
 8008b2e:	4602      	mov	r2, r0
 8008b30:	460b      	mov	r3, r1
 8008b32:	4640      	mov	r0, r8
 8008b34:	4649      	mov	r1, r9
 8008b36:	f7f7 fd07 	bl	8000548 <__aeabi_dmul>
 8008b3a:	2200      	movs	r2, #0
 8008b3c:	e9cd 0100 	strd	r0, r1, [sp]
 8008b40:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008b44:	4620      	mov	r0, r4
 8008b46:	4629      	mov	r1, r5
 8008b48:	f7f7 fb46 	bl	80001d8 <__aeabi_dsub>
 8008b4c:	4602      	mov	r2, r0
 8008b4e:	460b      	mov	r3, r1
 8008b50:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008b54:	f7f7 fe22 	bl	800079c <__aeabi_ddiv>
 8008b58:	4632      	mov	r2, r6
 8008b5a:	4604      	mov	r4, r0
 8008b5c:	460d      	mov	r5, r1
 8008b5e:	463b      	mov	r3, r7
 8008b60:	4640      	mov	r0, r8
 8008b62:	4649      	mov	r1, r9
 8008b64:	f7f7 fcf0 	bl	8000548 <__aeabi_dmul>
 8008b68:	4632      	mov	r2, r6
 8008b6a:	463b      	mov	r3, r7
 8008b6c:	f7f7 fb36 	bl	80001dc <__adddf3>
 8008b70:	4602      	mov	r2, r0
 8008b72:	460b      	mov	r3, r1
 8008b74:	4620      	mov	r0, r4
 8008b76:	4629      	mov	r1, r5
 8008b78:	f7f7 fb2e 	bl	80001d8 <__aeabi_dsub>
 8008b7c:	4642      	mov	r2, r8
 8008b7e:	464b      	mov	r3, r9
 8008b80:	f7f7 fb2a 	bl	80001d8 <__aeabi_dsub>
 8008b84:	4602      	mov	r2, r0
 8008b86:	460b      	mov	r3, r1
 8008b88:	2000      	movs	r0, #0
 8008b8a:	4939      	ldr	r1, [pc, #228]	; (8008c70 <__ieee754_pow+0xa08>)
 8008b8c:	f7f7 fb24 	bl	80001d8 <__aeabi_dsub>
 8008b90:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8008b94:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8008b98:	4602      	mov	r2, r0
 8008b9a:	460b      	mov	r3, r1
 8008b9c:	da2f      	bge.n	8008bfe <__ieee754_pow+0x996>
 8008b9e:	4650      	mov	r0, sl
 8008ba0:	ec43 2b10 	vmov	d0, r2, r3
 8008ba4:	f000 f9c0 	bl	8008f28 <scalbn>
 8008ba8:	ec51 0b10 	vmov	r0, r1, d0
 8008bac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008bb0:	f7ff bbf1 	b.w	8008396 <__ieee754_pow+0x12e>
 8008bb4:	4b2f      	ldr	r3, [pc, #188]	; (8008c74 <__ieee754_pow+0xa0c>)
 8008bb6:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8008bba:	429e      	cmp	r6, r3
 8008bbc:	f77f af0c 	ble.w	80089d8 <__ieee754_pow+0x770>
 8008bc0:	4b2d      	ldr	r3, [pc, #180]	; (8008c78 <__ieee754_pow+0xa10>)
 8008bc2:	440b      	add	r3, r1
 8008bc4:	4303      	orrs	r3, r0
 8008bc6:	d00b      	beq.n	8008be0 <__ieee754_pow+0x978>
 8008bc8:	a325      	add	r3, pc, #148	; (adr r3, 8008c60 <__ieee754_pow+0x9f8>)
 8008bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008bd2:	f7f7 fcb9 	bl	8000548 <__aeabi_dmul>
 8008bd6:	a322      	add	r3, pc, #136	; (adr r3, 8008c60 <__ieee754_pow+0x9f8>)
 8008bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bdc:	f7ff bbdb 	b.w	8008396 <__ieee754_pow+0x12e>
 8008be0:	4622      	mov	r2, r4
 8008be2:	462b      	mov	r3, r5
 8008be4:	f7f7 faf8 	bl	80001d8 <__aeabi_dsub>
 8008be8:	4642      	mov	r2, r8
 8008bea:	464b      	mov	r3, r9
 8008bec:	f7f7 ff32 	bl	8000a54 <__aeabi_dcmpge>
 8008bf0:	2800      	cmp	r0, #0
 8008bf2:	f43f aef1 	beq.w	80089d8 <__ieee754_pow+0x770>
 8008bf6:	e7e7      	b.n	8008bc8 <__ieee754_pow+0x960>
 8008bf8:	f04f 0a00 	mov.w	sl, #0
 8008bfc:	e718      	b.n	8008a30 <__ieee754_pow+0x7c8>
 8008bfe:	4621      	mov	r1, r4
 8008c00:	e7d4      	b.n	8008bac <__ieee754_pow+0x944>
 8008c02:	2000      	movs	r0, #0
 8008c04:	491a      	ldr	r1, [pc, #104]	; (8008c70 <__ieee754_pow+0xa08>)
 8008c06:	f7ff bb8f 	b.w	8008328 <__ieee754_pow+0xc0>
 8008c0a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008c0e:	f7ff bb8b 	b.w	8008328 <__ieee754_pow+0xc0>
 8008c12:	4630      	mov	r0, r6
 8008c14:	4639      	mov	r1, r7
 8008c16:	f7ff bb87 	b.w	8008328 <__ieee754_pow+0xc0>
 8008c1a:	4693      	mov	fp, r2
 8008c1c:	f7ff bb98 	b.w	8008350 <__ieee754_pow+0xe8>
 8008c20:	00000000 	.word	0x00000000
 8008c24:	3fe62e43 	.word	0x3fe62e43
 8008c28:	fefa39ef 	.word	0xfefa39ef
 8008c2c:	3fe62e42 	.word	0x3fe62e42
 8008c30:	0ca86c39 	.word	0x0ca86c39
 8008c34:	be205c61 	.word	0xbe205c61
 8008c38:	72bea4d0 	.word	0x72bea4d0
 8008c3c:	3e663769 	.word	0x3e663769
 8008c40:	c5d26bf1 	.word	0xc5d26bf1
 8008c44:	3ebbbd41 	.word	0x3ebbbd41
 8008c48:	af25de2c 	.word	0xaf25de2c
 8008c4c:	3f11566a 	.word	0x3f11566a
 8008c50:	16bebd93 	.word	0x16bebd93
 8008c54:	3f66c16c 	.word	0x3f66c16c
 8008c58:	5555553e 	.word	0x5555553e
 8008c5c:	3fc55555 	.word	0x3fc55555
 8008c60:	c2f8f359 	.word	0xc2f8f359
 8008c64:	01a56e1f 	.word	0x01a56e1f
 8008c68:	3fe00000 	.word	0x3fe00000
 8008c6c:	000fffff 	.word	0x000fffff
 8008c70:	3ff00000 	.word	0x3ff00000
 8008c74:	4090cbff 	.word	0x4090cbff
 8008c78:	3f6f3400 	.word	0x3f6f3400
 8008c7c:	652b82fe 	.word	0x652b82fe
 8008c80:	3c971547 	.word	0x3c971547

08008c84 <__ieee754_sqrt>:
 8008c84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c88:	4955      	ldr	r1, [pc, #340]	; (8008de0 <__ieee754_sqrt+0x15c>)
 8008c8a:	ec55 4b10 	vmov	r4, r5, d0
 8008c8e:	43a9      	bics	r1, r5
 8008c90:	462b      	mov	r3, r5
 8008c92:	462a      	mov	r2, r5
 8008c94:	d112      	bne.n	8008cbc <__ieee754_sqrt+0x38>
 8008c96:	ee10 2a10 	vmov	r2, s0
 8008c9a:	ee10 0a10 	vmov	r0, s0
 8008c9e:	4629      	mov	r1, r5
 8008ca0:	f7f7 fc52 	bl	8000548 <__aeabi_dmul>
 8008ca4:	4602      	mov	r2, r0
 8008ca6:	460b      	mov	r3, r1
 8008ca8:	4620      	mov	r0, r4
 8008caa:	4629      	mov	r1, r5
 8008cac:	f7f7 fa96 	bl	80001dc <__adddf3>
 8008cb0:	4604      	mov	r4, r0
 8008cb2:	460d      	mov	r5, r1
 8008cb4:	ec45 4b10 	vmov	d0, r4, r5
 8008cb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008cbc:	2d00      	cmp	r5, #0
 8008cbe:	ee10 0a10 	vmov	r0, s0
 8008cc2:	4621      	mov	r1, r4
 8008cc4:	dc0f      	bgt.n	8008ce6 <__ieee754_sqrt+0x62>
 8008cc6:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8008cca:	4330      	orrs	r0, r6
 8008ccc:	d0f2      	beq.n	8008cb4 <__ieee754_sqrt+0x30>
 8008cce:	b155      	cbz	r5, 8008ce6 <__ieee754_sqrt+0x62>
 8008cd0:	ee10 2a10 	vmov	r2, s0
 8008cd4:	4620      	mov	r0, r4
 8008cd6:	4629      	mov	r1, r5
 8008cd8:	f7f7 fa7e 	bl	80001d8 <__aeabi_dsub>
 8008cdc:	4602      	mov	r2, r0
 8008cde:	460b      	mov	r3, r1
 8008ce0:	f7f7 fd5c 	bl	800079c <__aeabi_ddiv>
 8008ce4:	e7e4      	b.n	8008cb0 <__ieee754_sqrt+0x2c>
 8008ce6:	151b      	asrs	r3, r3, #20
 8008ce8:	d073      	beq.n	8008dd2 <__ieee754_sqrt+0x14e>
 8008cea:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008cee:	07dd      	lsls	r5, r3, #31
 8008cf0:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8008cf4:	bf48      	it	mi
 8008cf6:	0fc8      	lsrmi	r0, r1, #31
 8008cf8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8008cfc:	bf44      	itt	mi
 8008cfe:	0049      	lslmi	r1, r1, #1
 8008d00:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8008d04:	2500      	movs	r5, #0
 8008d06:	1058      	asrs	r0, r3, #1
 8008d08:	0fcb      	lsrs	r3, r1, #31
 8008d0a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8008d0e:	0049      	lsls	r1, r1, #1
 8008d10:	2316      	movs	r3, #22
 8008d12:	462c      	mov	r4, r5
 8008d14:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8008d18:	19a7      	adds	r7, r4, r6
 8008d1a:	4297      	cmp	r7, r2
 8008d1c:	bfde      	ittt	le
 8008d1e:	19bc      	addle	r4, r7, r6
 8008d20:	1bd2      	suble	r2, r2, r7
 8008d22:	19ad      	addle	r5, r5, r6
 8008d24:	0fcf      	lsrs	r7, r1, #31
 8008d26:	3b01      	subs	r3, #1
 8008d28:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8008d2c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8008d30:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8008d34:	d1f0      	bne.n	8008d18 <__ieee754_sqrt+0x94>
 8008d36:	f04f 0c20 	mov.w	ip, #32
 8008d3a:	469e      	mov	lr, r3
 8008d3c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8008d40:	42a2      	cmp	r2, r4
 8008d42:	eb06 070e 	add.w	r7, r6, lr
 8008d46:	dc02      	bgt.n	8008d4e <__ieee754_sqrt+0xca>
 8008d48:	d112      	bne.n	8008d70 <__ieee754_sqrt+0xec>
 8008d4a:	428f      	cmp	r7, r1
 8008d4c:	d810      	bhi.n	8008d70 <__ieee754_sqrt+0xec>
 8008d4e:	2f00      	cmp	r7, #0
 8008d50:	eb07 0e06 	add.w	lr, r7, r6
 8008d54:	da42      	bge.n	8008ddc <__ieee754_sqrt+0x158>
 8008d56:	f1be 0f00 	cmp.w	lr, #0
 8008d5a:	db3f      	blt.n	8008ddc <__ieee754_sqrt+0x158>
 8008d5c:	f104 0801 	add.w	r8, r4, #1
 8008d60:	1b12      	subs	r2, r2, r4
 8008d62:	428f      	cmp	r7, r1
 8008d64:	bf88      	it	hi
 8008d66:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8008d6a:	1bc9      	subs	r1, r1, r7
 8008d6c:	4433      	add	r3, r6
 8008d6e:	4644      	mov	r4, r8
 8008d70:	0052      	lsls	r2, r2, #1
 8008d72:	f1bc 0c01 	subs.w	ip, ip, #1
 8008d76:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8008d7a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8008d7e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8008d82:	d1dd      	bne.n	8008d40 <__ieee754_sqrt+0xbc>
 8008d84:	430a      	orrs	r2, r1
 8008d86:	d006      	beq.n	8008d96 <__ieee754_sqrt+0x112>
 8008d88:	1c5c      	adds	r4, r3, #1
 8008d8a:	bf13      	iteet	ne
 8008d8c:	3301      	addne	r3, #1
 8008d8e:	3501      	addeq	r5, #1
 8008d90:	4663      	moveq	r3, ip
 8008d92:	f023 0301 	bicne.w	r3, r3, #1
 8008d96:	106a      	asrs	r2, r5, #1
 8008d98:	085b      	lsrs	r3, r3, #1
 8008d9a:	07e9      	lsls	r1, r5, #31
 8008d9c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8008da0:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8008da4:	bf48      	it	mi
 8008da6:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8008daa:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8008dae:	461c      	mov	r4, r3
 8008db0:	e780      	b.n	8008cb4 <__ieee754_sqrt+0x30>
 8008db2:	0aca      	lsrs	r2, r1, #11
 8008db4:	3815      	subs	r0, #21
 8008db6:	0549      	lsls	r1, r1, #21
 8008db8:	2a00      	cmp	r2, #0
 8008dba:	d0fa      	beq.n	8008db2 <__ieee754_sqrt+0x12e>
 8008dbc:	02d6      	lsls	r6, r2, #11
 8008dbe:	d50a      	bpl.n	8008dd6 <__ieee754_sqrt+0x152>
 8008dc0:	f1c3 0420 	rsb	r4, r3, #32
 8008dc4:	fa21 f404 	lsr.w	r4, r1, r4
 8008dc8:	1e5d      	subs	r5, r3, #1
 8008dca:	4099      	lsls	r1, r3
 8008dcc:	4322      	orrs	r2, r4
 8008dce:	1b43      	subs	r3, r0, r5
 8008dd0:	e78b      	b.n	8008cea <__ieee754_sqrt+0x66>
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	e7f0      	b.n	8008db8 <__ieee754_sqrt+0x134>
 8008dd6:	0052      	lsls	r2, r2, #1
 8008dd8:	3301      	adds	r3, #1
 8008dda:	e7ef      	b.n	8008dbc <__ieee754_sqrt+0x138>
 8008ddc:	46a0      	mov	r8, r4
 8008dde:	e7bf      	b.n	8008d60 <__ieee754_sqrt+0xdc>
 8008de0:	7ff00000 	.word	0x7ff00000

08008de4 <fabs>:
 8008de4:	ec51 0b10 	vmov	r0, r1, d0
 8008de8:	ee10 2a10 	vmov	r2, s0
 8008dec:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008df0:	ec43 2b10 	vmov	d0, r2, r3
 8008df4:	4770      	bx	lr

08008df6 <finite>:
 8008df6:	ee10 3a90 	vmov	r3, s1
 8008dfa:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8008dfe:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8008e02:	0fc0      	lsrs	r0, r0, #31
 8008e04:	4770      	bx	lr

08008e06 <matherr>:
 8008e06:	2000      	movs	r0, #0
 8008e08:	4770      	bx	lr
 8008e0a:	0000      	movs	r0, r0
 8008e0c:	0000      	movs	r0, r0
	...

08008e10 <nan>:
 8008e10:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8008e18 <nan+0x8>
 8008e14:	4770      	bx	lr
 8008e16:	bf00      	nop
 8008e18:	00000000 	.word	0x00000000
 8008e1c:	7ff80000 	.word	0x7ff80000

08008e20 <rint>:
 8008e20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008e22:	ec51 0b10 	vmov	r0, r1, d0
 8008e26:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8008e2a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8008e2e:	2e13      	cmp	r6, #19
 8008e30:	460b      	mov	r3, r1
 8008e32:	ee10 4a10 	vmov	r4, s0
 8008e36:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8008e3a:	dc56      	bgt.n	8008eea <rint+0xca>
 8008e3c:	2e00      	cmp	r6, #0
 8008e3e:	da2b      	bge.n	8008e98 <rint+0x78>
 8008e40:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8008e44:	4302      	orrs	r2, r0
 8008e46:	d023      	beq.n	8008e90 <rint+0x70>
 8008e48:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8008e4c:	4302      	orrs	r2, r0
 8008e4e:	4254      	negs	r4, r2
 8008e50:	4314      	orrs	r4, r2
 8008e52:	0c4b      	lsrs	r3, r1, #17
 8008e54:	0b24      	lsrs	r4, r4, #12
 8008e56:	045b      	lsls	r3, r3, #17
 8008e58:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8008e5c:	ea44 0103 	orr.w	r1, r4, r3
 8008e60:	460b      	mov	r3, r1
 8008e62:	492f      	ldr	r1, [pc, #188]	; (8008f20 <rint+0x100>)
 8008e64:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8008e68:	e9d1 6700 	ldrd	r6, r7, [r1]
 8008e6c:	4602      	mov	r2, r0
 8008e6e:	4639      	mov	r1, r7
 8008e70:	4630      	mov	r0, r6
 8008e72:	f7f7 f9b3 	bl	80001dc <__adddf3>
 8008e76:	e9cd 0100 	strd	r0, r1, [sp]
 8008e7a:	463b      	mov	r3, r7
 8008e7c:	4632      	mov	r2, r6
 8008e7e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008e82:	f7f7 f9a9 	bl	80001d8 <__aeabi_dsub>
 8008e86:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008e8a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8008e8e:	4639      	mov	r1, r7
 8008e90:	ec41 0b10 	vmov	d0, r0, r1
 8008e94:	b003      	add	sp, #12
 8008e96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e98:	4a22      	ldr	r2, [pc, #136]	; (8008f24 <rint+0x104>)
 8008e9a:	4132      	asrs	r2, r6
 8008e9c:	ea01 0702 	and.w	r7, r1, r2
 8008ea0:	4307      	orrs	r7, r0
 8008ea2:	d0f5      	beq.n	8008e90 <rint+0x70>
 8008ea4:	0852      	lsrs	r2, r2, #1
 8008ea6:	4011      	ands	r1, r2
 8008ea8:	430c      	orrs	r4, r1
 8008eaa:	d00b      	beq.n	8008ec4 <rint+0xa4>
 8008eac:	ea23 0202 	bic.w	r2, r3, r2
 8008eb0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008eb4:	2e13      	cmp	r6, #19
 8008eb6:	fa43 f306 	asr.w	r3, r3, r6
 8008eba:	bf0c      	ite	eq
 8008ebc:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8008ec0:	2400      	movne	r4, #0
 8008ec2:	4313      	orrs	r3, r2
 8008ec4:	4916      	ldr	r1, [pc, #88]	; (8008f20 <rint+0x100>)
 8008ec6:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8008eca:	4622      	mov	r2, r4
 8008ecc:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008ed0:	4620      	mov	r0, r4
 8008ed2:	4629      	mov	r1, r5
 8008ed4:	f7f7 f982 	bl	80001dc <__adddf3>
 8008ed8:	e9cd 0100 	strd	r0, r1, [sp]
 8008edc:	4622      	mov	r2, r4
 8008ede:	462b      	mov	r3, r5
 8008ee0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008ee4:	f7f7 f978 	bl	80001d8 <__aeabi_dsub>
 8008ee8:	e7d2      	b.n	8008e90 <rint+0x70>
 8008eea:	2e33      	cmp	r6, #51	; 0x33
 8008eec:	dd07      	ble.n	8008efe <rint+0xde>
 8008eee:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8008ef2:	d1cd      	bne.n	8008e90 <rint+0x70>
 8008ef4:	ee10 2a10 	vmov	r2, s0
 8008ef8:	f7f7 f970 	bl	80001dc <__adddf3>
 8008efc:	e7c8      	b.n	8008e90 <rint+0x70>
 8008efe:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 8008f02:	f04f 32ff 	mov.w	r2, #4294967295
 8008f06:	40f2      	lsrs	r2, r6
 8008f08:	4210      	tst	r0, r2
 8008f0a:	d0c1      	beq.n	8008e90 <rint+0x70>
 8008f0c:	0852      	lsrs	r2, r2, #1
 8008f0e:	4210      	tst	r0, r2
 8008f10:	bf1f      	itttt	ne
 8008f12:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8008f16:	ea20 0202 	bicne.w	r2, r0, r2
 8008f1a:	4134      	asrne	r4, r6
 8008f1c:	4314      	orrne	r4, r2
 8008f1e:	e7d1      	b.n	8008ec4 <rint+0xa4>
 8008f20:	08009168 	.word	0x08009168
 8008f24:	000fffff 	.word	0x000fffff

08008f28 <scalbn>:
 8008f28:	b570      	push	{r4, r5, r6, lr}
 8008f2a:	ec55 4b10 	vmov	r4, r5, d0
 8008f2e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8008f32:	4606      	mov	r6, r0
 8008f34:	462b      	mov	r3, r5
 8008f36:	b9aa      	cbnz	r2, 8008f64 <scalbn+0x3c>
 8008f38:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8008f3c:	4323      	orrs	r3, r4
 8008f3e:	d03b      	beq.n	8008fb8 <scalbn+0x90>
 8008f40:	4b31      	ldr	r3, [pc, #196]	; (8009008 <scalbn+0xe0>)
 8008f42:	4629      	mov	r1, r5
 8008f44:	2200      	movs	r2, #0
 8008f46:	ee10 0a10 	vmov	r0, s0
 8008f4a:	f7f7 fafd 	bl	8000548 <__aeabi_dmul>
 8008f4e:	4b2f      	ldr	r3, [pc, #188]	; (800900c <scalbn+0xe4>)
 8008f50:	429e      	cmp	r6, r3
 8008f52:	4604      	mov	r4, r0
 8008f54:	460d      	mov	r5, r1
 8008f56:	da12      	bge.n	8008f7e <scalbn+0x56>
 8008f58:	a327      	add	r3, pc, #156	; (adr r3, 8008ff8 <scalbn+0xd0>)
 8008f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f5e:	f7f7 faf3 	bl	8000548 <__aeabi_dmul>
 8008f62:	e009      	b.n	8008f78 <scalbn+0x50>
 8008f64:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8008f68:	428a      	cmp	r2, r1
 8008f6a:	d10c      	bne.n	8008f86 <scalbn+0x5e>
 8008f6c:	ee10 2a10 	vmov	r2, s0
 8008f70:	4620      	mov	r0, r4
 8008f72:	4629      	mov	r1, r5
 8008f74:	f7f7 f932 	bl	80001dc <__adddf3>
 8008f78:	4604      	mov	r4, r0
 8008f7a:	460d      	mov	r5, r1
 8008f7c:	e01c      	b.n	8008fb8 <scalbn+0x90>
 8008f7e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8008f82:	460b      	mov	r3, r1
 8008f84:	3a36      	subs	r2, #54	; 0x36
 8008f86:	4432      	add	r2, r6
 8008f88:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8008f8c:	428a      	cmp	r2, r1
 8008f8e:	dd0b      	ble.n	8008fa8 <scalbn+0x80>
 8008f90:	ec45 4b11 	vmov	d1, r4, r5
 8008f94:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8009000 <scalbn+0xd8>
 8008f98:	f000 f83c 	bl	8009014 <copysign>
 8008f9c:	a318      	add	r3, pc, #96	; (adr r3, 8009000 <scalbn+0xd8>)
 8008f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fa2:	ec51 0b10 	vmov	r0, r1, d0
 8008fa6:	e7da      	b.n	8008f5e <scalbn+0x36>
 8008fa8:	2a00      	cmp	r2, #0
 8008faa:	dd08      	ble.n	8008fbe <scalbn+0x96>
 8008fac:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008fb0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008fb4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008fb8:	ec45 4b10 	vmov	d0, r4, r5
 8008fbc:	bd70      	pop	{r4, r5, r6, pc}
 8008fbe:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8008fc2:	da0d      	bge.n	8008fe0 <scalbn+0xb8>
 8008fc4:	f24c 3350 	movw	r3, #50000	; 0xc350
 8008fc8:	429e      	cmp	r6, r3
 8008fca:	ec45 4b11 	vmov	d1, r4, r5
 8008fce:	dce1      	bgt.n	8008f94 <scalbn+0x6c>
 8008fd0:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8008ff8 <scalbn+0xd0>
 8008fd4:	f000 f81e 	bl	8009014 <copysign>
 8008fd8:	a307      	add	r3, pc, #28	; (adr r3, 8008ff8 <scalbn+0xd0>)
 8008fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fde:	e7e0      	b.n	8008fa2 <scalbn+0x7a>
 8008fe0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008fe4:	3236      	adds	r2, #54	; 0x36
 8008fe6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008fea:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008fee:	4620      	mov	r0, r4
 8008ff0:	4629      	mov	r1, r5
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	4b06      	ldr	r3, [pc, #24]	; (8009010 <scalbn+0xe8>)
 8008ff6:	e7b2      	b.n	8008f5e <scalbn+0x36>
 8008ff8:	c2f8f359 	.word	0xc2f8f359
 8008ffc:	01a56e1f 	.word	0x01a56e1f
 8009000:	8800759c 	.word	0x8800759c
 8009004:	7e37e43c 	.word	0x7e37e43c
 8009008:	43500000 	.word	0x43500000
 800900c:	ffff3cb0 	.word	0xffff3cb0
 8009010:	3c900000 	.word	0x3c900000

08009014 <copysign>:
 8009014:	ec51 0b10 	vmov	r0, r1, d0
 8009018:	ee11 0a90 	vmov	r0, s3
 800901c:	ee10 2a10 	vmov	r2, s0
 8009020:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8009024:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8009028:	ea41 0300 	orr.w	r3, r1, r0
 800902c:	ec43 2b10 	vmov	d0, r2, r3
 8009030:	4770      	bx	lr
	...

08009034 <_init>:
 8009034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009036:	bf00      	nop
 8009038:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800903a:	bc08      	pop	{r3}
 800903c:	469e      	mov	lr, r3
 800903e:	4770      	bx	lr

08009040 <_fini>:
 8009040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009042:	bf00      	nop
 8009044:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009046:	bc08      	pop	{r3}
 8009048:	469e      	mov	lr, r3
 800904a:	4770      	bx	lr
